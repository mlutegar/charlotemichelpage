/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var e,n,t={668:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});var r=t(537),i=t.n(r),a=t(645),s=t.n(a)()(i());s.push([e.id,":root {\n  --swiper-navigation-size: 44px;\n  /*\n  --swiper-navigation-top-offset: 50%;\n  --swiper-navigation-sides-offset: 10px;\n  --swiper-navigation-color: var(--swiper-theme-color);\n  */\n}\n.swiper-button-prev,\n.swiper-button-next {\n  position: absolute;\n  top: var(--swiper-navigation-top-offset, 50%);\n  width: calc(var(--swiper-navigation-size) / 44 * 27);\n  height: var(--swiper-navigation-size);\n  margin-top: calc(0px - (var(--swiper-navigation-size) / 2));\n  z-index: 10;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: var(--swiper-navigation-color, var(--swiper-theme-color));\n}\n.swiper-button-prev.swiper-button-disabled,\n.swiper-button-next.swiper-button-disabled {\n  opacity: 0.35;\n  cursor: auto;\n  pointer-events: none;\n}\n.swiper-button-prev.swiper-button-hidden,\n.swiper-button-next.swiper-button-hidden {\n  opacity: 0;\n  cursor: auto;\n  pointer-events: none;\n}\n.swiper-navigation-disabled .swiper-button-prev,\n.swiper-navigation-disabled .swiper-button-next {\n  display: none !important;\n}\n.swiper-button-prev svg,\n.swiper-button-next svg {\n  width: 100%;\n  height: 100%;\n  object-fit: contain;\n  transform-origin: center;\n}\n.swiper-rtl .swiper-button-prev svg,\n.swiper-rtl .swiper-button-next svg {\n  transform: rotate(180deg);\n}\n.swiper-button-prev,\n.swiper-rtl .swiper-button-next {\n  left: var(--swiper-navigation-sides-offset, 10px);\n  right: auto;\n}\n.swiper-button-next,\n.swiper-rtl .swiper-button-prev {\n  right: var(--swiper-navigation-sides-offset, 10px);\n  left: auto;\n}\n.swiper-button-lock {\n  display: none;\n}\n/* Navigation font start */\n.swiper-button-prev:after,\n.swiper-button-next:after {\n  font-family: swiper-icons;\n  font-size: var(--swiper-navigation-size);\n  text-transform: none !important;\n  letter-spacing: 0;\n  font-variant: initial;\n  line-height: 1;\n}\n.swiper-button-prev:after,\n.swiper-rtl .swiper-button-next:after {\n  content: 'prev';\n}\n.swiper-button-next,\n.swiper-rtl .swiper-button-prev {\n  right: var(--swiper-navigation-sides-offset, 10px);\n  left: auto;\n}\n.swiper-button-next:after,\n.swiper-rtl .swiper-button-prev:after {\n  content: 'next';\n}\n/* Navigation font end */\n","",{version:3,sources:["webpack://./node_modules/swiper/modules/navigation.css"],names:[],mappings:"AAAA;EACE,8BAA8B;EAC9B;;;;GAIC;AACH;AACA;;EAEE,kBAAkB;EAClB,6CAA6C;EAC7C,oDAAoD;EACpD,qCAAqC;EACrC,2DAA2D;EAC3D,WAAW;EACX,eAAe;EACf,aAAa;EACb,mBAAmB;EACnB,uBAAuB;EACvB,gEAAgE;AAClE;AACA;;EAEE,aAAa;EACb,YAAY;EACZ,oBAAoB;AACtB;AACA;;EAEE,UAAU;EACV,YAAY;EACZ,oBAAoB;AACtB;AACA;;EAEE,wBAAwB;AAC1B;AACA;;EAEE,WAAW;EACX,YAAY;EACZ,mBAAmB;EACnB,wBAAwB;AAC1B;AACA;;EAEE,yBAAyB;AAC3B;AACA;;EAEE,iDAAiD;EACjD,WAAW;AACb;AACA;;EAEE,kDAAkD;EAClD,UAAU;AACZ;AACA;EACE,aAAa;AACf;AACA,0BAA0B;AAC1B;;EAEE,yBAAyB;EACzB,wCAAwC;EACxC,+BAA+B;EAC/B,iBAAiB;EACjB,qBAAqB;EACrB,cAAc;AAChB;AACA;;EAEE,eAAe;AACjB;AACA;;EAEE,kDAAkD;EAClD,UAAU;AACZ;AACA;;EAEE,eAAe;AACjB;AACA,wBAAwB",sourcesContent:[":root {\n  --swiper-navigation-size: 44px;\n  /*\n  --swiper-navigation-top-offset: 50%;\n  --swiper-navigation-sides-offset: 10px;\n  --swiper-navigation-color: var(--swiper-theme-color);\n  */\n}\n.swiper-button-prev,\n.swiper-button-next {\n  position: absolute;\n  top: var(--swiper-navigation-top-offset, 50%);\n  width: calc(var(--swiper-navigation-size) / 44 * 27);\n  height: var(--swiper-navigation-size);\n  margin-top: calc(0px - (var(--swiper-navigation-size) / 2));\n  z-index: 10;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: var(--swiper-navigation-color, var(--swiper-theme-color));\n}\n.swiper-button-prev.swiper-button-disabled,\n.swiper-button-next.swiper-button-disabled {\n  opacity: 0.35;\n  cursor: auto;\n  pointer-events: none;\n}\n.swiper-button-prev.swiper-button-hidden,\n.swiper-button-next.swiper-button-hidden {\n  opacity: 0;\n  cursor: auto;\n  pointer-events: none;\n}\n.swiper-navigation-disabled .swiper-button-prev,\n.swiper-navigation-disabled .swiper-button-next {\n  display: none !important;\n}\n.swiper-button-prev svg,\n.swiper-button-next svg {\n  width: 100%;\n  height: 100%;\n  object-fit: contain;\n  transform-origin: center;\n}\n.swiper-rtl .swiper-button-prev svg,\n.swiper-rtl .swiper-button-next svg {\n  transform: rotate(180deg);\n}\n.swiper-button-prev,\n.swiper-rtl .swiper-button-next {\n  left: var(--swiper-navigation-sides-offset, 10px);\n  right: auto;\n}\n.swiper-button-next,\n.swiper-rtl .swiper-button-prev {\n  right: var(--swiper-navigation-sides-offset, 10px);\n  left: auto;\n}\n.swiper-button-lock {\n  display: none;\n}\n/* Navigation font start */\n.swiper-button-prev:after,\n.swiper-button-next:after {\n  font-family: swiper-icons;\n  font-size: var(--swiper-navigation-size);\n  text-transform: none !important;\n  letter-spacing: 0;\n  font-variant: initial;\n  line-height: 1;\n}\n.swiper-button-prev:after,\n.swiper-rtl .swiper-button-next:after {\n  content: 'prev';\n}\n.swiper-button-next,\n.swiper-rtl .swiper-button-prev {\n  right: var(--swiper-navigation-sides-offset, 10px);\n  left: auto;\n}\n.swiper-button-next:after,\n.swiper-rtl .swiper-button-prev:after {\n  content: 'next';\n}\n/* Navigation font end */\n"],sourceRoot:""}]);const o=s},792:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});var r=t(537),i=t.n(r),a=t(645),s=t.n(a)()(i());s.push([e.id,":root {\n  /*\n  --swiper-pagination-color: var(--swiper-theme-color);\n  --swiper-pagination-left: auto;\n  --swiper-pagination-right: 8px;\n  --swiper-pagination-bottom: 8px;\n  --swiper-pagination-top: auto;\n  --swiper-pagination-fraction-color: inherit;\n  --swiper-pagination-progressbar-bg-color: rgba(0,0,0,0.25);\n  --swiper-pagination-progressbar-size: 4px;\n  --swiper-pagination-bullet-size: 8px;\n  --swiper-pagination-bullet-width: 8px;\n  --swiper-pagination-bullet-height: 8px;\n  --swiper-pagination-bullet-border-radius: 50%;\n  --swiper-pagination-bullet-inactive-color: #000;\n  --swiper-pagination-bullet-inactive-opacity: 0.2;\n  --swiper-pagination-bullet-opacity: 1;\n  --swiper-pagination-bullet-horizontal-gap: 4px;\n  --swiper-pagination-bullet-vertical-gap: 6px;\n  */\n}\n.swiper-pagination {\n  position: absolute;\n  text-align: center;\n  transition: 300ms opacity;\n  transform: translate3d(0, 0, 0);\n  z-index: 10;\n}\n.swiper-pagination.swiper-pagination-hidden {\n  opacity: 0;\n}\n.swiper-pagination-disabled > .swiper-pagination,\n.swiper-pagination.swiper-pagination-disabled {\n  display: none !important;\n}\n/* Common Styles */\n.swiper-pagination-fraction,\n.swiper-pagination-custom,\n.swiper-horizontal > .swiper-pagination-bullets,\n.swiper-pagination-bullets.swiper-pagination-horizontal {\n  bottom: var(--swiper-pagination-bottom, 8px);\n  top: var(--swiper-pagination-top, auto);\n  left: 0;\n  width: 100%;\n}\n/* Bullets */\n.swiper-pagination-bullets-dynamic {\n  overflow: hidden;\n  font-size: 0;\n}\n.swiper-pagination-bullets-dynamic .swiper-pagination-bullet {\n  transform: scale(0.33);\n  position: relative;\n}\n.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active {\n  transform: scale(1);\n}\n.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active-main {\n  transform: scale(1);\n}\n.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active-prev {\n  transform: scale(0.66);\n}\n.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active-prev-prev {\n  transform: scale(0.33);\n}\n.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active-next {\n  transform: scale(0.66);\n}\n.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active-next-next {\n  transform: scale(0.33);\n}\n.swiper-pagination-bullet {\n  width: var(--swiper-pagination-bullet-width, var(--swiper-pagination-bullet-size, 8px));\n  height: var(--swiper-pagination-bullet-height, var(--swiper-pagination-bullet-size, 8px));\n  display: inline-block;\n  border-radius: var(--swiper-pagination-bullet-border-radius, 50%);\n  background: var(--swiper-pagination-bullet-inactive-color, #000);\n  opacity: var(--swiper-pagination-bullet-inactive-opacity, 0.2);\n}\nbutton.swiper-pagination-bullet {\n  border: none;\n  margin: 0;\n  padding: 0;\n  box-shadow: none;\n  -webkit-appearance: none;\n          appearance: none;\n}\n.swiper-pagination-clickable .swiper-pagination-bullet {\n  cursor: pointer;\n}\n.swiper-pagination-bullet:only-child {\n  display: none !important;\n}\n.swiper-pagination-bullet-active {\n  opacity: var(--swiper-pagination-bullet-opacity, 1);\n  background: var(--swiper-pagination-color, var(--swiper-theme-color));\n}\n.swiper-vertical > .swiper-pagination-bullets,\n.swiper-pagination-vertical.swiper-pagination-bullets {\n  right: var(--swiper-pagination-right, 8px);\n  left: var(--swiper-pagination-left, auto);\n  top: 50%;\n  transform: translate3d(0px, -50%, 0);\n}\n.swiper-vertical > .swiper-pagination-bullets .swiper-pagination-bullet,\n.swiper-pagination-vertical.swiper-pagination-bullets .swiper-pagination-bullet {\n  margin: var(--swiper-pagination-bullet-vertical-gap, 6px) 0;\n  display: block;\n}\n.swiper-vertical > .swiper-pagination-bullets.swiper-pagination-bullets-dynamic,\n.swiper-pagination-vertical.swiper-pagination-bullets.swiper-pagination-bullets-dynamic {\n  top: 50%;\n  transform: translateY(-50%);\n  width: 8px;\n}\n.swiper-vertical > .swiper-pagination-bullets.swiper-pagination-bullets-dynamic .swiper-pagination-bullet,\n.swiper-pagination-vertical.swiper-pagination-bullets.swiper-pagination-bullets-dynamic .swiper-pagination-bullet {\n  display: inline-block;\n  transition: 200ms transform,\n        200ms top;\n}\n.swiper-horizontal > .swiper-pagination-bullets .swiper-pagination-bullet,\n.swiper-pagination-horizontal.swiper-pagination-bullets .swiper-pagination-bullet {\n  margin: 0 var(--swiper-pagination-bullet-horizontal-gap, 4px);\n}\n.swiper-horizontal > .swiper-pagination-bullets.swiper-pagination-bullets-dynamic,\n.swiper-pagination-horizontal.swiper-pagination-bullets.swiper-pagination-bullets-dynamic {\n  left: 50%;\n  transform: translateX(-50%);\n  white-space: nowrap;\n}\n.swiper-horizontal > .swiper-pagination-bullets.swiper-pagination-bullets-dynamic .swiper-pagination-bullet,\n.swiper-pagination-horizontal.swiper-pagination-bullets.swiper-pagination-bullets-dynamic .swiper-pagination-bullet {\n  transition: 200ms transform,\n        200ms left;\n}\n.swiper-horizontal.swiper-rtl > .swiper-pagination-bullets-dynamic .swiper-pagination-bullet {\n  transition: 200ms transform,\n    200ms right;\n}\n/* Fraction */\n.swiper-pagination-fraction {\n  color: var(--swiper-pagination-fraction-color, inherit);\n}\n/* Progress */\n.swiper-pagination-progressbar {\n  background: var(--swiper-pagination-progressbar-bg-color, rgba(0, 0, 0, 0.25));\n  position: absolute;\n}\n.swiper-pagination-progressbar .swiper-pagination-progressbar-fill {\n  background: var(--swiper-pagination-color, var(--swiper-theme-color));\n  position: absolute;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  transform: scale(0);\n  transform-origin: left top;\n}\n.swiper-rtl .swiper-pagination-progressbar .swiper-pagination-progressbar-fill {\n  transform-origin: right top;\n}\n.swiper-horizontal > .swiper-pagination-progressbar,\n.swiper-pagination-progressbar.swiper-pagination-horizontal,\n.swiper-vertical > .swiper-pagination-progressbar.swiper-pagination-progressbar-opposite,\n.swiper-pagination-progressbar.swiper-pagination-vertical.swiper-pagination-progressbar-opposite {\n  width: 100%;\n  height: var(--swiper-pagination-progressbar-size, 4px);\n  left: 0;\n  top: 0;\n}\n.swiper-vertical > .swiper-pagination-progressbar,\n.swiper-pagination-progressbar.swiper-pagination-vertical,\n.swiper-horizontal > .swiper-pagination-progressbar.swiper-pagination-progressbar-opposite,\n.swiper-pagination-progressbar.swiper-pagination-horizontal.swiper-pagination-progressbar-opposite {\n  width: var(--swiper-pagination-progressbar-size, 4px);\n  height: 100%;\n  left: 0;\n  top: 0;\n}\n.swiper-pagination-lock {\n  display: none;\n}\n","",{version:3,sources:["webpack://./node_modules/swiper/modules/pagination.css"],names:[],mappings:"AAAA;EACE;;;;;;;;;;;;;;;;;;GAkBC;AACH;AACA;EACE,kBAAkB;EAClB,kBAAkB;EAClB,yBAAyB;EACzB,+BAA+B;EAC/B,WAAW;AACb;AACA;EACE,UAAU;AACZ;AACA;;EAEE,wBAAwB;AAC1B;AACA,kBAAkB;AAClB;;;;EAIE,4CAA4C;EAC5C,uCAAuC;EACvC,OAAO;EACP,WAAW;AACb;AACA,YAAY;AACZ;EACE,gBAAgB;EAChB,YAAY;AACd;AACA;EACE,sBAAsB;EACtB,kBAAkB;AACpB;AACA;EACE,mBAAmB;AACrB;AACA;EACE,mBAAmB;AACrB;AACA;EACE,sBAAsB;AACxB;AACA;EACE,sBAAsB;AACxB;AACA;EACE,sBAAsB;AACxB;AACA;EACE,sBAAsB;AACxB;AACA;EACE,uFAAuF;EACvF,yFAAyF;EACzF,qBAAqB;EACrB,iEAAiE;EACjE,gEAAgE;EAChE,8DAA8D;AAChE;AACA;EACE,YAAY;EACZ,SAAS;EACT,UAAU;EACV,gBAAgB;EAChB,wBAAwB;UAChB,gBAAgB;AAC1B;AACA;EACE,eAAe;AACjB;AACA;EACE,wBAAwB;AAC1B;AACA;EACE,mDAAmD;EACnD,qEAAqE;AACvE;AACA;;EAEE,0CAA0C;EAC1C,yCAAyC;EACzC,QAAQ;EACR,oCAAoC;AACtC;AACA;;EAEE,2DAA2D;EAC3D,cAAc;AAChB;AACA;;EAEE,QAAQ;EACR,2BAA2B;EAC3B,UAAU;AACZ;AACA;;EAEE,qBAAqB;EACrB;iBACe;AACjB;AACA;;EAEE,6DAA6D;AAC/D;AACA;;EAEE,SAAS;EACT,2BAA2B;EAC3B,mBAAmB;AACrB;AACA;;EAEE;kBACgB;AAClB;AACA;EACE;eACa;AACf;AACA,aAAa;AACb;EACE,uDAAuD;AACzD;AACA,aAAa;AACb;EACE,8EAA8E;EAC9E,kBAAkB;AACpB;AACA;EACE,qEAAqE;EACrE,kBAAkB;EAClB,OAAO;EACP,MAAM;EACN,WAAW;EACX,YAAY;EACZ,mBAAmB;EACnB,0BAA0B;AAC5B;AACA;EACE,2BAA2B;AAC7B;AACA;;;;EAIE,WAAW;EACX,sDAAsD;EACtD,OAAO;EACP,MAAM;AACR;AACA;;;;EAIE,qDAAqD;EACrD,YAAY;EACZ,OAAO;EACP,MAAM;AACR;AACA;EACE,aAAa;AACf",sourcesContent:[":root {\n  /*\n  --swiper-pagination-color: var(--swiper-theme-color);\n  --swiper-pagination-left: auto;\n  --swiper-pagination-right: 8px;\n  --swiper-pagination-bottom: 8px;\n  --swiper-pagination-top: auto;\n  --swiper-pagination-fraction-color: inherit;\n  --swiper-pagination-progressbar-bg-color: rgba(0,0,0,0.25);\n  --swiper-pagination-progressbar-size: 4px;\n  --swiper-pagination-bullet-size: 8px;\n  --swiper-pagination-bullet-width: 8px;\n  --swiper-pagination-bullet-height: 8px;\n  --swiper-pagination-bullet-border-radius: 50%;\n  --swiper-pagination-bullet-inactive-color: #000;\n  --swiper-pagination-bullet-inactive-opacity: 0.2;\n  --swiper-pagination-bullet-opacity: 1;\n  --swiper-pagination-bullet-horizontal-gap: 4px;\n  --swiper-pagination-bullet-vertical-gap: 6px;\n  */\n}\n.swiper-pagination {\n  position: absolute;\n  text-align: center;\n  transition: 300ms opacity;\n  transform: translate3d(0, 0, 0);\n  z-index: 10;\n}\n.swiper-pagination.swiper-pagination-hidden {\n  opacity: 0;\n}\n.swiper-pagination-disabled > .swiper-pagination,\n.swiper-pagination.swiper-pagination-disabled {\n  display: none !important;\n}\n/* Common Styles */\n.swiper-pagination-fraction,\n.swiper-pagination-custom,\n.swiper-horizontal > .swiper-pagination-bullets,\n.swiper-pagination-bullets.swiper-pagination-horizontal {\n  bottom: var(--swiper-pagination-bottom, 8px);\n  top: var(--swiper-pagination-top, auto);\n  left: 0;\n  width: 100%;\n}\n/* Bullets */\n.swiper-pagination-bullets-dynamic {\n  overflow: hidden;\n  font-size: 0;\n}\n.swiper-pagination-bullets-dynamic .swiper-pagination-bullet {\n  transform: scale(0.33);\n  position: relative;\n}\n.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active {\n  transform: scale(1);\n}\n.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active-main {\n  transform: scale(1);\n}\n.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active-prev {\n  transform: scale(0.66);\n}\n.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active-prev-prev {\n  transform: scale(0.33);\n}\n.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active-next {\n  transform: scale(0.66);\n}\n.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active-next-next {\n  transform: scale(0.33);\n}\n.swiper-pagination-bullet {\n  width: var(--swiper-pagination-bullet-width, var(--swiper-pagination-bullet-size, 8px));\n  height: var(--swiper-pagination-bullet-height, var(--swiper-pagination-bullet-size, 8px));\n  display: inline-block;\n  border-radius: var(--swiper-pagination-bullet-border-radius, 50%);\n  background: var(--swiper-pagination-bullet-inactive-color, #000);\n  opacity: var(--swiper-pagination-bullet-inactive-opacity, 0.2);\n}\nbutton.swiper-pagination-bullet {\n  border: none;\n  margin: 0;\n  padding: 0;\n  box-shadow: none;\n  -webkit-appearance: none;\n          appearance: none;\n}\n.swiper-pagination-clickable .swiper-pagination-bullet {\n  cursor: pointer;\n}\n.swiper-pagination-bullet:only-child {\n  display: none !important;\n}\n.swiper-pagination-bullet-active {\n  opacity: var(--swiper-pagination-bullet-opacity, 1);\n  background: var(--swiper-pagination-color, var(--swiper-theme-color));\n}\n.swiper-vertical > .swiper-pagination-bullets,\n.swiper-pagination-vertical.swiper-pagination-bullets {\n  right: var(--swiper-pagination-right, 8px);\n  left: var(--swiper-pagination-left, auto);\n  top: 50%;\n  transform: translate3d(0px, -50%, 0);\n}\n.swiper-vertical > .swiper-pagination-bullets .swiper-pagination-bullet,\n.swiper-pagination-vertical.swiper-pagination-bullets .swiper-pagination-bullet {\n  margin: var(--swiper-pagination-bullet-vertical-gap, 6px) 0;\n  display: block;\n}\n.swiper-vertical > .swiper-pagination-bullets.swiper-pagination-bullets-dynamic,\n.swiper-pagination-vertical.swiper-pagination-bullets.swiper-pagination-bullets-dynamic {\n  top: 50%;\n  transform: translateY(-50%);\n  width: 8px;\n}\n.swiper-vertical > .swiper-pagination-bullets.swiper-pagination-bullets-dynamic .swiper-pagination-bullet,\n.swiper-pagination-vertical.swiper-pagination-bullets.swiper-pagination-bullets-dynamic .swiper-pagination-bullet {\n  display: inline-block;\n  transition: 200ms transform,\n        200ms top;\n}\n.swiper-horizontal > .swiper-pagination-bullets .swiper-pagination-bullet,\n.swiper-pagination-horizontal.swiper-pagination-bullets .swiper-pagination-bullet {\n  margin: 0 var(--swiper-pagination-bullet-horizontal-gap, 4px);\n}\n.swiper-horizontal > .swiper-pagination-bullets.swiper-pagination-bullets-dynamic,\n.swiper-pagination-horizontal.swiper-pagination-bullets.swiper-pagination-bullets-dynamic {\n  left: 50%;\n  transform: translateX(-50%);\n  white-space: nowrap;\n}\n.swiper-horizontal > .swiper-pagination-bullets.swiper-pagination-bullets-dynamic .swiper-pagination-bullet,\n.swiper-pagination-horizontal.swiper-pagination-bullets.swiper-pagination-bullets-dynamic .swiper-pagination-bullet {\n  transition: 200ms transform,\n        200ms left;\n}\n.swiper-horizontal.swiper-rtl > .swiper-pagination-bullets-dynamic .swiper-pagination-bullet {\n  transition: 200ms transform,\n    200ms right;\n}\n/* Fraction */\n.swiper-pagination-fraction {\n  color: var(--swiper-pagination-fraction-color, inherit);\n}\n/* Progress */\n.swiper-pagination-progressbar {\n  background: var(--swiper-pagination-progressbar-bg-color, rgba(0, 0, 0, 0.25));\n  position: absolute;\n}\n.swiper-pagination-progressbar .swiper-pagination-progressbar-fill {\n  background: var(--swiper-pagination-color, var(--swiper-theme-color));\n  position: absolute;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  transform: scale(0);\n  transform-origin: left top;\n}\n.swiper-rtl .swiper-pagination-progressbar .swiper-pagination-progressbar-fill {\n  transform-origin: right top;\n}\n.swiper-horizontal > .swiper-pagination-progressbar,\n.swiper-pagination-progressbar.swiper-pagination-horizontal,\n.swiper-vertical > .swiper-pagination-progressbar.swiper-pagination-progressbar-opposite,\n.swiper-pagination-progressbar.swiper-pagination-vertical.swiper-pagination-progressbar-opposite {\n  width: 100%;\n  height: var(--swiper-pagination-progressbar-size, 4px);\n  left: 0;\n  top: 0;\n}\n.swiper-vertical > .swiper-pagination-progressbar,\n.swiper-pagination-progressbar.swiper-pagination-vertical,\n.swiper-horizontal > .swiper-pagination-progressbar.swiper-pagination-progressbar-opposite,\n.swiper-pagination-progressbar.swiper-pagination-horizontal.swiper-pagination-progressbar-opposite {\n  width: var(--swiper-pagination-progressbar-size, 4px);\n  height: 100%;\n  left: 0;\n  top: 0;\n}\n.swiper-pagination-lock {\n  display: none;\n}\n"],sourceRoot:""}]);const o=s},709:(e,n,t)=>{"use strict";t.d(n,{Z:()=>p});var r=t(537),i=t.n(r),a=t(645),s=t.n(a),o=t(667),l=t.n(o),d=new URL(t(954),t.b),c=s()(i()),u=l()(d);c.push([e.id,`/**\n * Swiper 11.2.1\n * Most modern mobile touch slider and framework with hardware accelerated transitions\n * https://swiperjs.com\n *\n * Copyright 2014-2025 Vladimir Kharlampidi\n *\n * Released under the MIT License\n *\n * Released on: January 10, 2025\n */\n\n/* FONT_START */\n@font-face {\n  font-family: 'swiper-icons';\n  src: url(${u});\n  font-weight: 400;\n  font-style: normal;\n}\n/* FONT_END */\n:root {\n  --swiper-theme-color: #007aff;\n  /*\n  --swiper-preloader-color: var(--swiper-theme-color);\n  --swiper-wrapper-transition-timing-function: initial;\n  */\n}\n:host {\n  position: relative;\n  display: block;\n  margin-left: auto;\n  margin-right: auto;\n  z-index: 1;\n}\n.swiper {\n  margin-left: auto;\n  margin-right: auto;\n  position: relative;\n  overflow: hidden;\n  list-style: none;\n  padding: 0;\n  /* Fix of Webkit flickering */\n  z-index: 1;\n  display: block;\n}\n.swiper-vertical > .swiper-wrapper {\n  flex-direction: column;\n}\n.swiper-wrapper {\n  position: relative;\n  width: 100%;\n  height: 100%;\n  z-index: 1;\n  display: flex;\n  transition-property: transform;\n  transition-timing-function: var(--swiper-wrapper-transition-timing-function, initial);\n  box-sizing: content-box;\n}\n.swiper-android .swiper-slide,\n.swiper-ios .swiper-slide,\n.swiper-wrapper {\n  transform: translate3d(0px, 0, 0);\n}\n.swiper-horizontal {\n  touch-action: pan-y;\n}\n.swiper-vertical {\n  touch-action: pan-x;\n}\n.swiper-slide {\n  flex-shrink: 0;\n  width: 100%;\n  height: 100%;\n  position: relative;\n  transition-property: transform;\n  display: block;\n}\n.swiper-slide-invisible-blank {\n  visibility: hidden;\n}\n/* Auto Height */\n.swiper-autoheight,\n.swiper-autoheight .swiper-slide {\n  height: auto;\n}\n.swiper-autoheight .swiper-wrapper {\n  align-items: flex-start;\n  transition-property: transform, height;\n}\n.swiper-backface-hidden .swiper-slide {\n  transform: translateZ(0);\n  -webkit-backface-visibility: hidden;\n          backface-visibility: hidden;\n}\n/* 3D Effects */\n.swiper-3d.swiper-css-mode .swiper-wrapper {\n  perspective: 1200px;\n}\n.swiper-3d .swiper-wrapper {\n  transform-style: preserve-3d;\n}\n.swiper-3d {\n  perspective: 1200px;\n}\n.swiper-3d .swiper-slide,\n.swiper-3d .swiper-cube-shadow {\n  transform-style: preserve-3d;\n}\n/* CSS Mode */\n.swiper-css-mode > .swiper-wrapper {\n  overflow: auto;\n  scrollbar-width: none;\n  /* For Firefox */\n  -ms-overflow-style: none;\n  /* For Internet Explorer and Edge */\n}\n.swiper-css-mode > .swiper-wrapper::-webkit-scrollbar {\n  display: none;\n}\n.swiper-css-mode > .swiper-wrapper > .swiper-slide {\n  scroll-snap-align: start start;\n}\n.swiper-css-mode.swiper-horizontal > .swiper-wrapper {\n  scroll-snap-type: x mandatory;\n}\n.swiper-css-mode.swiper-vertical > .swiper-wrapper {\n  scroll-snap-type: y mandatory;\n}\n.swiper-css-mode.swiper-free-mode > .swiper-wrapper {\n  scroll-snap-type: none;\n}\n.swiper-css-mode.swiper-free-mode > .swiper-wrapper > .swiper-slide {\n  scroll-snap-align: none;\n}\n.swiper-css-mode.swiper-centered > .swiper-wrapper::before {\n  content: '';\n  flex-shrink: 0;\n  order: 9999;\n}\n.swiper-css-mode.swiper-centered > .swiper-wrapper > .swiper-slide {\n  scroll-snap-align: center center;\n  scroll-snap-stop: always;\n}\n.swiper-css-mode.swiper-centered.swiper-horizontal > .swiper-wrapper > .swiper-slide:first-child {\n  margin-inline-start: var(--swiper-centered-offset-before);\n}\n.swiper-css-mode.swiper-centered.swiper-horizontal > .swiper-wrapper::before {\n  height: 100%;\n  min-height: 1px;\n  width: var(--swiper-centered-offset-after);\n}\n.swiper-css-mode.swiper-centered.swiper-vertical > .swiper-wrapper > .swiper-slide:first-child {\n  margin-block-start: var(--swiper-centered-offset-before);\n}\n.swiper-css-mode.swiper-centered.swiper-vertical > .swiper-wrapper::before {\n  width: 100%;\n  min-width: 1px;\n  height: var(--swiper-centered-offset-after);\n}\n/* Slide styles start */\n/* 3D Shadows */\n.swiper-3d .swiper-slide-shadow,\n.swiper-3d .swiper-slide-shadow-left,\n.swiper-3d .swiper-slide-shadow-right,\n.swiper-3d .swiper-slide-shadow-top,\n.swiper-3d .swiper-slide-shadow-bottom,\n.swiper-3d .swiper-slide-shadow,\n.swiper-3d .swiper-slide-shadow-left,\n.swiper-3d .swiper-slide-shadow-right,\n.swiper-3d .swiper-slide-shadow-top,\n.swiper-3d .swiper-slide-shadow-bottom {\n  position: absolute;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  pointer-events: none;\n  z-index: 10;\n}\n.swiper-3d .swiper-slide-shadow {\n  background: rgba(0, 0, 0, 0.15);\n}\n.swiper-3d .swiper-slide-shadow-left {\n  background-image: linear-gradient(to left, rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0));\n}\n.swiper-3d .swiper-slide-shadow-right {\n  background-image: linear-gradient(to right, rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0));\n}\n.swiper-3d .swiper-slide-shadow-top {\n  background-image: linear-gradient(to top, rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0));\n}\n.swiper-3d .swiper-slide-shadow-bottom {\n  background-image: linear-gradient(to bottom, rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0));\n}\n.swiper-lazy-preloader {\n  width: 42px;\n  height: 42px;\n  position: absolute;\n  left: 50%;\n  top: 50%;\n  margin-left: -21px;\n  margin-top: -21px;\n  z-index: 10;\n  transform-origin: 50%;\n  box-sizing: border-box;\n  border: 4px solid var(--swiper-preloader-color, var(--swiper-theme-color));\n  border-radius: 50%;\n  border-top-color: transparent;\n}\n.swiper:not(.swiper-watch-progress) .swiper-lazy-preloader,\n.swiper-watch-progress .swiper-slide-visible .swiper-lazy-preloader {\n  animation: swiper-preloader-spin 1s infinite linear;\n}\n.swiper-lazy-preloader-white {\n  --swiper-preloader-color: #fff;\n}\n.swiper-lazy-preloader-black {\n  --swiper-preloader-color: #000;\n}\n@keyframes swiper-preloader-spin {\n  0% {\n    transform: rotate(0deg);\n  }\n  100% {\n    transform: rotate(360deg);\n  }\n}\n/* Slide styles end */\n`,"",{version:3,sources:["webpack://./node_modules/swiper/swiper.css"],names:[],mappings:"AAAA;;;;;;;;;;EAUE;;AAEF,eAAe;AACf;EACE,2BAA2B;EAC3B,4CAA6rE;EAC7rE,gBAAgB;EAChB,kBAAkB;AACpB;AACA,aAAa;AACb;EACE,6BAA6B;EAC7B;;;GAGC;AACH;AACA;EACE,kBAAkB;EAClB,cAAc;EACd,iBAAiB;EACjB,kBAAkB;EAClB,UAAU;AACZ;AACA;EACE,iBAAiB;EACjB,kBAAkB;EAClB,kBAAkB;EAClB,gBAAgB;EAChB,gBAAgB;EAChB,UAAU;EACV,6BAA6B;EAC7B,UAAU;EACV,cAAc;AAChB;AACA;EACE,sBAAsB;AACxB;AACA;EACE,kBAAkB;EAClB,WAAW;EACX,YAAY;EACZ,UAAU;EACV,aAAa;EACb,8BAA8B;EAC9B,qFAAqF;EACrF,uBAAuB;AACzB;AACA;;;EAGE,iCAAiC;AACnC;AACA;EACE,mBAAmB;AACrB;AACA;EACE,mBAAmB;AACrB;AACA;EACE,cAAc;EACd,WAAW;EACX,YAAY;EACZ,kBAAkB;EAClB,8BAA8B;EAC9B,cAAc;AAChB;AACA;EACE,kBAAkB;AACpB;AACA,gBAAgB;AAChB;;EAEE,YAAY;AACd;AACA;EACE,uBAAuB;EACvB,sCAAsC;AACxC;AACA;EACE,wBAAwB;EACxB,mCAAmC;UAC3B,2BAA2B;AACrC;AACA,eAAe;AACf;EACE,mBAAmB;AACrB;AACA;EACE,4BAA4B;AAC9B;AACA;EACE,mBAAmB;AACrB;AACA;;EAEE,4BAA4B;AAC9B;AACA,aAAa;AACb;EACE,cAAc;EACd,qBAAqB;EACrB,gBAAgB;EAChB,wBAAwB;EACxB,mCAAmC;AACrC;AACA;EACE,aAAa;AACf;AACA;EACE,8BAA8B;AAChC;AACA;EACE,6BAA6B;AAC/B;AACA;EACE,6BAA6B;AAC/B;AACA;EACE,sBAAsB;AACxB;AACA;EACE,uBAAuB;AACzB;AACA;EACE,WAAW;EACX,cAAc;EACd,WAAW;AACb;AACA;EACE,gCAAgC;EAChC,wBAAwB;AAC1B;AACA;EACE,yDAAyD;AAC3D;AACA;EACE,YAAY;EACZ,eAAe;EACf,0CAA0C;AAC5C;AACA;EACE,wDAAwD;AAC1D;AACA;EACE,WAAW;EACX,cAAc;EACd,2CAA2C;AAC7C;AACA,uBAAuB;AACvB,eAAe;AACf;;;;;;;;;;EAUE,kBAAkB;EAClB,OAAO;EACP,MAAM;EACN,WAAW;EACX,YAAY;EACZ,oBAAoB;EACpB,WAAW;AACb;AACA;EACE,+BAA+B;AACjC;AACA;EACE,gFAAgF;AAClF;AACA;EACE,iFAAiF;AACnF;AACA;EACE,+EAA+E;AACjF;AACA;EACE,kFAAkF;AACpF;AACA;EACE,WAAW;EACX,YAAY;EACZ,kBAAkB;EAClB,SAAS;EACT,QAAQ;EACR,kBAAkB;EAClB,iBAAiB;EACjB,WAAW;EACX,qBAAqB;EACrB,sBAAsB;EACtB,0EAA0E;EAC1E,kBAAkB;EAClB,6BAA6B;AAC/B;AACA;;EAEE,mDAAmD;AACrD;AACA;EACE,8BAA8B;AAChC;AACA;EACE,8BAA8B;AAChC;AACA;EACE;IACE,uBAAuB;EACzB;EACA;IACE,yBAAyB;EAC3B;AACF;AACA,qBAAqB",sourcesContent:["/**\n * Swiper 11.2.1\n * Most modern mobile touch slider and framework with hardware accelerated transitions\n * https://swiperjs.com\n *\n * Copyright 2014-2025 Vladimir Kharlampidi\n *\n * Released under the MIT License\n *\n * Released on: January 10, 2025\n */\n\n/* FONT_START */\n@font-face {\n  font-family: 'swiper-icons';\n  src: url('data:application/font-woff;charset=utf-8;base64, d09GRgABAAAAAAZgABAAAAAADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGRlRNAAAGRAAAABoAAAAci6qHkUdERUYAAAWgAAAAIwAAACQAYABXR1BPUwAABhQAAAAuAAAANuAY7+xHU1VCAAAFxAAAAFAAAABm2fPczU9TLzIAAAHcAAAASgAAAGBP9V5RY21hcAAAAkQAAACIAAABYt6F0cBjdnQgAAACzAAAAAQAAAAEABEBRGdhc3AAAAWYAAAACAAAAAj//wADZ2x5ZgAAAywAAADMAAAD2MHtryVoZWFkAAABbAAAADAAAAA2E2+eoWhoZWEAAAGcAAAAHwAAACQC9gDzaG10eAAAAigAAAAZAAAArgJkABFsb2NhAAAC0AAAAFoAAABaFQAUGG1heHAAAAG8AAAAHwAAACAAcABAbmFtZQAAA/gAAAE5AAACXvFdBwlwb3N0AAAFNAAAAGIAAACE5s74hXjaY2BkYGAAYpf5Hu/j+W2+MnAzMYDAzaX6QjD6/4//Bxj5GA8AuRwMYGkAPywL13jaY2BkYGA88P8Agx4j+/8fQDYfA1AEBWgDAIB2BOoAeNpjYGRgYNBh4GdgYgABEMnIABJzYNADCQAACWgAsQB42mNgYfzCOIGBlYGB0YcxjYGBwR1Kf2WQZGhhYGBiYGVmgAFGBiQQkOaawtDAoMBQxXjg/wEGPcYDDA4wNUA2CCgwsAAAO4EL6gAAeNpj2M0gyAACqxgGNWBkZ2D4/wMA+xkDdgAAAHjaY2BgYGaAYBkGRgYQiAHyGMF8FgYHIM3DwMHABGQrMOgyWDLEM1T9/w8UBfEMgLzE////P/5//f/V/xv+r4eaAAeMbAxwIUYmIMHEgKYAYjUcsDAwsLKxc3BycfPw8jEQA/gZBASFhEVExcQlJKWkZWTl5BUUlZRVVNXUNTQZBgMAAMR+E+gAEQFEAAAAKgAqACoANAA+AEgAUgBcAGYAcAB6AIQAjgCYAKIArAC2AMAAygDUAN4A6ADyAPwBBgEQARoBJAEuATgBQgFMAVYBYAFqAXQBfgGIAZIBnAGmAbIBzgHsAAB42u2NMQ6CUAyGW568x9AneYYgm4MJbhKFaExIOAVX8ApewSt4Bic4AfeAid3VOBixDxfPYEza5O+Xfi04YADggiUIULCuEJK8VhO4bSvpdnktHI5QCYtdi2sl8ZnXaHlqUrNKzdKcT8cjlq+rwZSvIVczNiezsfnP/uznmfPFBNODM2K7MTQ45YEAZqGP81AmGGcF3iPqOop0r1SPTaTbVkfUe4HXj97wYE+yNwWYxwWu4v1ugWHgo3S1XdZEVqWM7ET0cfnLGxWfkgR42o2PvWrDMBSFj/IHLaF0zKjRgdiVMwScNRAoWUoH78Y2icB/yIY09An6AH2Bdu/UB+yxopYshQiEvnvu0dURgDt8QeC8PDw7Fpji3fEA4z/PEJ6YOB5hKh4dj3EvXhxPqH/SKUY3rJ7srZ4FZnh1PMAtPhwP6fl2PMJMPDgeQ4rY8YT6Gzao0eAEA409DuggmTnFnOcSCiEiLMgxCiTI6Cq5DZUd3Qmp10vO0LaLTd2cjN4fOumlc7lUYbSQcZFkutRG7g6JKZKy0RmdLY680CDnEJ+UMkpFFe1RN7nxdVpXrC4aTtnaurOnYercZg2YVmLN/d/gczfEimrE/fs/bOuq29Zmn8tloORaXgZgGa78yO9/cnXm2BpaGvq25Dv9S4E9+5SIc9PqupJKhYFSSl47+Qcr1mYNAAAAeNptw0cKwkAAAMDZJA8Q7OUJvkLsPfZ6zFVERPy8qHh2YER+3i/BP83vIBLLySsoKimrqKqpa2hp6+jq6RsYGhmbmJqZSy0sraxtbO3sHRydnEMU4uR6yx7JJXveP7WrDycAAAAAAAH//wACeNpjYGRgYOABYhkgZgJCZgZNBkYGLQZtIJsFLMYAAAw3ALgAeNolizEKgDAQBCchRbC2sFER0YD6qVQiBCv/H9ezGI6Z5XBAw8CBK/m5iQQVauVbXLnOrMZv2oLdKFa8Pjuru2hJzGabmOSLzNMzvutpB3N42mNgZGBg4GKQYzBhYMxJLMlj4GBgAYow/P/PAJJhLM6sSoWKfWCAAwDAjgbRAAB42mNgYGBkAIIbCZo5IPrmUn0hGA0AO8EFTQAA');\n  font-weight: 400;\n  font-style: normal;\n}\n/* FONT_END */\n:root {\n  --swiper-theme-color: #007aff;\n  /*\n  --swiper-preloader-color: var(--swiper-theme-color);\n  --swiper-wrapper-transition-timing-function: initial;\n  */\n}\n:host {\n  position: relative;\n  display: block;\n  margin-left: auto;\n  margin-right: auto;\n  z-index: 1;\n}\n.swiper {\n  margin-left: auto;\n  margin-right: auto;\n  position: relative;\n  overflow: hidden;\n  list-style: none;\n  padding: 0;\n  /* Fix of Webkit flickering */\n  z-index: 1;\n  display: block;\n}\n.swiper-vertical > .swiper-wrapper {\n  flex-direction: column;\n}\n.swiper-wrapper {\n  position: relative;\n  width: 100%;\n  height: 100%;\n  z-index: 1;\n  display: flex;\n  transition-property: transform;\n  transition-timing-function: var(--swiper-wrapper-transition-timing-function, initial);\n  box-sizing: content-box;\n}\n.swiper-android .swiper-slide,\n.swiper-ios .swiper-slide,\n.swiper-wrapper {\n  transform: translate3d(0px, 0, 0);\n}\n.swiper-horizontal {\n  touch-action: pan-y;\n}\n.swiper-vertical {\n  touch-action: pan-x;\n}\n.swiper-slide {\n  flex-shrink: 0;\n  width: 100%;\n  height: 100%;\n  position: relative;\n  transition-property: transform;\n  display: block;\n}\n.swiper-slide-invisible-blank {\n  visibility: hidden;\n}\n/* Auto Height */\n.swiper-autoheight,\n.swiper-autoheight .swiper-slide {\n  height: auto;\n}\n.swiper-autoheight .swiper-wrapper {\n  align-items: flex-start;\n  transition-property: transform, height;\n}\n.swiper-backface-hidden .swiper-slide {\n  transform: translateZ(0);\n  -webkit-backface-visibility: hidden;\n          backface-visibility: hidden;\n}\n/* 3D Effects */\n.swiper-3d.swiper-css-mode .swiper-wrapper {\n  perspective: 1200px;\n}\n.swiper-3d .swiper-wrapper {\n  transform-style: preserve-3d;\n}\n.swiper-3d {\n  perspective: 1200px;\n}\n.swiper-3d .swiper-slide,\n.swiper-3d .swiper-cube-shadow {\n  transform-style: preserve-3d;\n}\n/* CSS Mode */\n.swiper-css-mode > .swiper-wrapper {\n  overflow: auto;\n  scrollbar-width: none;\n  /* For Firefox */\n  -ms-overflow-style: none;\n  /* For Internet Explorer and Edge */\n}\n.swiper-css-mode > .swiper-wrapper::-webkit-scrollbar {\n  display: none;\n}\n.swiper-css-mode > .swiper-wrapper > .swiper-slide {\n  scroll-snap-align: start start;\n}\n.swiper-css-mode.swiper-horizontal > .swiper-wrapper {\n  scroll-snap-type: x mandatory;\n}\n.swiper-css-mode.swiper-vertical > .swiper-wrapper {\n  scroll-snap-type: y mandatory;\n}\n.swiper-css-mode.swiper-free-mode > .swiper-wrapper {\n  scroll-snap-type: none;\n}\n.swiper-css-mode.swiper-free-mode > .swiper-wrapper > .swiper-slide {\n  scroll-snap-align: none;\n}\n.swiper-css-mode.swiper-centered > .swiper-wrapper::before {\n  content: '';\n  flex-shrink: 0;\n  order: 9999;\n}\n.swiper-css-mode.swiper-centered > .swiper-wrapper > .swiper-slide {\n  scroll-snap-align: center center;\n  scroll-snap-stop: always;\n}\n.swiper-css-mode.swiper-centered.swiper-horizontal > .swiper-wrapper > .swiper-slide:first-child {\n  margin-inline-start: var(--swiper-centered-offset-before);\n}\n.swiper-css-mode.swiper-centered.swiper-horizontal > .swiper-wrapper::before {\n  height: 100%;\n  min-height: 1px;\n  width: var(--swiper-centered-offset-after);\n}\n.swiper-css-mode.swiper-centered.swiper-vertical > .swiper-wrapper > .swiper-slide:first-child {\n  margin-block-start: var(--swiper-centered-offset-before);\n}\n.swiper-css-mode.swiper-centered.swiper-vertical > .swiper-wrapper::before {\n  width: 100%;\n  min-width: 1px;\n  height: var(--swiper-centered-offset-after);\n}\n/* Slide styles start */\n/* 3D Shadows */\n.swiper-3d .swiper-slide-shadow,\n.swiper-3d .swiper-slide-shadow-left,\n.swiper-3d .swiper-slide-shadow-right,\n.swiper-3d .swiper-slide-shadow-top,\n.swiper-3d .swiper-slide-shadow-bottom,\n.swiper-3d .swiper-slide-shadow,\n.swiper-3d .swiper-slide-shadow-left,\n.swiper-3d .swiper-slide-shadow-right,\n.swiper-3d .swiper-slide-shadow-top,\n.swiper-3d .swiper-slide-shadow-bottom {\n  position: absolute;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  pointer-events: none;\n  z-index: 10;\n}\n.swiper-3d .swiper-slide-shadow {\n  background: rgba(0, 0, 0, 0.15);\n}\n.swiper-3d .swiper-slide-shadow-left {\n  background-image: linear-gradient(to left, rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0));\n}\n.swiper-3d .swiper-slide-shadow-right {\n  background-image: linear-gradient(to right, rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0));\n}\n.swiper-3d .swiper-slide-shadow-top {\n  background-image: linear-gradient(to top, rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0));\n}\n.swiper-3d .swiper-slide-shadow-bottom {\n  background-image: linear-gradient(to bottom, rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0));\n}\n.swiper-lazy-preloader {\n  width: 42px;\n  height: 42px;\n  position: absolute;\n  left: 50%;\n  top: 50%;\n  margin-left: -21px;\n  margin-top: -21px;\n  z-index: 10;\n  transform-origin: 50%;\n  box-sizing: border-box;\n  border: 4px solid var(--swiper-preloader-color, var(--swiper-theme-color));\n  border-radius: 50%;\n  border-top-color: transparent;\n}\n.swiper:not(.swiper-watch-progress) .swiper-lazy-preloader,\n.swiper-watch-progress .swiper-slide-visible .swiper-lazy-preloader {\n  animation: swiper-preloader-spin 1s infinite linear;\n}\n.swiper-lazy-preloader-white {\n  --swiper-preloader-color: #fff;\n}\n.swiper-lazy-preloader-black {\n  --swiper-preloader-color: #000;\n}\n@keyframes swiper-preloader-spin {\n  0% {\n    transform: rotate(0deg);\n  }\n  100% {\n    transform: rotate(360deg);\n  }\n}\n/* Slide styles end */\n"],sourceRoot:""}]);const p=c},645:e=>{"use strict";e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",r=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),r&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),r&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,r,i,a){"string"==typeof e&&(e=[[null,e,void 0]]);var s={};if(r)for(var o=0;o<this.length;o++){var l=this[o][0];null!=l&&(s[l]=!0)}for(var d=0;d<e.length;d++){var c=[].concat(e[d]);r&&s[c[0]]||(void 0!==a&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=a),t&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=t):c[2]=t),i&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=i):c[4]="".concat(i)),n.push(c))}},n}},667:e=>{"use strict";e.exports=function(e,n){return n||(n={}),e?(e=String(e.__esModule?e.default:e),/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),n.hash&&(e+=n.hash),/["'() \t\n]|(%20)/.test(e)||n.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e):e}},537:e=>{"use strict";e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(i," */");return[n].concat([a]).join("\n")}return[n].join("\n")}},448:(e,n,t)=>{"use strict";var r=t(294),i=t(840);function a(e){for(var n="https://reactjs.org/docs/error-decoder.html?invariant="+e,t=1;t<arguments.length;t++)n+="&args[]="+encodeURIComponent(arguments[t]);return"Minified React error #"+e+"; visit "+n+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var s=new Set,o={};function l(e,n){d(e,n),d(e+"Capture",n)}function d(e,n){for(o[e]=n,e=0;e<n.length;e++)s.add(n[e])}var c=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),u=Object.prototype.hasOwnProperty,p=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,m={},h={};function f(e,n,t,r,i,a,s){this.acceptsBooleans=2===n||3===n||4===n,this.attributeName=r,this.attributeNamespace=i,this.mustUseProperty=t,this.propertyName=e,this.type=n,this.sanitizeURL=a,this.removeEmptyString=s}var g={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){g[e]=new f(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var n=e[0];g[n]=new f(n,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){g[e]=new f(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){g[e]=new f(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){g[e]=new f(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){g[e]=new f(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){g[e]=new f(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){g[e]=new f(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){g[e]=new f(e,5,!1,e.toLowerCase(),null,!1,!1)}));var C=/[\-:]([a-z])/g;function A(e){return e[1].toUpperCase()}function v(e,n,t,r){var i=g.hasOwnProperty(n)?g[n]:null;(null!==i?0!==i.type:r||!(2<n.length)||"o"!==n[0]&&"O"!==n[0]||"n"!==n[1]&&"N"!==n[1])&&(function(e,n,t,r){if(null==n||function(e,n,t,r){if(null!==t&&0===t.type)return!1;switch(typeof n){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==t?!t.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,n,t,r))return!0;if(r)return!1;if(null!==t)switch(t.type){case 3:return!n;case 4:return!1===n;case 5:return isNaN(n);case 6:return isNaN(n)||1>n}return!1}(n,t,i,r)&&(t=null),r||null===i?function(e){return!!u.call(h,e)||!u.call(m,e)&&(p.test(e)?h[e]=!0:(m[e]=!0,!1))}(n)&&(null===t?e.removeAttribute(n):e.setAttribute(n,""+t)):i.mustUseProperty?e[i.propertyName]=null===t?3!==i.type&&"":t:(n=i.attributeName,r=i.attributeNamespace,null===t?e.removeAttribute(n):(t=3===(i=i.type)||4===i&&!0===t?"":""+t,r?e.setAttributeNS(r,n,t):e.setAttribute(n,t))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var n=e.replace(C,A);g[n]=new f(n,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var n=e.replace(C,A);g[n]=new f(n,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var n=e.replace(C,A);g[n]=new f(n,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){g[e]=new f(e,1,!1,e.toLowerCase(),null,!1,!1)})),g.xlinkHref=new f("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){g[e]=new f(e,1,!1,e.toLowerCase(),null,!0,!0)}));var b=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,y=Symbol.for("react.element"),w=Symbol.for("react.portal"),S=Symbol.for("react.fragment"),P=Symbol.for("react.strict_mode"),E=Symbol.for("react.profiler"),_=Symbol.for("react.provider"),D=Symbol.for("react.context"),I=Symbol.for("react.forward_ref"),x=Symbol.for("react.suspense"),O=Symbol.for("react.suspense_list"),k=Symbol.for("react.memo"),L=Symbol.for("react.lazy");Symbol.for("react.scope"),Symbol.for("react.debug_trace_mode");var U=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden"),Symbol.for("react.cache"),Symbol.for("react.tracing_marker");var T=Symbol.iterator;function R(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=T&&e[T]||e["@@iterator"])?e:null}var F,M=Object.assign;function N(e){if(void 0===F)try{throw Error()}catch(e){var n=e.stack.trim().match(/\n( *(at )?)/);F=n&&n[1]||""}return"\n"+F+e}var W=!1;function j(e,n){if(!e||W)return"";W=!0;var t=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(n)if(n=function(){throw Error()},Object.defineProperty(n.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(n,[])}catch(e){var r=e}Reflect.construct(e,[],n)}else{try{n.call()}catch(e){r=e}e.call(n.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(n){if(n&&r&&"string"==typeof n.stack){for(var i=n.stack.split("\n"),a=r.stack.split("\n"),s=i.length-1,o=a.length-1;1<=s&&0<=o&&i[s]!==a[o];)o--;for(;1<=s&&0<=o;s--,o--)if(i[s]!==a[o]){if(1!==s||1!==o)do{if(s--,0>--o||i[s]!==a[o]){var l="\n"+i[s].replace(" at new "," at ");return e.displayName&&l.includes("<anonymous>")&&(l=l.replace("<anonymous>",e.displayName)),l}}while(1<=s&&0<=o);break}}}finally{W=!1,Error.prepareStackTrace=t}return(e=e?e.displayName||e.name:"")?N(e):""}function B(e){switch(e.tag){case 5:return N(e.type);case 16:return N("Lazy");case 13:return N("Suspense");case 19:return N("SuspenseList");case 0:case 2:case 15:return j(e.type,!1);case 11:return j(e.type.render,!1);case 1:return j(e.type,!0);default:return""}}function z(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case S:return"Fragment";case w:return"Portal";case E:return"Profiler";case P:return"StrictMode";case x:return"Suspense";case O:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case D:return(e.displayName||"Context")+".Consumer";case _:return(e._context.displayName||"Context")+".Provider";case I:var n=e.render;return(e=e.displayName)||(e=""!==(e=n.displayName||n.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case k:return null!==(n=e.displayName||null)?n:z(e.type)||"Memo";case L:n=e._payload,e=e._init;try{return z(e(n))}catch(e){}}return null}function V(e){var n=e.type;switch(e.tag){case 24:return"Cache";case 9:return(n.displayName||"Context")+".Consumer";case 10:return(n._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=(e=n.render).displayName||e.name||"",n.displayName||(""!==e?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 5:return n;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return z(n);case 8:return n===P?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if("function"==typeof n)return n.displayName||n.name||null;if("string"==typeof n)return n}return null}function H(e){switch(typeof e){case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function J(e){var n=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===n||"radio"===n)}function G(e){e._valueTracker||(e._valueTracker=function(e){var n=J(e)?"checked":"value",t=Object.getOwnPropertyDescriptor(e.constructor.prototype,n),r=""+e[n];if(!e.hasOwnProperty(n)&&void 0!==t&&"function"==typeof t.get&&"function"==typeof t.set){var i=t.get,a=t.set;return Object.defineProperty(e,n,{configurable:!0,get:function(){return i.call(this)},set:function(e){r=""+e,a.call(this,e)}}),Object.defineProperty(e,n,{enumerable:t.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[n]}}}}(e))}function $(e){if(!e)return!1;var n=e._valueTracker;if(!n)return!0;var t=n.getValue(),r="";return e&&(r=J(e)?e.checked?"true":"false":e.value),(e=r)!==t&&(n.setValue(e),!0)}function Y(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(n){return e.body}}function q(e,n){var t=n.checked;return M({},n,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=t?t:e._wrapperState.initialChecked})}function Z(e,n){var t=null==n.defaultValue?"":n.defaultValue,r=null!=n.checked?n.checked:n.defaultChecked;t=H(null!=n.value?n.value:t),e._wrapperState={initialChecked:r,initialValue:t,controlled:"checkbox"===n.type||"radio"===n.type?null!=n.checked:null!=n.value}}function Q(e,n){null!=(n=n.checked)&&v(e,"checked",n,!1)}function K(e,n){Q(e,n);var t=H(n.value),r=n.type;if(null!=t)"number"===r?(0===t&&""===e.value||e.value!=t)&&(e.value=""+t):e.value!==""+t&&(e.value=""+t);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");n.hasOwnProperty("value")?ee(e,n.type,t):n.hasOwnProperty("defaultValue")&&ee(e,n.type,H(n.defaultValue)),null==n.checked&&null!=n.defaultChecked&&(e.defaultChecked=!!n.defaultChecked)}function X(e,n,t){if(n.hasOwnProperty("value")||n.hasOwnProperty("defaultValue")){var r=n.type;if(!("submit"!==r&&"reset"!==r||void 0!==n.value&&null!==n.value))return;n=""+e._wrapperState.initialValue,t||n===e.value||(e.value=n),e.defaultValue=n}""!==(t=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==t&&(e.name=t)}function ee(e,n,t){"number"===n&&Y(e.ownerDocument)===e||(null==t?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+t&&(e.defaultValue=""+t))}var ne=Array.isArray;function te(e,n,t,r){if(e=e.options,n){n={};for(var i=0;i<t.length;i++)n["$"+t[i]]=!0;for(t=0;t<e.length;t++)i=n.hasOwnProperty("$"+e[t].value),e[t].selected!==i&&(e[t].selected=i),i&&r&&(e[t].defaultSelected=!0)}else{for(t=""+H(t),n=null,i=0;i<e.length;i++){if(e[i].value===t)return e[i].selected=!0,void(r&&(e[i].defaultSelected=!0));null!==n||e[i].disabled||(n=e[i])}null!==n&&(n.selected=!0)}}function re(e,n){if(null!=n.dangerouslySetInnerHTML)throw Error(a(91));return M({},n,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function ie(e,n){var t=n.value;if(null==t){if(t=n.children,n=n.defaultValue,null!=t){if(null!=n)throw Error(a(92));if(ne(t)){if(1<t.length)throw Error(a(93));t=t[0]}n=t}null==n&&(n=""),t=n}e._wrapperState={initialValue:H(t)}}function ae(e,n){var t=H(n.value),r=H(n.defaultValue);null!=t&&((t=""+t)!==e.value&&(e.value=t),null==n.defaultValue&&e.defaultValue!==t&&(e.defaultValue=t)),null!=r&&(e.defaultValue=""+r)}function se(e){var n=e.textContent;n===e._wrapperState.initialValue&&""!==n&&null!==n&&(e.value=n)}function oe(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function le(e,n){return null==e||"http://www.w3.org/1999/xhtml"===e?oe(n):"http://www.w3.org/2000/svg"===e&&"foreignObject"===n?"http://www.w3.org/1999/xhtml":e}var de,ce,ue=(ce=function(e,n){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=n;else{for((de=de||document.createElement("div")).innerHTML="<svg>"+n.valueOf().toString()+"</svg>",n=de.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;n.firstChild;)e.appendChild(n.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,n,t,r){MSApp.execUnsafeLocalFunction((function(){return ce(e,n)}))}:ce);function pe(e,n){if(n){var t=e.firstChild;if(t&&t===e.lastChild&&3===t.nodeType)return void(t.nodeValue=n)}e.textContent=n}var me={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},he=["Webkit","ms","Moz","O"];function fe(e,n,t){return null==n||"boolean"==typeof n||""===n?"":t||"number"!=typeof n||0===n||me.hasOwnProperty(e)&&me[e]?(""+n).trim():n+"px"}function ge(e,n){for(var t in e=e.style,n)if(n.hasOwnProperty(t)){var r=0===t.indexOf("--"),i=fe(t,n[t],r);"float"===t&&(t="cssFloat"),r?e.setProperty(t,i):e[t]=i}}Object.keys(me).forEach((function(e){he.forEach((function(n){n=n+e.charAt(0).toUpperCase()+e.substring(1),me[n]=me[e]}))}));var Ce=M({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function Ae(e,n){if(n){if(Ce[e]&&(null!=n.children||null!=n.dangerouslySetInnerHTML))throw Error(a(137,e));if(null!=n.dangerouslySetInnerHTML){if(null!=n.children)throw Error(a(60));if("object"!=typeof n.dangerouslySetInnerHTML||!("__html"in n.dangerouslySetInnerHTML))throw Error(a(61))}if(null!=n.style&&"object"!=typeof n.style)throw Error(a(62))}}function ve(e,n){if(-1===e.indexOf("-"))return"string"==typeof n.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var be=null;function ye(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var we=null,Se=null,Pe=null;function Ee(e){if(e=vi(e)){if("function"!=typeof we)throw Error(a(280));var n=e.stateNode;n&&(n=yi(n),we(e.stateNode,e.type,n))}}function _e(e){Se?Pe?Pe.push(e):Pe=[e]:Se=e}function De(){if(Se){var e=Se,n=Pe;if(Pe=Se=null,Ee(e),n)for(e=0;e<n.length;e++)Ee(n[e])}}function Ie(e,n){return e(n)}function xe(){}var Oe=!1;function ke(e,n,t){if(Oe)return e(n,t);Oe=!0;try{return Ie(e,n,t)}finally{Oe=!1,(null!==Se||null!==Pe)&&(xe(),De())}}function Le(e,n){var t=e.stateNode;if(null===t)return null;var r=yi(t);if(null===r)return null;t=r[n];e:switch(n){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(t&&"function"!=typeof t)throw Error(a(231,n,typeof t));return t}var Ue=!1;if(c)try{var Te={};Object.defineProperty(Te,"passive",{get:function(){Ue=!0}}),window.addEventListener("test",Te,Te),window.removeEventListener("test",Te,Te)}catch(ce){Ue=!1}function Re(e,n,t,r,i,a,s,o,l){var d=Array.prototype.slice.call(arguments,3);try{n.apply(t,d)}catch(e){this.onError(e)}}var Fe=!1,Me=null,Ne=!1,We=null,je={onError:function(e){Fe=!0,Me=e}};function Be(e,n,t,r,i,a,s,o,l){Fe=!1,Me=null,Re.apply(je,arguments)}function ze(e){var n=e,t=e;if(e.alternate)for(;n.return;)n=n.return;else{e=n;do{0!=(4098&(n=e).flags)&&(t=n.return),e=n.return}while(e)}return 3===n.tag?t:null}function Ve(e){if(13===e.tag){var n=e.memoizedState;if(null===n&&null!==(e=e.alternate)&&(n=e.memoizedState),null!==n)return n.dehydrated}return null}function He(e){if(ze(e)!==e)throw Error(a(188))}function Je(e){return null!==(e=function(e){var n=e.alternate;if(!n){if(null===(n=ze(e)))throw Error(a(188));return n!==e?null:e}for(var t=e,r=n;;){var i=t.return;if(null===i)break;var s=i.alternate;if(null===s){if(null!==(r=i.return)){t=r;continue}break}if(i.child===s.child){for(s=i.child;s;){if(s===t)return He(i),e;if(s===r)return He(i),n;s=s.sibling}throw Error(a(188))}if(t.return!==r.return)t=i,r=s;else{for(var o=!1,l=i.child;l;){if(l===t){o=!0,t=i,r=s;break}if(l===r){o=!0,r=i,t=s;break}l=l.sibling}if(!o){for(l=s.child;l;){if(l===t){o=!0,t=s,r=i;break}if(l===r){o=!0,r=s,t=i;break}l=l.sibling}if(!o)throw Error(a(189))}}if(t.alternate!==r)throw Error(a(190))}if(3!==t.tag)throw Error(a(188));return t.stateNode.current===t?e:n}(e))?Ge(e):null}function Ge(e){if(5===e.tag||6===e.tag)return e;for(e=e.child;null!==e;){var n=Ge(e);if(null!==n)return n;e=e.sibling}return null}var $e=i.unstable_scheduleCallback,Ye=i.unstable_cancelCallback,qe=i.unstable_shouldYield,Ze=i.unstable_requestPaint,Qe=i.unstable_now,Ke=i.unstable_getCurrentPriorityLevel,Xe=i.unstable_ImmediatePriority,en=i.unstable_UserBlockingPriority,nn=i.unstable_NormalPriority,tn=i.unstable_LowPriority,rn=i.unstable_IdlePriority,an=null,sn=null,on=Math.clz32?Math.clz32:function(e){return 0===(e>>>=0)?32:31-(ln(e)/dn|0)|0},ln=Math.log,dn=Math.LN2,cn=64,un=4194304;function pn(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194240&e;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return 130023424&e;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function mn(e,n){var t=e.pendingLanes;if(0===t)return 0;var r=0,i=e.suspendedLanes,a=e.pingedLanes,s=268435455&t;if(0!==s){var o=s&~i;0!==o?r=pn(o):0!=(a&=s)&&(r=pn(a))}else 0!=(s=t&~i)?r=pn(s):0!==a&&(r=pn(a));if(0===r)return 0;if(0!==n&&n!==r&&0==(n&i)&&((i=r&-r)>=(a=n&-n)||16===i&&0!=(4194240&a)))return n;if(0!=(4&r)&&(r|=16&t),0!==(n=e.entangledLanes))for(e=e.entanglements,n&=r;0<n;)i=1<<(t=31-on(n)),r|=e[t],n&=~i;return r}function hn(e,n){switch(e){case 1:case 2:case 4:return n+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return n+5e3;default:return-1}}function fn(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function gn(){var e=cn;return 0==(4194240&(cn<<=1))&&(cn=64),e}function Cn(e){for(var n=[],t=0;31>t;t++)n.push(e);return n}function An(e,n,t){e.pendingLanes|=n,536870912!==n&&(e.suspendedLanes=0,e.pingedLanes=0),(e=e.eventTimes)[n=31-on(n)]=t}function vn(e,n){var t=e.entangledLanes|=n;for(e=e.entanglements;t;){var r=31-on(t),i=1<<r;i&n|e[r]&n&&(e[r]|=n),t&=~i}}var bn=0;function yn(e){return 1<(e&=-e)?4<e?0!=(268435455&e)?16:536870912:4:1}var wn,Sn,Pn,En,_n,Dn=!1,In=[],xn=null,On=null,kn=null,Ln=new Map,Un=new Map,Tn=[],Rn="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function Fn(e,n){switch(e){case"focusin":case"focusout":xn=null;break;case"dragenter":case"dragleave":On=null;break;case"mouseover":case"mouseout":kn=null;break;case"pointerover":case"pointerout":Ln.delete(n.pointerId);break;case"gotpointercapture":case"lostpointercapture":Un.delete(n.pointerId)}}function Mn(e,n,t,r,i,a){return null===e||e.nativeEvent!==a?(e={blockedOn:n,domEventName:t,eventSystemFlags:r,nativeEvent:a,targetContainers:[i]},null!==n&&null!==(n=vi(n))&&Sn(n),e):(e.eventSystemFlags|=r,n=e.targetContainers,null!==i&&-1===n.indexOf(i)&&n.push(i),e)}function Nn(e){var n=Ai(e.target);if(null!==n){var t=ze(n);if(null!==t)if(13===(n=t.tag)){if(null!==(n=Ve(t)))return e.blockedOn=n,void _n(e.priority,(function(){Pn(t)}))}else if(3===n&&t.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===t.tag?t.stateNode.containerInfo:null)}e.blockedOn=null}function Wn(e){if(null!==e.blockedOn)return!1;for(var n=e.targetContainers;0<n.length;){var t=Zn(e.domEventName,e.eventSystemFlags,n[0],e.nativeEvent);if(null!==t)return null!==(n=vi(t))&&Sn(n),e.blockedOn=t,!1;var r=new(t=e.nativeEvent).constructor(t.type,t);be=r,t.target.dispatchEvent(r),be=null,n.shift()}return!0}function jn(e,n,t){Wn(e)&&t.delete(n)}function Bn(){Dn=!1,null!==xn&&Wn(xn)&&(xn=null),null!==On&&Wn(On)&&(On=null),null!==kn&&Wn(kn)&&(kn=null),Ln.forEach(jn),Un.forEach(jn)}function zn(e,n){e.blockedOn===n&&(e.blockedOn=null,Dn||(Dn=!0,i.unstable_scheduleCallback(i.unstable_NormalPriority,Bn)))}function Vn(e){function n(n){return zn(n,e)}if(0<In.length){zn(In[0],e);for(var t=1;t<In.length;t++){var r=In[t];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==xn&&zn(xn,e),null!==On&&zn(On,e),null!==kn&&zn(kn,e),Ln.forEach(n),Un.forEach(n),t=0;t<Tn.length;t++)(r=Tn[t]).blockedOn===e&&(r.blockedOn=null);for(;0<Tn.length&&null===(t=Tn[0]).blockedOn;)Nn(t),null===t.blockedOn&&Tn.shift()}var Hn=b.ReactCurrentBatchConfig,Jn=!0;function Gn(e,n,t,r){var i=bn,a=Hn.transition;Hn.transition=null;try{bn=1,Yn(e,n,t,r)}finally{bn=i,Hn.transition=a}}function $n(e,n,t,r){var i=bn,a=Hn.transition;Hn.transition=null;try{bn=4,Yn(e,n,t,r)}finally{bn=i,Hn.transition=a}}function Yn(e,n,t,r){if(Jn){var i=Zn(e,n,t,r);if(null===i)Hr(e,n,r,qn,t),Fn(e,r);else if(function(e,n,t,r,i){switch(n){case"focusin":return xn=Mn(xn,e,n,t,r,i),!0;case"dragenter":return On=Mn(On,e,n,t,r,i),!0;case"mouseover":return kn=Mn(kn,e,n,t,r,i),!0;case"pointerover":var a=i.pointerId;return Ln.set(a,Mn(Ln.get(a)||null,e,n,t,r,i)),!0;case"gotpointercapture":return a=i.pointerId,Un.set(a,Mn(Un.get(a)||null,e,n,t,r,i)),!0}return!1}(i,e,n,t,r))r.stopPropagation();else if(Fn(e,r),4&n&&-1<Rn.indexOf(e)){for(;null!==i;){var a=vi(i);if(null!==a&&wn(a),null===(a=Zn(e,n,t,r))&&Hr(e,n,r,qn,t),a===i)break;i=a}null!==i&&r.stopPropagation()}else Hr(e,n,r,null,t)}}var qn=null;function Zn(e,n,t,r){if(qn=null,null!==(e=Ai(e=ye(r))))if(null===(n=ze(e)))e=null;else if(13===(t=n.tag)){if(null!==(e=Ve(n)))return e;e=null}else if(3===t){if(n.stateNode.current.memoizedState.isDehydrated)return 3===n.tag?n.stateNode.containerInfo:null;e=null}else n!==e&&(e=null);return qn=e,null}function Qn(e){switch(e){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(Ke()){case Xe:return 1;case en:return 4;case nn:case tn:return 16;case rn:return 536870912;default:return 16}default:return 16}}var Kn=null,Xn=null,et=null;function nt(){if(et)return et;var e,n,t=Xn,r=t.length,i="value"in Kn?Kn.value:Kn.textContent,a=i.length;for(e=0;e<r&&t[e]===i[e];e++);var s=r-e;for(n=1;n<=s&&t[r-n]===i[a-n];n++);return et=i.slice(e,1<n?1-n:void 0)}function tt(e){var n=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===n&&(e=13):e=n,10===e&&(e=13),32<=e||13===e?e:0}function rt(){return!0}function it(){return!1}function at(e){function n(n,t,r,i,a){for(var s in this._reactName=n,this._targetInst=r,this.type=t,this.nativeEvent=i,this.target=a,this.currentTarget=null,e)e.hasOwnProperty(s)&&(n=e[s],this[s]=n?n(i):i[s]);return this.isDefaultPrevented=(null!=i.defaultPrevented?i.defaultPrevented:!1===i.returnValue)?rt:it,this.isPropagationStopped=it,this}return M(n.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=rt)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=rt)},persist:function(){},isPersistent:rt}),n}var st,ot,lt,dt={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},ct=at(dt),ut=M({},dt,{view:0,detail:0}),pt=at(ut),mt=M({},ut,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:Et,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==lt&&(lt&&"mousemove"===e.type?(st=e.screenX-lt.screenX,ot=e.screenY-lt.screenY):ot=st=0,lt=e),st)},movementY:function(e){return"movementY"in e?e.movementY:ot}}),ht=at(mt),ft=at(M({},mt,{dataTransfer:0})),gt=at(M({},ut,{relatedTarget:0})),Ct=at(M({},dt,{animationName:0,elapsedTime:0,pseudoElement:0})),At=M({},dt,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),vt=at(At),bt=at(M({},dt,{data:0})),yt={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},wt={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},St={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Pt(e){var n=this.nativeEvent;return n.getModifierState?n.getModifierState(e):!!(e=St[e])&&!!n[e]}function Et(){return Pt}var _t=M({},ut,{key:function(e){if(e.key){var n=yt[e.key]||e.key;if("Unidentified"!==n)return n}return"keypress"===e.type?13===(e=tt(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?wt[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:Et,charCode:function(e){return"keypress"===e.type?tt(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?tt(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),Dt=at(_t),It=at(M({},mt,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),xt=at(M({},ut,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:Et})),Ot=at(M({},dt,{propertyName:0,elapsedTime:0,pseudoElement:0})),kt=M({},mt,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),Lt=at(kt),Ut=[9,13,27,32],Tt=c&&"CompositionEvent"in window,Rt=null;c&&"documentMode"in document&&(Rt=document.documentMode);var Ft=c&&"TextEvent"in window&&!Rt,Mt=c&&(!Tt||Rt&&8<Rt&&11>=Rt),Nt=String.fromCharCode(32),Wt=!1;function jt(e,n){switch(e){case"keyup":return-1!==Ut.indexOf(n.keyCode);case"keydown":return 229!==n.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Bt(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var zt=!1,Vt={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Ht(e){var n=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===n?!!Vt[e.type]:"textarea"===n}function Jt(e,n,t,r){_e(r),0<(n=Gr(n,"onChange")).length&&(t=new ct("onChange","change",null,t,r),e.push({event:t,listeners:n}))}var Gt=null,$t=null;function Yt(e){Nr(e,0)}function qt(e){if($(bi(e)))return e}function Zt(e,n){if("change"===e)return n}var Qt=!1;if(c){var Kt;if(c){var Xt="oninput"in document;if(!Xt){var er=document.createElement("div");er.setAttribute("oninput","return;"),Xt="function"==typeof er.oninput}Kt=Xt}else Kt=!1;Qt=Kt&&(!document.documentMode||9<document.documentMode)}function nr(){Gt&&(Gt.detachEvent("onpropertychange",tr),$t=Gt=null)}function tr(e){if("value"===e.propertyName&&qt($t)){var n=[];Jt(n,$t,e,ye(e)),ke(Yt,n)}}function rr(e,n,t){"focusin"===e?(nr(),$t=t,(Gt=n).attachEvent("onpropertychange",tr)):"focusout"===e&&nr()}function ir(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return qt($t)}function ar(e,n){if("click"===e)return qt(n)}function sr(e,n){if("input"===e||"change"===e)return qt(n)}var or="function"==typeof Object.is?Object.is:function(e,n){return e===n&&(0!==e||1/e==1/n)||e!=e&&n!=n};function lr(e,n){if(or(e,n))return!0;if("object"!=typeof e||null===e||"object"!=typeof n||null===n)return!1;var t=Object.keys(e),r=Object.keys(n);if(t.length!==r.length)return!1;for(r=0;r<t.length;r++){var i=t[r];if(!u.call(n,i)||!or(e[i],n[i]))return!1}return!0}function dr(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function cr(e,n){var t,r=dr(e);for(e=0;r;){if(3===r.nodeType){if(t=e+r.textContent.length,e<=n&&t>=n)return{node:r,offset:n-e};e=t}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=dr(r)}}function ur(e,n){return!(!e||!n)&&(e===n||(!e||3!==e.nodeType)&&(n&&3===n.nodeType?ur(e,n.parentNode):"contains"in e?e.contains(n):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(n))))}function pr(){for(var e=window,n=Y();n instanceof e.HTMLIFrameElement;){try{var t="string"==typeof n.contentWindow.location.href}catch(e){t=!1}if(!t)break;n=Y((e=n.contentWindow).document)}return n}function mr(e){var n=e&&e.nodeName&&e.nodeName.toLowerCase();return n&&("input"===n&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===n||"true"===e.contentEditable)}function hr(e){var n=pr(),t=e.focusedElem,r=e.selectionRange;if(n!==t&&t&&t.ownerDocument&&ur(t.ownerDocument.documentElement,t)){if(null!==r&&mr(t))if(n=r.start,void 0===(e=r.end)&&(e=n),"selectionStart"in t)t.selectionStart=n,t.selectionEnd=Math.min(e,t.value.length);else if((e=(n=t.ownerDocument||document)&&n.defaultView||window).getSelection){e=e.getSelection();var i=t.textContent.length,a=Math.min(r.start,i);r=void 0===r.end?a:Math.min(r.end,i),!e.extend&&a>r&&(i=r,r=a,a=i),i=cr(t,a);var s=cr(t,r);i&&s&&(1!==e.rangeCount||e.anchorNode!==i.node||e.anchorOffset!==i.offset||e.focusNode!==s.node||e.focusOffset!==s.offset)&&((n=n.createRange()).setStart(i.node,i.offset),e.removeAllRanges(),a>r?(e.addRange(n),e.extend(s.node,s.offset)):(n.setEnd(s.node,s.offset),e.addRange(n)))}for(n=[],e=t;e=e.parentNode;)1===e.nodeType&&n.push({element:e,left:e.scrollLeft,top:e.scrollTop});for("function"==typeof t.focus&&t.focus(),t=0;t<n.length;t++)(e=n[t]).element.scrollLeft=e.left,e.element.scrollTop=e.top}}var fr=c&&"documentMode"in document&&11>=document.documentMode,gr=null,Cr=null,Ar=null,vr=!1;function br(e,n,t){var r=t.window===t?t.document:9===t.nodeType?t:t.ownerDocument;vr||null==gr||gr!==Y(r)||(r="selectionStart"in(r=gr)&&mr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},Ar&&lr(Ar,r)||(Ar=r,0<(r=Gr(Cr,"onSelect")).length&&(n=new ct("onSelect","select",null,n,t),e.push({event:n,listeners:r}),n.target=gr)))}function yr(e,n){var t={};return t[e.toLowerCase()]=n.toLowerCase(),t["Webkit"+e]="webkit"+n,t["Moz"+e]="moz"+n,t}var wr={animationend:yr("Animation","AnimationEnd"),animationiteration:yr("Animation","AnimationIteration"),animationstart:yr("Animation","AnimationStart"),transitionend:yr("Transition","TransitionEnd")},Sr={},Pr={};function Er(e){if(Sr[e])return Sr[e];if(!wr[e])return e;var n,t=wr[e];for(n in t)if(t.hasOwnProperty(n)&&n in Pr)return Sr[e]=t[n];return e}c&&(Pr=document.createElement("div").style,"AnimationEvent"in window||(delete wr.animationend.animation,delete wr.animationiteration.animation,delete wr.animationstart.animation),"TransitionEvent"in window||delete wr.transitionend.transition);var _r=Er("animationend"),Dr=Er("animationiteration"),Ir=Er("animationstart"),xr=Er("transitionend"),Or=new Map,kr="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function Lr(e,n){Or.set(e,n),l(n,[e])}for(var Ur=0;Ur<kr.length;Ur++){var Tr=kr[Ur];Lr(Tr.toLowerCase(),"on"+(Tr[0].toUpperCase()+Tr.slice(1)))}Lr(_r,"onAnimationEnd"),Lr(Dr,"onAnimationIteration"),Lr(Ir,"onAnimationStart"),Lr("dblclick","onDoubleClick"),Lr("focusin","onFocus"),Lr("focusout","onBlur"),Lr(xr,"onTransitionEnd"),d("onMouseEnter",["mouseout","mouseover"]),d("onMouseLeave",["mouseout","mouseover"]),d("onPointerEnter",["pointerout","pointerover"]),d("onPointerLeave",["pointerout","pointerover"]),l("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),l("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),l("onBeforeInput",["compositionend","keypress","textInput","paste"]),l("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),l("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),l("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Rr="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Fr=new Set("cancel close invalid load scroll toggle".split(" ").concat(Rr));function Mr(e,n,t){var r=e.type||"unknown-event";e.currentTarget=t,function(e,n,t,r,i,s,o,l,d){if(Be.apply(this,arguments),Fe){if(!Fe)throw Error(a(198));var c=Me;Fe=!1,Me=null,Ne||(Ne=!0,We=c)}}(r,n,void 0,e),e.currentTarget=null}function Nr(e,n){n=0!=(4&n);for(var t=0;t<e.length;t++){var r=e[t],i=r.event;r=r.listeners;e:{var a=void 0;if(n)for(var s=r.length-1;0<=s;s--){var o=r[s],l=o.instance,d=o.currentTarget;if(o=o.listener,l!==a&&i.isPropagationStopped())break e;Mr(i,o,d),a=l}else for(s=0;s<r.length;s++){if(l=(o=r[s]).instance,d=o.currentTarget,o=o.listener,l!==a&&i.isPropagationStopped())break e;Mr(i,o,d),a=l}}}if(Ne)throw e=We,Ne=!1,We=null,e}function Wr(e,n){var t=n[fi];void 0===t&&(t=n[fi]=new Set);var r=e+"__bubble";t.has(r)||(Vr(n,e,2,!1),t.add(r))}function jr(e,n,t){var r=0;n&&(r|=4),Vr(t,e,r,n)}var Br="_reactListening"+Math.random().toString(36).slice(2);function zr(e){if(!e[Br]){e[Br]=!0,s.forEach((function(n){"selectionchange"!==n&&(Fr.has(n)||jr(n,!1,e),jr(n,!0,e))}));var n=9===e.nodeType?e:e.ownerDocument;null===n||n[Br]||(n[Br]=!0,jr("selectionchange",!1,n))}}function Vr(e,n,t,r){switch(Qn(n)){case 1:var i=Gn;break;case 4:i=$n;break;default:i=Yn}t=i.bind(null,n,t,e),i=void 0,!Ue||"touchstart"!==n&&"touchmove"!==n&&"wheel"!==n||(i=!0),r?void 0!==i?e.addEventListener(n,t,{capture:!0,passive:i}):e.addEventListener(n,t,!0):void 0!==i?e.addEventListener(n,t,{passive:i}):e.addEventListener(n,t,!1)}function Hr(e,n,t,r,i){var a=r;if(0==(1&n)&&0==(2&n)&&null!==r)e:for(;;){if(null===r)return;var s=r.tag;if(3===s||4===s){var o=r.stateNode.containerInfo;if(o===i||8===o.nodeType&&o.parentNode===i)break;if(4===s)for(s=r.return;null!==s;){var l=s.tag;if((3===l||4===l)&&((l=s.stateNode.containerInfo)===i||8===l.nodeType&&l.parentNode===i))return;s=s.return}for(;null!==o;){if(null===(s=Ai(o)))return;if(5===(l=s.tag)||6===l){r=a=s;continue e}o=o.parentNode}}r=r.return}ke((function(){var r=a,i=ye(t),s=[];e:{var o=Or.get(e);if(void 0!==o){var l=ct,d=e;switch(e){case"keypress":if(0===tt(t))break e;case"keydown":case"keyup":l=Dt;break;case"focusin":d="focus",l=gt;break;case"focusout":d="blur",l=gt;break;case"beforeblur":case"afterblur":l=gt;break;case"click":if(2===t.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":l=ht;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":l=ft;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":l=xt;break;case _r:case Dr:case Ir:l=Ct;break;case xr:l=Ot;break;case"scroll":l=pt;break;case"wheel":l=Lt;break;case"copy":case"cut":case"paste":l=vt;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":l=It}var c=0!=(4&n),u=!c&&"scroll"===e,p=c?null!==o?o+"Capture":null:o;c=[];for(var m,h=r;null!==h;){var f=(m=h).stateNode;if(5===m.tag&&null!==f&&(m=f,null!==p&&null!=(f=Le(h,p))&&c.push(Jr(h,f,m))),u)break;h=h.return}0<c.length&&(o=new l(o,d,null,t,i),s.push({event:o,listeners:c}))}}if(0==(7&n)){if(l="mouseout"===e||"pointerout"===e,(!(o="mouseover"===e||"pointerover"===e)||t===be||!(d=t.relatedTarget||t.fromElement)||!Ai(d)&&!d[hi])&&(l||o)&&(o=i.window===i?i:(o=i.ownerDocument)?o.defaultView||o.parentWindow:window,l?(l=r,null!==(d=(d=t.relatedTarget||t.toElement)?Ai(d):null)&&(d!==(u=ze(d))||5!==d.tag&&6!==d.tag)&&(d=null)):(l=null,d=r),l!==d)){if(c=ht,f="onMouseLeave",p="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(c=It,f="onPointerLeave",p="onPointerEnter",h="pointer"),u=null==l?o:bi(l),m=null==d?o:bi(d),(o=new c(f,h+"leave",l,t,i)).target=u,o.relatedTarget=m,f=null,Ai(i)===r&&((c=new c(p,h+"enter",d,t,i)).target=m,c.relatedTarget=u,f=c),u=f,l&&d)e:{for(p=d,h=0,m=c=l;m;m=$r(m))h++;for(m=0,f=p;f;f=$r(f))m++;for(;0<h-m;)c=$r(c),h--;for(;0<m-h;)p=$r(p),m--;for(;h--;){if(c===p||null!==p&&c===p.alternate)break e;c=$r(c),p=$r(p)}c=null}else c=null;null!==l&&Yr(s,o,l,c,!1),null!==d&&null!==u&&Yr(s,u,d,c,!0)}if("select"===(l=(o=r?bi(r):window).nodeName&&o.nodeName.toLowerCase())||"input"===l&&"file"===o.type)var g=Zt;else if(Ht(o))if(Qt)g=sr;else{g=ir;var C=rr}else(l=o.nodeName)&&"input"===l.toLowerCase()&&("checkbox"===o.type||"radio"===o.type)&&(g=ar);switch(g&&(g=g(e,r))?Jt(s,g,t,i):(C&&C(e,o,r),"focusout"===e&&(C=o._wrapperState)&&C.controlled&&"number"===o.type&&ee(o,"number",o.value)),C=r?bi(r):window,e){case"focusin":(Ht(C)||"true"===C.contentEditable)&&(gr=C,Cr=r,Ar=null);break;case"focusout":Ar=Cr=gr=null;break;case"mousedown":vr=!0;break;case"contextmenu":case"mouseup":case"dragend":vr=!1,br(s,t,i);break;case"selectionchange":if(fr)break;case"keydown":case"keyup":br(s,t,i)}var A;if(Tt)e:{switch(e){case"compositionstart":var v="onCompositionStart";break e;case"compositionend":v="onCompositionEnd";break e;case"compositionupdate":v="onCompositionUpdate";break e}v=void 0}else zt?jt(e,t)&&(v="onCompositionEnd"):"keydown"===e&&229===t.keyCode&&(v="onCompositionStart");v&&(Mt&&"ko"!==t.locale&&(zt||"onCompositionStart"!==v?"onCompositionEnd"===v&&zt&&(A=nt()):(Xn="value"in(Kn=i)?Kn.value:Kn.textContent,zt=!0)),0<(C=Gr(r,v)).length&&(v=new bt(v,e,null,t,i),s.push({event:v,listeners:C}),(A||null!==(A=Bt(t)))&&(v.data=A))),(A=Ft?function(e,n){switch(e){case"compositionend":return Bt(n);case"keypress":return 32!==n.which?null:(Wt=!0,Nt);case"textInput":return(e=n.data)===Nt&&Wt?null:e;default:return null}}(e,t):function(e,n){if(zt)return"compositionend"===e||!Tt&&jt(e,n)?(e=nt(),et=Xn=Kn=null,zt=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(n.ctrlKey||n.altKey||n.metaKey)||n.ctrlKey&&n.altKey){if(n.char&&1<n.char.length)return n.char;if(n.which)return String.fromCharCode(n.which)}return null;case"compositionend":return Mt&&"ko"!==n.locale?null:n.data}}(e,t))&&0<(r=Gr(r,"onBeforeInput")).length&&(i=new bt("onBeforeInput","beforeinput",null,t,i),s.push({event:i,listeners:r}),i.data=A)}Nr(s,n)}))}function Jr(e,n,t){return{instance:e,listener:n,currentTarget:t}}function Gr(e,n){for(var t=n+"Capture",r=[];null!==e;){var i=e,a=i.stateNode;5===i.tag&&null!==a&&(i=a,null!=(a=Le(e,t))&&r.unshift(Jr(e,a,i)),null!=(a=Le(e,n))&&r.push(Jr(e,a,i))),e=e.return}return r}function $r(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Yr(e,n,t,r,i){for(var a=n._reactName,s=[];null!==t&&t!==r;){var o=t,l=o.alternate,d=o.stateNode;if(null!==l&&l===r)break;5===o.tag&&null!==d&&(o=d,i?null!=(l=Le(t,a))&&s.unshift(Jr(t,l,o)):i||null!=(l=Le(t,a))&&s.push(Jr(t,l,o))),t=t.return}0!==s.length&&e.push({event:n,listeners:s})}var qr=/\r\n?/g,Zr=/\u0000|\uFFFD/g;function Qr(e){return("string"==typeof e?e:""+e).replace(qr,"\n").replace(Zr,"")}function Kr(e,n,t){if(n=Qr(n),Qr(e)!==n&&t)throw Error(a(425))}function Xr(){}var ei=null,ni=null;function ti(e,n){return"textarea"===e||"noscript"===e||"string"==typeof n.children||"number"==typeof n.children||"object"==typeof n.dangerouslySetInnerHTML&&null!==n.dangerouslySetInnerHTML&&null!=n.dangerouslySetInnerHTML.__html}var ri="function"==typeof setTimeout?setTimeout:void 0,ii="function"==typeof clearTimeout?clearTimeout:void 0,ai="function"==typeof Promise?Promise:void 0,si="function"==typeof queueMicrotask?queueMicrotask:void 0!==ai?function(e){return ai.resolve(null).then(e).catch(oi)}:ri;function oi(e){setTimeout((function(){throw e}))}function li(e,n){var t=n,r=0;do{var i=t.nextSibling;if(e.removeChild(t),i&&8===i.nodeType)if("/$"===(t=i.data)){if(0===r)return e.removeChild(i),void Vn(n);r--}else"$"!==t&&"$?"!==t&&"$!"!==t||r++;t=i}while(t);Vn(n)}function di(e){for(;null!=e;e=e.nextSibling){var n=e.nodeType;if(1===n||3===n)break;if(8===n){if("$"===(n=e.data)||"$!"===n||"$?"===n)break;if("/$"===n)return null}}return e}function ci(e){e=e.previousSibling;for(var n=0;e;){if(8===e.nodeType){var t=e.data;if("$"===t||"$!"===t||"$?"===t){if(0===n)return e;n--}else"/$"===t&&n++}e=e.previousSibling}return null}var ui=Math.random().toString(36).slice(2),pi="__reactFiber$"+ui,mi="__reactProps$"+ui,hi="__reactContainer$"+ui,fi="__reactEvents$"+ui,gi="__reactListeners$"+ui,Ci="__reactHandles$"+ui;function Ai(e){var n=e[pi];if(n)return n;for(var t=e.parentNode;t;){if(n=t[hi]||t[pi]){if(t=n.alternate,null!==n.child||null!==t&&null!==t.child)for(e=ci(e);null!==e;){if(t=e[pi])return t;e=ci(e)}return n}t=(e=t).parentNode}return null}function vi(e){return!(e=e[pi]||e[hi])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function bi(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(a(33))}function yi(e){return e[mi]||null}var wi=[],Si=-1;function Pi(e){return{current:e}}function Ei(e){0>Si||(e.current=wi[Si],wi[Si]=null,Si--)}function _i(e,n){Si++,wi[Si]=e.current,e.current=n}var Di={},Ii=Pi(Di),xi=Pi(!1),Oi=Di;function ki(e,n){var t=e.type.contextTypes;if(!t)return Di;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===n)return r.__reactInternalMemoizedMaskedChildContext;var i,a={};for(i in t)a[i]=n[i];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=n,e.__reactInternalMemoizedMaskedChildContext=a),a}function Li(e){return null!=e.childContextTypes}function Ui(){Ei(xi),Ei(Ii)}function Ti(e,n,t){if(Ii.current!==Di)throw Error(a(168));_i(Ii,n),_i(xi,t)}function Ri(e,n,t){var r=e.stateNode;if(n=n.childContextTypes,"function"!=typeof r.getChildContext)return t;for(var i in r=r.getChildContext())if(!(i in n))throw Error(a(108,V(e)||"Unknown",i));return M({},t,r)}function Fi(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||Di,Oi=Ii.current,_i(Ii,e),_i(xi,xi.current),!0}function Mi(e,n,t){var r=e.stateNode;if(!r)throw Error(a(169));t?(e=Ri(e,n,Oi),r.__reactInternalMemoizedMergedChildContext=e,Ei(xi),Ei(Ii),_i(Ii,e)):Ei(xi),_i(xi,t)}var Ni=null,Wi=!1,ji=!1;function Bi(e){null===Ni?Ni=[e]:Ni.push(e)}function zi(){if(!ji&&null!==Ni){ji=!0;var e=0,n=bn;try{var t=Ni;for(bn=1;e<t.length;e++){var r=t[e];do{r=r(!0)}while(null!==r)}Ni=null,Wi=!1}catch(n){throw null!==Ni&&(Ni=Ni.slice(e+1)),$e(Xe,zi),n}finally{bn=n,ji=!1}}return null}var Vi=[],Hi=0,Ji=null,Gi=0,$i=[],Yi=0,qi=null,Zi=1,Qi="";function Ki(e,n){Vi[Hi++]=Gi,Vi[Hi++]=Ji,Ji=e,Gi=n}function Xi(e,n,t){$i[Yi++]=Zi,$i[Yi++]=Qi,$i[Yi++]=qi,qi=e;var r=Zi;e=Qi;var i=32-on(r)-1;r&=~(1<<i),t+=1;var a=32-on(n)+i;if(30<a){var s=i-i%5;a=(r&(1<<s)-1).toString(32),r>>=s,i-=s,Zi=1<<32-on(n)+i|t<<i|r,Qi=a+e}else Zi=1<<a|t<<i|r,Qi=e}function ea(e){null!==e.return&&(Ki(e,1),Xi(e,1,0))}function na(e){for(;e===Ji;)Ji=Vi[--Hi],Vi[Hi]=null,Gi=Vi[--Hi],Vi[Hi]=null;for(;e===qi;)qi=$i[--Yi],$i[Yi]=null,Qi=$i[--Yi],$i[Yi]=null,Zi=$i[--Yi],$i[Yi]=null}var ta=null,ra=null,ia=!1,aa=null;function sa(e,n){var t=Ld(5,null,null,0);t.elementType="DELETED",t.stateNode=n,t.return=e,null===(n=e.deletions)?(e.deletions=[t],e.flags|=16):n.push(t)}function oa(e,n){switch(e.tag){case 5:var t=e.type;return null!==(n=1!==n.nodeType||t.toLowerCase()!==n.nodeName.toLowerCase()?null:n)&&(e.stateNode=n,ta=e,ra=di(n.firstChild),!0);case 6:return null!==(n=""===e.pendingProps||3!==n.nodeType?null:n)&&(e.stateNode=n,ta=e,ra=null,!0);case 13:return null!==(n=8!==n.nodeType?null:n)&&(t=null!==qi?{id:Zi,overflow:Qi}:null,e.memoizedState={dehydrated:n,treeContext:t,retryLane:1073741824},(t=Ld(18,null,null,0)).stateNode=n,t.return=e,e.child=t,ta=e,ra=null,!0);default:return!1}}function la(e){return 0!=(1&e.mode)&&0==(128&e.flags)}function da(e){if(ia){var n=ra;if(n){var t=n;if(!oa(e,n)){if(la(e))throw Error(a(418));n=di(t.nextSibling);var r=ta;n&&oa(e,n)?sa(r,t):(e.flags=-4097&e.flags|2,ia=!1,ta=e)}}else{if(la(e))throw Error(a(418));e.flags=-4097&e.flags|2,ia=!1,ta=e}}}function ca(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;ta=e}function ua(e){if(e!==ta)return!1;if(!ia)return ca(e),ia=!0,!1;var n;if((n=3!==e.tag)&&!(n=5!==e.tag)&&(n="head"!==(n=e.type)&&"body"!==n&&!ti(e.type,e.memoizedProps)),n&&(n=ra)){if(la(e))throw pa(),Error(a(418));for(;n;)sa(e,n),n=di(n.nextSibling)}if(ca(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(a(317));e:{for(e=e.nextSibling,n=0;e;){if(8===e.nodeType){var t=e.data;if("/$"===t){if(0===n){ra=di(e.nextSibling);break e}n--}else"$"!==t&&"$!"!==t&&"$?"!==t||n++}e=e.nextSibling}ra=null}}else ra=ta?di(e.stateNode.nextSibling):null;return!0}function pa(){for(var e=ra;e;)e=di(e.nextSibling)}function ma(){ra=ta=null,ia=!1}function ha(e){null===aa?aa=[e]:aa.push(e)}var fa=b.ReactCurrentBatchConfig;function ga(e,n){if(e&&e.defaultProps){for(var t in n=M({},n),e=e.defaultProps)void 0===n[t]&&(n[t]=e[t]);return n}return n}var Ca=Pi(null),Aa=null,va=null,ba=null;function ya(){ba=va=Aa=null}function wa(e){var n=Ca.current;Ei(Ca),e._currentValue=n}function Sa(e,n,t){for(;null!==e;){var r=e.alternate;if((e.childLanes&n)!==n?(e.childLanes|=n,null!==r&&(r.childLanes|=n)):null!==r&&(r.childLanes&n)!==n&&(r.childLanes|=n),e===t)break;e=e.return}}function Pa(e,n){Aa=e,ba=va=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&n)&&(bo=!0),e.firstContext=null)}function Ea(e){var n=e._currentValue;if(ba!==e)if(e={context:e,memoizedValue:n,next:null},null===va){if(null===Aa)throw Error(a(308));va=e,Aa.dependencies={lanes:0,firstContext:e}}else va=va.next=e;return n}var _a=null;function Da(e){null===_a?_a=[e]:_a.push(e)}function Ia(e,n,t,r){var i=n.interleaved;return null===i?(t.next=t,Da(n)):(t.next=i.next,i.next=t),n.interleaved=t,xa(e,r)}function xa(e,n){e.lanes|=n;var t=e.alternate;for(null!==t&&(t.lanes|=n),t=e,e=e.return;null!==e;)e.childLanes|=n,null!==(t=e.alternate)&&(t.childLanes|=n),t=e,e=e.return;return 3===t.tag?t.stateNode:null}var Oa=!1;function ka(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function La(e,n){e=e.updateQueue,n.updateQueue===e&&(n.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function Ua(e,n){return{eventTime:e,lane:n,tag:0,payload:null,callback:null,next:null}}function Ta(e,n,t){var r=e.updateQueue;if(null===r)return null;if(r=r.shared,0!=(2&xl)){var i=r.pending;return null===i?n.next=n:(n.next=i.next,i.next=n),r.pending=n,xa(e,t)}return null===(i=r.interleaved)?(n.next=n,Da(r)):(n.next=i.next,i.next=n),r.interleaved=n,xa(e,t)}function Ra(e,n,t){if(null!==(n=n.updateQueue)&&(n=n.shared,0!=(4194240&t))){var r=n.lanes;t|=r&=e.pendingLanes,n.lanes=t,vn(e,t)}}function Fa(e,n){var t=e.updateQueue,r=e.alternate;if(null!==r&&t===(r=r.updateQueue)){var i=null,a=null;if(null!==(t=t.firstBaseUpdate)){do{var s={eventTime:t.eventTime,lane:t.lane,tag:t.tag,payload:t.payload,callback:t.callback,next:null};null===a?i=a=s:a=a.next=s,t=t.next}while(null!==t);null===a?i=a=n:a=a.next=n}else i=a=n;return t={baseState:r.baseState,firstBaseUpdate:i,lastBaseUpdate:a,shared:r.shared,effects:r.effects},void(e.updateQueue=t)}null===(e=t.lastBaseUpdate)?t.firstBaseUpdate=n:e.next=n,t.lastBaseUpdate=n}function Ma(e,n,t,r){var i=e.updateQueue;Oa=!1;var a=i.firstBaseUpdate,s=i.lastBaseUpdate,o=i.shared.pending;if(null!==o){i.shared.pending=null;var l=o,d=l.next;l.next=null,null===s?a=d:s.next=d,s=l;var c=e.alternate;null!==c&&(o=(c=c.updateQueue).lastBaseUpdate)!==s&&(null===o?c.firstBaseUpdate=d:o.next=d,c.lastBaseUpdate=l)}if(null!==a){var u=i.baseState;for(s=0,c=d=l=null,o=a;;){var p=o.lane,m=o.eventTime;if((r&p)===p){null!==c&&(c=c.next={eventTime:m,lane:0,tag:o.tag,payload:o.payload,callback:o.callback,next:null});e:{var h=e,f=o;switch(p=n,m=t,f.tag){case 1:if("function"==typeof(h=f.payload)){u=h.call(m,u,p);break e}u=h;break e;case 3:h.flags=-65537&h.flags|128;case 0:if(null==(p="function"==typeof(h=f.payload)?h.call(m,u,p):h))break e;u=M({},u,p);break e;case 2:Oa=!0}}null!==o.callback&&0!==o.lane&&(e.flags|=64,null===(p=i.effects)?i.effects=[o]:p.push(o))}else m={eventTime:m,lane:p,tag:o.tag,payload:o.payload,callback:o.callback,next:null},null===c?(d=c=m,l=u):c=c.next=m,s|=p;if(null===(o=o.next)){if(null===(o=i.shared.pending))break;o=(p=o).next,p.next=null,i.lastBaseUpdate=p,i.shared.pending=null}}if(null===c&&(l=u),i.baseState=l,i.firstBaseUpdate=d,i.lastBaseUpdate=c,null!==(n=i.shared.interleaved)){i=n;do{s|=i.lane,i=i.next}while(i!==n)}else null===a&&(i.shared.lanes=0);Ml|=s,e.lanes=s,e.memoizedState=u}}function Na(e,n,t){if(e=n.effects,n.effects=null,null!==e)for(n=0;n<e.length;n++){var r=e[n],i=r.callback;if(null!==i){if(r.callback=null,r=t,"function"!=typeof i)throw Error(a(191,i));i.call(r)}}}var Wa=(new r.Component).refs;function ja(e,n,t,r){t=null==(t=t(r,n=e.memoizedState))?n:M({},n,t),e.memoizedState=t,0===e.lanes&&(e.updateQueue.baseState=t)}var Ba={isMounted:function(e){return!!(e=e._reactInternals)&&ze(e)===e},enqueueSetState:function(e,n,t){e=e._reactInternals;var r=nd(),i=td(e),a=Ua(r,i);a.payload=n,null!=t&&(a.callback=t),null!==(n=Ta(e,a,i))&&(rd(n,e,i,r),Ra(n,e,i))},enqueueReplaceState:function(e,n,t){e=e._reactInternals;var r=nd(),i=td(e),a=Ua(r,i);a.tag=1,a.payload=n,null!=t&&(a.callback=t),null!==(n=Ta(e,a,i))&&(rd(n,e,i,r),Ra(n,e,i))},enqueueForceUpdate:function(e,n){e=e._reactInternals;var t=nd(),r=td(e),i=Ua(t,r);i.tag=2,null!=n&&(i.callback=n),null!==(n=Ta(e,i,r))&&(rd(n,e,r,t),Ra(n,e,r))}};function za(e,n,t,r,i,a,s){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,a,s):!(n.prototype&&n.prototype.isPureReactComponent&&lr(t,r)&&lr(i,a))}function Va(e,n,t){var r=!1,i=Di,a=n.contextType;return"object"==typeof a&&null!==a?a=Ea(a):(i=Li(n)?Oi:Ii.current,a=(r=null!=(r=n.contextTypes))?ki(e,i):Di),n=new n(t,a),e.memoizedState=null!==n.state&&void 0!==n.state?n.state:null,n.updater=Ba,e.stateNode=n,n._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=i,e.__reactInternalMemoizedMaskedChildContext=a),n}function Ha(e,n,t,r){e=n.state,"function"==typeof n.componentWillReceiveProps&&n.componentWillReceiveProps(t,r),"function"==typeof n.UNSAFE_componentWillReceiveProps&&n.UNSAFE_componentWillReceiveProps(t,r),n.state!==e&&Ba.enqueueReplaceState(n,n.state,null)}function Ja(e,n,t,r){var i=e.stateNode;i.props=t,i.state=e.memoizedState,i.refs=Wa,ka(e);var a=n.contextType;"object"==typeof a&&null!==a?i.context=Ea(a):(a=Li(n)?Oi:Ii.current,i.context=ki(e,a)),i.state=e.memoizedState,"function"==typeof(a=n.getDerivedStateFromProps)&&(ja(e,n,a,t),i.state=e.memoizedState),"function"==typeof n.getDerivedStateFromProps||"function"==typeof i.getSnapshotBeforeUpdate||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||(n=i.state,"function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount(),n!==i.state&&Ba.enqueueReplaceState(i,i.state,null),Ma(e,t,i,r),i.state=e.memoizedState),"function"==typeof i.componentDidMount&&(e.flags|=4194308)}function Ga(e,n,t){if(null!==(e=t.ref)&&"function"!=typeof e&&"object"!=typeof e){if(t._owner){if(t=t._owner){if(1!==t.tag)throw Error(a(309));var r=t.stateNode}if(!r)throw Error(a(147,e));var i=r,s=""+e;return null!==n&&null!==n.ref&&"function"==typeof n.ref&&n.ref._stringRef===s?n.ref:(n=function(e){var n=i.refs;n===Wa&&(n=i.refs={}),null===e?delete n[s]:n[s]=e},n._stringRef=s,n)}if("string"!=typeof e)throw Error(a(284));if(!t._owner)throw Error(a(290,e))}return e}function $a(e,n){throw e=Object.prototype.toString.call(n),Error(a(31,"[object Object]"===e?"object with keys {"+Object.keys(n).join(", ")+"}":e))}function Ya(e){return(0,e._init)(e._payload)}function qa(e){function n(n,t){if(e){var r=n.deletions;null===r?(n.deletions=[t],n.flags|=16):r.push(t)}}function t(t,r){if(!e)return null;for(;null!==r;)n(t,r),r=r.sibling;return null}function r(e,n){for(e=new Map;null!==n;)null!==n.key?e.set(n.key,n):e.set(n.index,n),n=n.sibling;return e}function i(e,n){return(e=Td(e,n)).index=0,e.sibling=null,e}function s(n,t,r){return n.index=r,e?null!==(r=n.alternate)?(r=r.index)<t?(n.flags|=2,t):r:(n.flags|=2,t):(n.flags|=1048576,t)}function o(n){return e&&null===n.alternate&&(n.flags|=2),n}function l(e,n,t,r){return null===n||6!==n.tag?((n=Nd(t,e.mode,r)).return=e,n):((n=i(n,t)).return=e,n)}function d(e,n,t,r){var a=t.type;return a===S?u(e,n,t.props.children,r,t.key):null!==n&&(n.elementType===a||"object"==typeof a&&null!==a&&a.$$typeof===L&&Ya(a)===n.type)?((r=i(n,t.props)).ref=Ga(e,n,t),r.return=e,r):((r=Rd(t.type,t.key,t.props,null,e.mode,r)).ref=Ga(e,n,t),r.return=e,r)}function c(e,n,t,r){return null===n||4!==n.tag||n.stateNode.containerInfo!==t.containerInfo||n.stateNode.implementation!==t.implementation?((n=Wd(t,e.mode,r)).return=e,n):((n=i(n,t.children||[])).return=e,n)}function u(e,n,t,r,a){return null===n||7!==n.tag?((n=Fd(t,e.mode,r,a)).return=e,n):((n=i(n,t)).return=e,n)}function p(e,n,t){if("string"==typeof n&&""!==n||"number"==typeof n)return(n=Nd(""+n,e.mode,t)).return=e,n;if("object"==typeof n&&null!==n){switch(n.$$typeof){case y:return(t=Rd(n.type,n.key,n.props,null,e.mode,t)).ref=Ga(e,null,n),t.return=e,t;case w:return(n=Wd(n,e.mode,t)).return=e,n;case L:return p(e,(0,n._init)(n._payload),t)}if(ne(n)||R(n))return(n=Fd(n,e.mode,t,null)).return=e,n;$a(e,n)}return null}function m(e,n,t,r){var i=null!==n?n.key:null;if("string"==typeof t&&""!==t||"number"==typeof t)return null!==i?null:l(e,n,""+t,r);if("object"==typeof t&&null!==t){switch(t.$$typeof){case y:return t.key===i?d(e,n,t,r):null;case w:return t.key===i?c(e,n,t,r):null;case L:return m(e,n,(i=t._init)(t._payload),r)}if(ne(t)||R(t))return null!==i?null:u(e,n,t,r,null);$a(e,t)}return null}function h(e,n,t,r,i){if("string"==typeof r&&""!==r||"number"==typeof r)return l(n,e=e.get(t)||null,""+r,i);if("object"==typeof r&&null!==r){switch(r.$$typeof){case y:return d(n,e=e.get(null===r.key?t:r.key)||null,r,i);case w:return c(n,e=e.get(null===r.key?t:r.key)||null,r,i);case L:return h(e,n,t,(0,r._init)(r._payload),i)}if(ne(r)||R(r))return u(n,e=e.get(t)||null,r,i,null);$a(n,r)}return null}function f(i,a,o,l){for(var d=null,c=null,u=a,f=a=0,g=null;null!==u&&f<o.length;f++){u.index>f?(g=u,u=null):g=u.sibling;var C=m(i,u,o[f],l);if(null===C){null===u&&(u=g);break}e&&u&&null===C.alternate&&n(i,u),a=s(C,a,f),null===c?d=C:c.sibling=C,c=C,u=g}if(f===o.length)return t(i,u),ia&&Ki(i,f),d;if(null===u){for(;f<o.length;f++)null!==(u=p(i,o[f],l))&&(a=s(u,a,f),null===c?d=u:c.sibling=u,c=u);return ia&&Ki(i,f),d}for(u=r(i,u);f<o.length;f++)null!==(g=h(u,i,f,o[f],l))&&(e&&null!==g.alternate&&u.delete(null===g.key?f:g.key),a=s(g,a,f),null===c?d=g:c.sibling=g,c=g);return e&&u.forEach((function(e){return n(i,e)})),ia&&Ki(i,f),d}function g(i,o,l,d){var c=R(l);if("function"!=typeof c)throw Error(a(150));if(null==(l=c.call(l)))throw Error(a(151));for(var u=c=null,f=o,g=o=0,C=null,A=l.next();null!==f&&!A.done;g++,A=l.next()){f.index>g?(C=f,f=null):C=f.sibling;var v=m(i,f,A.value,d);if(null===v){null===f&&(f=C);break}e&&f&&null===v.alternate&&n(i,f),o=s(v,o,g),null===u?c=v:u.sibling=v,u=v,f=C}if(A.done)return t(i,f),ia&&Ki(i,g),c;if(null===f){for(;!A.done;g++,A=l.next())null!==(A=p(i,A.value,d))&&(o=s(A,o,g),null===u?c=A:u.sibling=A,u=A);return ia&&Ki(i,g),c}for(f=r(i,f);!A.done;g++,A=l.next())null!==(A=h(f,i,g,A.value,d))&&(e&&null!==A.alternate&&f.delete(null===A.key?g:A.key),o=s(A,o,g),null===u?c=A:u.sibling=A,u=A);return e&&f.forEach((function(e){return n(i,e)})),ia&&Ki(i,g),c}return function e(r,a,s,l){if("object"==typeof s&&null!==s&&s.type===S&&null===s.key&&(s=s.props.children),"object"==typeof s&&null!==s){switch(s.$$typeof){case y:e:{for(var d=s.key,c=a;null!==c;){if(c.key===d){if((d=s.type)===S){if(7===c.tag){t(r,c.sibling),(a=i(c,s.props.children)).return=r,r=a;break e}}else if(c.elementType===d||"object"==typeof d&&null!==d&&d.$$typeof===L&&Ya(d)===c.type){t(r,c.sibling),(a=i(c,s.props)).ref=Ga(r,c,s),a.return=r,r=a;break e}t(r,c);break}n(r,c),c=c.sibling}s.type===S?((a=Fd(s.props.children,r.mode,l,s.key)).return=r,r=a):((l=Rd(s.type,s.key,s.props,null,r.mode,l)).ref=Ga(r,a,s),l.return=r,r=l)}return o(r);case w:e:{for(c=s.key;null!==a;){if(a.key===c){if(4===a.tag&&a.stateNode.containerInfo===s.containerInfo&&a.stateNode.implementation===s.implementation){t(r,a.sibling),(a=i(a,s.children||[])).return=r,r=a;break e}t(r,a);break}n(r,a),a=a.sibling}(a=Wd(s,r.mode,l)).return=r,r=a}return o(r);case L:return e(r,a,(c=s._init)(s._payload),l)}if(ne(s))return f(r,a,s,l);if(R(s))return g(r,a,s,l);$a(r,s)}return"string"==typeof s&&""!==s||"number"==typeof s?(s=""+s,null!==a&&6===a.tag?(t(r,a.sibling),(a=i(a,s)).return=r,r=a):(t(r,a),(a=Nd(s,r.mode,l)).return=r,r=a),o(r)):t(r,a)}}var Za=qa(!0),Qa=qa(!1),Ka={},Xa=Pi(Ka),es=Pi(Ka),ns=Pi(Ka);function ts(e){if(e===Ka)throw Error(a(174));return e}function rs(e,n){switch(_i(ns,n),_i(es,e),_i(Xa,Ka),e=n.nodeType){case 9:case 11:n=(n=n.documentElement)?n.namespaceURI:le(null,"");break;default:n=le(n=(e=8===e?n.parentNode:n).namespaceURI||null,e=e.tagName)}Ei(Xa),_i(Xa,n)}function is(){Ei(Xa),Ei(es),Ei(ns)}function as(e){ts(ns.current);var n=ts(Xa.current),t=le(n,e.type);n!==t&&(_i(es,e),_i(Xa,t))}function ss(e){es.current===e&&(Ei(Xa),Ei(es))}var os=Pi(0);function ls(e){for(var n=e;null!==n;){if(13===n.tag){var t=n.memoizedState;if(null!==t&&(null===(t=t.dehydrated)||"$?"===t.data||"$!"===t.data))return n}else if(19===n.tag&&void 0!==n.memoizedProps.revealOrder){if(0!=(128&n.flags))return n}else if(null!==n.child){n.child.return=n,n=n.child;continue}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return null;n=n.return}n.sibling.return=n.return,n=n.sibling}return null}var ds=[];function cs(){for(var e=0;e<ds.length;e++)ds[e]._workInProgressVersionPrimary=null;ds.length=0}var us=b.ReactCurrentDispatcher,ps=b.ReactCurrentBatchConfig,ms=0,hs=null,fs=null,gs=null,Cs=!1,As=!1,vs=0,bs=0;function ys(){throw Error(a(321))}function ws(e,n){if(null===n)return!1;for(var t=0;t<n.length&&t<e.length;t++)if(!or(e[t],n[t]))return!1;return!0}function Ss(e,n,t,r,i,s){if(ms=s,hs=n,n.memoizedState=null,n.updateQueue=null,n.lanes=0,us.current=null===e||null===e.memoizedState?so:oo,e=t(r,i),As){s=0;do{if(As=!1,vs=0,25<=s)throw Error(a(301));s+=1,gs=fs=null,n.updateQueue=null,us.current=lo,e=t(r,i)}while(As)}if(us.current=ao,n=null!==fs&&null!==fs.next,ms=0,gs=fs=hs=null,Cs=!1,n)throw Error(a(300));return e}function Ps(){var e=0!==vs;return vs=0,e}function Es(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===gs?hs.memoizedState=gs=e:gs=gs.next=e,gs}function _s(){if(null===fs){var e=hs.alternate;e=null!==e?e.memoizedState:null}else e=fs.next;var n=null===gs?hs.memoizedState:gs.next;if(null!==n)gs=n,fs=e;else{if(null===e)throw Error(a(310));e={memoizedState:(fs=e).memoizedState,baseState:fs.baseState,baseQueue:fs.baseQueue,queue:fs.queue,next:null},null===gs?hs.memoizedState=gs=e:gs=gs.next=e}return gs}function Ds(e,n){return"function"==typeof n?n(e):n}function Is(e){var n=_s(),t=n.queue;if(null===t)throw Error(a(311));t.lastRenderedReducer=e;var r=fs,i=r.baseQueue,s=t.pending;if(null!==s){if(null!==i){var o=i.next;i.next=s.next,s.next=o}r.baseQueue=i=s,t.pending=null}if(null!==i){s=i.next,r=r.baseState;var l=o=null,d=null,c=s;do{var u=c.lane;if((ms&u)===u)null!==d&&(d=d.next={lane:0,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null}),r=c.hasEagerState?c.eagerState:e(r,c.action);else{var p={lane:u,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null};null===d?(l=d=p,o=r):d=d.next=p,hs.lanes|=u,Ml|=u}c=c.next}while(null!==c&&c!==s);null===d?o=r:d.next=l,or(r,n.memoizedState)||(bo=!0),n.memoizedState=r,n.baseState=o,n.baseQueue=d,t.lastRenderedState=r}if(null!==(e=t.interleaved)){i=e;do{s=i.lane,hs.lanes|=s,Ml|=s,i=i.next}while(i!==e)}else null===i&&(t.lanes=0);return[n.memoizedState,t.dispatch]}function xs(e){var n=_s(),t=n.queue;if(null===t)throw Error(a(311));t.lastRenderedReducer=e;var r=t.dispatch,i=t.pending,s=n.memoizedState;if(null!==i){t.pending=null;var o=i=i.next;do{s=e(s,o.action),o=o.next}while(o!==i);or(s,n.memoizedState)||(bo=!0),n.memoizedState=s,null===n.baseQueue&&(n.baseState=s),t.lastRenderedState=s}return[s,r]}function Os(){}function ks(e,n){var t=hs,r=_s(),i=n(),s=!or(r.memoizedState,i);if(s&&(r.memoizedState=i,bo=!0),r=r.queue,Vs(Ts.bind(null,t,r,e),[e]),r.getSnapshot!==n||s||null!==gs&&1&gs.memoizedState.tag){if(t.flags|=2048,Ns(9,Us.bind(null,t,r,i,n),void 0,null),null===Ol)throw Error(a(349));0!=(30&ms)||Ls(t,n,i)}return i}function Ls(e,n,t){e.flags|=16384,e={getSnapshot:n,value:t},null===(n=hs.updateQueue)?(n={lastEffect:null,stores:null},hs.updateQueue=n,n.stores=[e]):null===(t=n.stores)?n.stores=[e]:t.push(e)}function Us(e,n,t,r){n.value=t,n.getSnapshot=r,Rs(n)&&Fs(e)}function Ts(e,n,t){return t((function(){Rs(n)&&Fs(e)}))}function Rs(e){var n=e.getSnapshot;e=e.value;try{var t=n();return!or(e,t)}catch(e){return!0}}function Fs(e){var n=xa(e,1);null!==n&&rd(n,e,1,-1)}function Ms(e){var n=Es();return"function"==typeof e&&(e=e()),n.memoizedState=n.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:Ds,lastRenderedState:e},n.queue=e,e=e.dispatch=no.bind(null,hs,e),[n.memoizedState,e]}function Ns(e,n,t,r){return e={tag:e,create:n,destroy:t,deps:r,next:null},null===(n=hs.updateQueue)?(n={lastEffect:null,stores:null},hs.updateQueue=n,n.lastEffect=e.next=e):null===(t=n.lastEffect)?n.lastEffect=e.next=e:(r=t.next,t.next=e,e.next=r,n.lastEffect=e),e}function Ws(){return _s().memoizedState}function js(e,n,t,r){var i=Es();hs.flags|=e,i.memoizedState=Ns(1|n,t,void 0,void 0===r?null:r)}function Bs(e,n,t,r){var i=_s();r=void 0===r?null:r;var a=void 0;if(null!==fs){var s=fs.memoizedState;if(a=s.destroy,null!==r&&ws(r,s.deps))return void(i.memoizedState=Ns(n,t,a,r))}hs.flags|=e,i.memoizedState=Ns(1|n,t,a,r)}function zs(e,n){return js(8390656,8,e,n)}function Vs(e,n){return Bs(2048,8,e,n)}function Hs(e,n){return Bs(4,2,e,n)}function Js(e,n){return Bs(4,4,e,n)}function Gs(e,n){return"function"==typeof n?(e=e(),n(e),function(){n(null)}):null!=n?(e=e(),n.current=e,function(){n.current=null}):void 0}function $s(e,n,t){return t=null!=t?t.concat([e]):null,Bs(4,4,Gs.bind(null,n,e),t)}function Ys(){}function qs(e,n){var t=_s();n=void 0===n?null:n;var r=t.memoizedState;return null!==r&&null!==n&&ws(n,r[1])?r[0]:(t.memoizedState=[e,n],e)}function Zs(e,n){var t=_s();n=void 0===n?null:n;var r=t.memoizedState;return null!==r&&null!==n&&ws(n,r[1])?r[0]:(e=e(),t.memoizedState=[e,n],e)}function Qs(e,n,t){return 0==(21&ms)?(e.baseState&&(e.baseState=!1,bo=!0),e.memoizedState=t):(or(t,n)||(t=gn(),hs.lanes|=t,Ml|=t,e.baseState=!0),n)}function Ks(e,n){var t=bn;bn=0!==t&&4>t?t:4,e(!0);var r=ps.transition;ps.transition={};try{e(!1),n()}finally{bn=t,ps.transition=r}}function Xs(){return _s().memoizedState}function eo(e,n,t){var r=td(e);t={lane:r,action:t,hasEagerState:!1,eagerState:null,next:null},to(e)?ro(n,t):null!==(t=Ia(e,n,t,r))&&(rd(t,e,r,nd()),io(t,n,r))}function no(e,n,t){var r=td(e),i={lane:r,action:t,hasEagerState:!1,eagerState:null,next:null};if(to(e))ro(n,i);else{var a=e.alternate;if(0===e.lanes&&(null===a||0===a.lanes)&&null!==(a=n.lastRenderedReducer))try{var s=n.lastRenderedState,o=a(s,t);if(i.hasEagerState=!0,i.eagerState=o,or(o,s)){var l=n.interleaved;return null===l?(i.next=i,Da(n)):(i.next=l.next,l.next=i),void(n.interleaved=i)}}catch(e){}null!==(t=Ia(e,n,i,r))&&(rd(t,e,r,i=nd()),io(t,n,r))}}function to(e){var n=e.alternate;return e===hs||null!==n&&n===hs}function ro(e,n){As=Cs=!0;var t=e.pending;null===t?n.next=n:(n.next=t.next,t.next=n),e.pending=n}function io(e,n,t){if(0!=(4194240&t)){var r=n.lanes;t|=r&=e.pendingLanes,n.lanes=t,vn(e,t)}}var ao={readContext:Ea,useCallback:ys,useContext:ys,useEffect:ys,useImperativeHandle:ys,useInsertionEffect:ys,useLayoutEffect:ys,useMemo:ys,useReducer:ys,useRef:ys,useState:ys,useDebugValue:ys,useDeferredValue:ys,useTransition:ys,useMutableSource:ys,useSyncExternalStore:ys,useId:ys,unstable_isNewReconciler:!1},so={readContext:Ea,useCallback:function(e,n){return Es().memoizedState=[e,void 0===n?null:n],e},useContext:Ea,useEffect:zs,useImperativeHandle:function(e,n,t){return t=null!=t?t.concat([e]):null,js(4194308,4,Gs.bind(null,n,e),t)},useLayoutEffect:function(e,n){return js(4194308,4,e,n)},useInsertionEffect:function(e,n){return js(4,2,e,n)},useMemo:function(e,n){var t=Es();return n=void 0===n?null:n,e=e(),t.memoizedState=[e,n],e},useReducer:function(e,n,t){var r=Es();return n=void 0!==t?t(n):n,r.memoizedState=r.baseState=n,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:n},r.queue=e,e=e.dispatch=eo.bind(null,hs,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},Es().memoizedState=e},useState:Ms,useDebugValue:Ys,useDeferredValue:function(e){return Es().memoizedState=e},useTransition:function(){var e=Ms(!1),n=e[0];return e=Ks.bind(null,e[1]),Es().memoizedState=e,[n,e]},useMutableSource:function(){},useSyncExternalStore:function(e,n,t){var r=hs,i=Es();if(ia){if(void 0===t)throw Error(a(407));t=t()}else{if(t=n(),null===Ol)throw Error(a(349));0!=(30&ms)||Ls(r,n,t)}i.memoizedState=t;var s={value:t,getSnapshot:n};return i.queue=s,zs(Ts.bind(null,r,s,e),[e]),r.flags|=2048,Ns(9,Us.bind(null,r,s,t,n),void 0,null),t},useId:function(){var e=Es(),n=Ol.identifierPrefix;if(ia){var t=Qi;n=":"+n+"R"+(t=(Zi&~(1<<32-on(Zi)-1)).toString(32)+t),0<(t=vs++)&&(n+="H"+t.toString(32)),n+=":"}else n=":"+n+"r"+(t=bs++).toString(32)+":";return e.memoizedState=n},unstable_isNewReconciler:!1},oo={readContext:Ea,useCallback:qs,useContext:Ea,useEffect:Vs,useImperativeHandle:$s,useInsertionEffect:Hs,useLayoutEffect:Js,useMemo:Zs,useReducer:Is,useRef:Ws,useState:function(){return Is(Ds)},useDebugValue:Ys,useDeferredValue:function(e){return Qs(_s(),fs.memoizedState,e)},useTransition:function(){return[Is(Ds)[0],_s().memoizedState]},useMutableSource:Os,useSyncExternalStore:ks,useId:Xs,unstable_isNewReconciler:!1},lo={readContext:Ea,useCallback:qs,useContext:Ea,useEffect:Vs,useImperativeHandle:$s,useInsertionEffect:Hs,useLayoutEffect:Js,useMemo:Zs,useReducer:xs,useRef:Ws,useState:function(){return xs(Ds)},useDebugValue:Ys,useDeferredValue:function(e){var n=_s();return null===fs?n.memoizedState=e:Qs(n,fs.memoizedState,e)},useTransition:function(){return[xs(Ds)[0],_s().memoizedState]},useMutableSource:Os,useSyncExternalStore:ks,useId:Xs,unstable_isNewReconciler:!1};function co(e,n){try{var t="",r=n;do{t+=B(r),r=r.return}while(r);var i=t}catch(e){i="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:n,stack:i,digest:null}}function uo(e,n,t){return{value:e,source:null,stack:null!=t?t:null,digest:null!=n?n:null}}function po(e,n){try{console.error(n.value)}catch(e){setTimeout((function(){throw e}))}}var mo="function"==typeof WeakMap?WeakMap:Map;function ho(e,n,t){(t=Ua(-1,t)).tag=3,t.payload={element:null};var r=n.value;return t.callback=function(){Jl||(Jl=!0,Gl=r),po(0,n)},t}function fo(e,n,t){(t=Ua(-1,t)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var i=n.value;t.payload=function(){return r(i)},t.callback=function(){po(0,n)}}var a=e.stateNode;return null!==a&&"function"==typeof a.componentDidCatch&&(t.callback=function(){po(0,n),"function"!=typeof r&&(null===$l?$l=new Set([this]):$l.add(this));var e=n.stack;this.componentDidCatch(n.value,{componentStack:null!==e?e:""})}),t}function go(e,n,t){var r=e.pingCache;if(null===r){r=e.pingCache=new mo;var i=new Set;r.set(n,i)}else void 0===(i=r.get(n))&&(i=new Set,r.set(n,i));i.has(t)||(i.add(t),e=_d.bind(null,e,n,t),n.then(e,e))}function Co(e){do{var n;if((n=13===e.tag)&&(n=null===(n=e.memoizedState)||null!==n.dehydrated),n)return e;e=e.return}while(null!==e);return null}function Ao(e,n,t,r,i){return 0==(1&e.mode)?(e===n?e.flags|=65536:(e.flags|=128,t.flags|=131072,t.flags&=-52805,1===t.tag&&(null===t.alternate?t.tag=17:((n=Ua(-1,1)).tag=2,Ta(t,n,1))),t.lanes|=1),e):(e.flags|=65536,e.lanes=i,e)}var vo=b.ReactCurrentOwner,bo=!1;function yo(e,n,t,r){n.child=null===e?Qa(n,null,t,r):Za(n,e.child,t,r)}function wo(e,n,t,r,i){t=t.render;var a=n.ref;return Pa(n,i),r=Ss(e,n,t,r,a,i),t=Ps(),null===e||bo?(ia&&t&&ea(n),n.flags|=1,yo(e,n,r,i),n.child):(n.updateQueue=e.updateQueue,n.flags&=-2053,e.lanes&=~i,Jo(e,n,i))}function So(e,n,t,r,i){if(null===e){var a=t.type;return"function"!=typeof a||Ud(a)||void 0!==a.defaultProps||null!==t.compare||void 0!==t.defaultProps?((e=Rd(t.type,null,r,n,n.mode,i)).ref=n.ref,e.return=n,n.child=e):(n.tag=15,n.type=a,Po(e,n,a,r,i))}if(a=e.child,0==(e.lanes&i)){var s=a.memoizedProps;if((t=null!==(t=t.compare)?t:lr)(s,r)&&e.ref===n.ref)return Jo(e,n,i)}return n.flags|=1,(e=Td(a,r)).ref=n.ref,e.return=n,n.child=e}function Po(e,n,t,r,i){if(null!==e){var a=e.memoizedProps;if(lr(a,r)&&e.ref===n.ref){if(bo=!1,n.pendingProps=r=a,0==(e.lanes&i))return n.lanes=e.lanes,Jo(e,n,i);0!=(131072&e.flags)&&(bo=!0)}}return Do(e,n,t,r,i)}function Eo(e,n,t){var r=n.pendingProps,i=r.children,a=null!==e?e.memoizedState:null;if("hidden"===r.mode)if(0==(1&n.mode))n.memoizedState={baseLanes:0,cachePool:null,transitions:null},_i(Tl,Ul),Ul|=t;else{if(0==(1073741824&t))return e=null!==a?a.baseLanes|t:t,n.lanes=n.childLanes=1073741824,n.memoizedState={baseLanes:e,cachePool:null,transitions:null},n.updateQueue=null,_i(Tl,Ul),Ul|=e,null;n.memoizedState={baseLanes:0,cachePool:null,transitions:null},r=null!==a?a.baseLanes:t,_i(Tl,Ul),Ul|=r}else null!==a?(r=a.baseLanes|t,n.memoizedState=null):r=t,_i(Tl,Ul),Ul|=r;return yo(e,n,i,t),n.child}function _o(e,n){var t=n.ref;(null===e&&null!==t||null!==e&&e.ref!==t)&&(n.flags|=512,n.flags|=2097152)}function Do(e,n,t,r,i){var a=Li(t)?Oi:Ii.current;return a=ki(n,a),Pa(n,i),t=Ss(e,n,t,r,a,i),r=Ps(),null===e||bo?(ia&&r&&ea(n),n.flags|=1,yo(e,n,t,i),n.child):(n.updateQueue=e.updateQueue,n.flags&=-2053,e.lanes&=~i,Jo(e,n,i))}function Io(e,n,t,r,i){if(Li(t)){var a=!0;Fi(n)}else a=!1;if(Pa(n,i),null===n.stateNode)Ho(e,n),Va(n,t,r),Ja(n,t,r,i),r=!0;else if(null===e){var s=n.stateNode,o=n.memoizedProps;s.props=o;var l=s.context,d=t.contextType;d="object"==typeof d&&null!==d?Ea(d):ki(n,d=Li(t)?Oi:Ii.current);var c=t.getDerivedStateFromProps,u="function"==typeof c||"function"==typeof s.getSnapshotBeforeUpdate;u||"function"!=typeof s.UNSAFE_componentWillReceiveProps&&"function"!=typeof s.componentWillReceiveProps||(o!==r||l!==d)&&Ha(n,s,r,d),Oa=!1;var p=n.memoizedState;s.state=p,Ma(n,r,s,i),l=n.memoizedState,o!==r||p!==l||xi.current||Oa?("function"==typeof c&&(ja(n,t,c,r),l=n.memoizedState),(o=Oa||za(n,t,o,r,p,l,d))?(u||"function"!=typeof s.UNSAFE_componentWillMount&&"function"!=typeof s.componentWillMount||("function"==typeof s.componentWillMount&&s.componentWillMount(),"function"==typeof s.UNSAFE_componentWillMount&&s.UNSAFE_componentWillMount()),"function"==typeof s.componentDidMount&&(n.flags|=4194308)):("function"==typeof s.componentDidMount&&(n.flags|=4194308),n.memoizedProps=r,n.memoizedState=l),s.props=r,s.state=l,s.context=d,r=o):("function"==typeof s.componentDidMount&&(n.flags|=4194308),r=!1)}else{s=n.stateNode,La(e,n),o=n.memoizedProps,d=n.type===n.elementType?o:ga(n.type,o),s.props=d,u=n.pendingProps,p=s.context,l="object"==typeof(l=t.contextType)&&null!==l?Ea(l):ki(n,l=Li(t)?Oi:Ii.current);var m=t.getDerivedStateFromProps;(c="function"==typeof m||"function"==typeof s.getSnapshotBeforeUpdate)||"function"!=typeof s.UNSAFE_componentWillReceiveProps&&"function"!=typeof s.componentWillReceiveProps||(o!==u||p!==l)&&Ha(n,s,r,l),Oa=!1,p=n.memoizedState,s.state=p,Ma(n,r,s,i);var h=n.memoizedState;o!==u||p!==h||xi.current||Oa?("function"==typeof m&&(ja(n,t,m,r),h=n.memoizedState),(d=Oa||za(n,t,d,r,p,h,l)||!1)?(c||"function"!=typeof s.UNSAFE_componentWillUpdate&&"function"!=typeof s.componentWillUpdate||("function"==typeof s.componentWillUpdate&&s.componentWillUpdate(r,h,l),"function"==typeof s.UNSAFE_componentWillUpdate&&s.UNSAFE_componentWillUpdate(r,h,l)),"function"==typeof s.componentDidUpdate&&(n.flags|=4),"function"==typeof s.getSnapshotBeforeUpdate&&(n.flags|=1024)):("function"!=typeof s.componentDidUpdate||o===e.memoizedProps&&p===e.memoizedState||(n.flags|=4),"function"!=typeof s.getSnapshotBeforeUpdate||o===e.memoizedProps&&p===e.memoizedState||(n.flags|=1024),n.memoizedProps=r,n.memoizedState=h),s.props=r,s.state=h,s.context=l,r=d):("function"!=typeof s.componentDidUpdate||o===e.memoizedProps&&p===e.memoizedState||(n.flags|=4),"function"!=typeof s.getSnapshotBeforeUpdate||o===e.memoizedProps&&p===e.memoizedState||(n.flags|=1024),r=!1)}return xo(e,n,t,r,a,i)}function xo(e,n,t,r,i,a){_o(e,n);var s=0!=(128&n.flags);if(!r&&!s)return i&&Mi(n,t,!1),Jo(e,n,a);r=n.stateNode,vo.current=n;var o=s&&"function"!=typeof t.getDerivedStateFromError?null:r.render();return n.flags|=1,null!==e&&s?(n.child=Za(n,e.child,null,a),n.child=Za(n,null,o,a)):yo(e,n,o,a),n.memoizedState=r.state,i&&Mi(n,t,!0),n.child}function Oo(e){var n=e.stateNode;n.pendingContext?Ti(0,n.pendingContext,n.pendingContext!==n.context):n.context&&Ti(0,n.context,!1),rs(e,n.containerInfo)}function ko(e,n,t,r,i){return ma(),ha(i),n.flags|=256,yo(e,n,t,r),n.child}var Lo,Uo,To,Ro,Fo={dehydrated:null,treeContext:null,retryLane:0};function Mo(e){return{baseLanes:e,cachePool:null,transitions:null}}function No(e,n,t){var r,i=n.pendingProps,s=os.current,o=!1,l=0!=(128&n.flags);if((r=l)||(r=(null===e||null!==e.memoizedState)&&0!=(2&s)),r?(o=!0,n.flags&=-129):null!==e&&null===e.memoizedState||(s|=1),_i(os,1&s),null===e)return da(n),null!==(e=n.memoizedState)&&null!==(e=e.dehydrated)?(0==(1&n.mode)?n.lanes=1:"$!"===e.data?n.lanes=8:n.lanes=1073741824,null):(l=i.children,e=i.fallback,o?(i=n.mode,o=n.child,l={mode:"hidden",children:l},0==(1&i)&&null!==o?(o.childLanes=0,o.pendingProps=l):o=Md(l,i,0,null),e=Fd(e,i,t,null),o.return=n,e.return=n,o.sibling=e,n.child=o,n.child.memoizedState=Mo(t),n.memoizedState=Fo,e):Wo(n,l));if(null!==(s=e.memoizedState)&&null!==(r=s.dehydrated))return function(e,n,t,r,i,s,o){if(t)return 256&n.flags?(n.flags&=-257,jo(e,n,o,r=uo(Error(a(422))))):null!==n.memoizedState?(n.child=e.child,n.flags|=128,null):(s=r.fallback,i=n.mode,r=Md({mode:"visible",children:r.children},i,0,null),(s=Fd(s,i,o,null)).flags|=2,r.return=n,s.return=n,r.sibling=s,n.child=r,0!=(1&n.mode)&&Za(n,e.child,null,o),n.child.memoizedState=Mo(o),n.memoizedState=Fo,s);if(0==(1&n.mode))return jo(e,n,o,null);if("$!"===i.data){if(r=i.nextSibling&&i.nextSibling.dataset)var l=r.dgst;return r=l,jo(e,n,o,r=uo(s=Error(a(419)),r,void 0))}if(l=0!=(o&e.childLanes),bo||l){if(null!==(r=Ol)){switch(o&-o){case 4:i=2;break;case 16:i=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:i=32;break;case 536870912:i=268435456;break;default:i=0}0!==(i=0!=(i&(r.suspendedLanes|o))?0:i)&&i!==s.retryLane&&(s.retryLane=i,xa(e,i),rd(r,e,i,-1))}return gd(),jo(e,n,o,r=uo(Error(a(421))))}return"$?"===i.data?(n.flags|=128,n.child=e.child,n=Id.bind(null,e),i._reactRetry=n,null):(e=s.treeContext,ra=di(i.nextSibling),ta=n,ia=!0,aa=null,null!==e&&($i[Yi++]=Zi,$i[Yi++]=Qi,$i[Yi++]=qi,Zi=e.id,Qi=e.overflow,qi=n),(n=Wo(n,r.children)).flags|=4096,n)}(e,n,l,i,r,s,t);if(o){o=i.fallback,l=n.mode,r=(s=e.child).sibling;var d={mode:"hidden",children:i.children};return 0==(1&l)&&n.child!==s?((i=n.child).childLanes=0,i.pendingProps=d,n.deletions=null):(i=Td(s,d)).subtreeFlags=14680064&s.subtreeFlags,null!==r?o=Td(r,o):(o=Fd(o,l,t,null)).flags|=2,o.return=n,i.return=n,i.sibling=o,n.child=i,i=o,o=n.child,l=null===(l=e.child.memoizedState)?Mo(t):{baseLanes:l.baseLanes|t,cachePool:null,transitions:l.transitions},o.memoizedState=l,o.childLanes=e.childLanes&~t,n.memoizedState=Fo,i}return e=(o=e.child).sibling,i=Td(o,{mode:"visible",children:i.children}),0==(1&n.mode)&&(i.lanes=t),i.return=n,i.sibling=null,null!==e&&(null===(t=n.deletions)?(n.deletions=[e],n.flags|=16):t.push(e)),n.child=i,n.memoizedState=null,i}function Wo(e,n){return(n=Md({mode:"visible",children:n},e.mode,0,null)).return=e,e.child=n}function jo(e,n,t,r){return null!==r&&ha(r),Za(n,e.child,null,t),(e=Wo(n,n.pendingProps.children)).flags|=2,n.memoizedState=null,e}function Bo(e,n,t){e.lanes|=n;var r=e.alternate;null!==r&&(r.lanes|=n),Sa(e.return,n,t)}function zo(e,n,t,r,i){var a=e.memoizedState;null===a?e.memoizedState={isBackwards:n,rendering:null,renderingStartTime:0,last:r,tail:t,tailMode:i}:(a.isBackwards=n,a.rendering=null,a.renderingStartTime=0,a.last=r,a.tail=t,a.tailMode=i)}function Vo(e,n,t){var r=n.pendingProps,i=r.revealOrder,a=r.tail;if(yo(e,n,r.children,t),0!=(2&(r=os.current)))r=1&r|2,n.flags|=128;else{if(null!==e&&0!=(128&e.flags))e:for(e=n.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Bo(e,t,n);else if(19===e.tag)Bo(e,t,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===n)break e;for(;null===e.sibling;){if(null===e.return||e.return===n)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(_i(os,r),0==(1&n.mode))n.memoizedState=null;else switch(i){case"forwards":for(t=n.child,i=null;null!==t;)null!==(e=t.alternate)&&null===ls(e)&&(i=t),t=t.sibling;null===(t=i)?(i=n.child,n.child=null):(i=t.sibling,t.sibling=null),zo(n,!1,i,t,a);break;case"backwards":for(t=null,i=n.child,n.child=null;null!==i;){if(null!==(e=i.alternate)&&null===ls(e)){n.child=i;break}e=i.sibling,i.sibling=t,t=i,i=e}zo(n,!0,t,null,a);break;case"together":zo(n,!1,null,null,void 0);break;default:n.memoizedState=null}return n.child}function Ho(e,n){0==(1&n.mode)&&null!==e&&(e.alternate=null,n.alternate=null,n.flags|=2)}function Jo(e,n,t){if(null!==e&&(n.dependencies=e.dependencies),Ml|=n.lanes,0==(t&n.childLanes))return null;if(null!==e&&n.child!==e.child)throw Error(a(153));if(null!==n.child){for(t=Td(e=n.child,e.pendingProps),n.child=t,t.return=n;null!==e.sibling;)e=e.sibling,(t=t.sibling=Td(e,e.pendingProps)).return=n;t.sibling=null}return n.child}function Go(e,n){if(!ia)switch(e.tailMode){case"hidden":n=e.tail;for(var t=null;null!==n;)null!==n.alternate&&(t=n),n=n.sibling;null===t?e.tail=null:t.sibling=null;break;case"collapsed":t=e.tail;for(var r=null;null!==t;)null!==t.alternate&&(r=t),t=t.sibling;null===r?n||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function $o(e){var n=null!==e.alternate&&e.alternate.child===e.child,t=0,r=0;if(n)for(var i=e.child;null!==i;)t|=i.lanes|i.childLanes,r|=14680064&i.subtreeFlags,r|=14680064&i.flags,i.return=e,i=i.sibling;else for(i=e.child;null!==i;)t|=i.lanes|i.childLanes,r|=i.subtreeFlags,r|=i.flags,i.return=e,i=i.sibling;return e.subtreeFlags|=r,e.childLanes=t,n}function Yo(e,n,t){var r=n.pendingProps;switch(na(n),n.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return $o(n),null;case 1:case 17:return Li(n.type)&&Ui(),$o(n),null;case 3:return r=n.stateNode,is(),Ei(xi),Ei(Ii),cs(),r.pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(ua(n)?n.flags|=4:null===e||e.memoizedState.isDehydrated&&0==(256&n.flags)||(n.flags|=1024,null!==aa&&(od(aa),aa=null))),Uo(e,n),$o(n),null;case 5:ss(n);var i=ts(ns.current);if(t=n.type,null!==e&&null!=n.stateNode)To(e,n,t,r,i),e.ref!==n.ref&&(n.flags|=512,n.flags|=2097152);else{if(!r){if(null===n.stateNode)throw Error(a(166));return $o(n),null}if(e=ts(Xa.current),ua(n)){r=n.stateNode,t=n.type;var s=n.memoizedProps;switch(r[pi]=n,r[mi]=s,e=0!=(1&n.mode),t){case"dialog":Wr("cancel",r),Wr("close",r);break;case"iframe":case"object":case"embed":Wr("load",r);break;case"video":case"audio":for(i=0;i<Rr.length;i++)Wr(Rr[i],r);break;case"source":Wr("error",r);break;case"img":case"image":case"link":Wr("error",r),Wr("load",r);break;case"details":Wr("toggle",r);break;case"input":Z(r,s),Wr("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!s.multiple},Wr("invalid",r);break;case"textarea":ie(r,s),Wr("invalid",r)}for(var l in Ae(t,s),i=null,s)if(s.hasOwnProperty(l)){var d=s[l];"children"===l?"string"==typeof d?r.textContent!==d&&(!0!==s.suppressHydrationWarning&&Kr(r.textContent,d,e),i=["children",d]):"number"==typeof d&&r.textContent!==""+d&&(!0!==s.suppressHydrationWarning&&Kr(r.textContent,d,e),i=["children",""+d]):o.hasOwnProperty(l)&&null!=d&&"onScroll"===l&&Wr("scroll",r)}switch(t){case"input":G(r),X(r,s,!0);break;case"textarea":G(r),se(r);break;case"select":case"option":break;default:"function"==typeof s.onClick&&(r.onclick=Xr)}r=i,n.updateQueue=r,null!==r&&(n.flags|=4)}else{l=9===i.nodeType?i:i.ownerDocument,"http://www.w3.org/1999/xhtml"===e&&(e=oe(t)),"http://www.w3.org/1999/xhtml"===e?"script"===t?((e=l.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=l.createElement(t,{is:r.is}):(e=l.createElement(t),"select"===t&&(l=e,r.multiple?l.multiple=!0:r.size&&(l.size=r.size))):e=l.createElementNS(e,t),e[pi]=n,e[mi]=r,Lo(e,n,!1,!1),n.stateNode=e;e:{switch(l=ve(t,r),t){case"dialog":Wr("cancel",e),Wr("close",e),i=r;break;case"iframe":case"object":case"embed":Wr("load",e),i=r;break;case"video":case"audio":for(i=0;i<Rr.length;i++)Wr(Rr[i],e);i=r;break;case"source":Wr("error",e),i=r;break;case"img":case"image":case"link":Wr("error",e),Wr("load",e),i=r;break;case"details":Wr("toggle",e),i=r;break;case"input":Z(e,r),i=q(e,r),Wr("invalid",e);break;case"option":default:i=r;break;case"select":e._wrapperState={wasMultiple:!!r.multiple},i=M({},r,{value:void 0}),Wr("invalid",e);break;case"textarea":ie(e,r),i=re(e,r),Wr("invalid",e)}for(s in Ae(t,i),d=i)if(d.hasOwnProperty(s)){var c=d[s];"style"===s?ge(e,c):"dangerouslySetInnerHTML"===s?null!=(c=c?c.__html:void 0)&&ue(e,c):"children"===s?"string"==typeof c?("textarea"!==t||""!==c)&&pe(e,c):"number"==typeof c&&pe(e,""+c):"suppressContentEditableWarning"!==s&&"suppressHydrationWarning"!==s&&"autoFocus"!==s&&(o.hasOwnProperty(s)?null!=c&&"onScroll"===s&&Wr("scroll",e):null!=c&&v(e,s,c,l))}switch(t){case"input":G(e),X(e,r,!1);break;case"textarea":G(e),se(e);break;case"option":null!=r.value&&e.setAttribute("value",""+H(r.value));break;case"select":e.multiple=!!r.multiple,null!=(s=r.value)?te(e,!!r.multiple,s,!1):null!=r.defaultValue&&te(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof i.onClick&&(e.onclick=Xr)}switch(t){case"button":case"input":case"select":case"textarea":r=!!r.autoFocus;break e;case"img":r=!0;break e;default:r=!1}}r&&(n.flags|=4)}null!==n.ref&&(n.flags|=512,n.flags|=2097152)}return $o(n),null;case 6:if(e&&null!=n.stateNode)Ro(e,n,e.memoizedProps,r);else{if("string"!=typeof r&&null===n.stateNode)throw Error(a(166));if(t=ts(ns.current),ts(Xa.current),ua(n)){if(r=n.stateNode,t=n.memoizedProps,r[pi]=n,(s=r.nodeValue!==t)&&null!==(e=ta))switch(e.tag){case 3:Kr(r.nodeValue,t,0!=(1&e.mode));break;case 5:!0!==e.memoizedProps.suppressHydrationWarning&&Kr(r.nodeValue,t,0!=(1&e.mode))}s&&(n.flags|=4)}else(r=(9===t.nodeType?t:t.ownerDocument).createTextNode(r))[pi]=n,n.stateNode=r}return $o(n),null;case 13:if(Ei(os),r=n.memoizedState,null===e||null!==e.memoizedState&&null!==e.memoizedState.dehydrated){if(ia&&null!==ra&&0!=(1&n.mode)&&0==(128&n.flags))pa(),ma(),n.flags|=98560,s=!1;else if(s=ua(n),null!==r&&null!==r.dehydrated){if(null===e){if(!s)throw Error(a(318));if(!(s=null!==(s=n.memoizedState)?s.dehydrated:null))throw Error(a(317));s[pi]=n}else ma(),0==(128&n.flags)&&(n.memoizedState=null),n.flags|=4;$o(n),s=!1}else null!==aa&&(od(aa),aa=null),s=!0;if(!s)return 65536&n.flags?n:null}return 0!=(128&n.flags)?(n.lanes=t,n):((r=null!==r)!=(null!==e&&null!==e.memoizedState)&&r&&(n.child.flags|=8192,0!=(1&n.mode)&&(null===e||0!=(1&os.current)?0===Rl&&(Rl=3):gd())),null!==n.updateQueue&&(n.flags|=4),$o(n),null);case 4:return is(),Uo(e,n),null===e&&zr(n.stateNode.containerInfo),$o(n),null;case 10:return wa(n.type._context),$o(n),null;case 19:if(Ei(os),null===(s=n.memoizedState))return $o(n),null;if(r=0!=(128&n.flags),null===(l=s.rendering))if(r)Go(s,!1);else{if(0!==Rl||null!==e&&0!=(128&e.flags))for(e=n.child;null!==e;){if(null!==(l=ls(e))){for(n.flags|=128,Go(s,!1),null!==(r=l.updateQueue)&&(n.updateQueue=r,n.flags|=4),n.subtreeFlags=0,r=t,t=n.child;null!==t;)e=r,(s=t).flags&=14680066,null===(l=s.alternate)?(s.childLanes=0,s.lanes=e,s.child=null,s.subtreeFlags=0,s.memoizedProps=null,s.memoizedState=null,s.updateQueue=null,s.dependencies=null,s.stateNode=null):(s.childLanes=l.childLanes,s.lanes=l.lanes,s.child=l.child,s.subtreeFlags=0,s.deletions=null,s.memoizedProps=l.memoizedProps,s.memoizedState=l.memoizedState,s.updateQueue=l.updateQueue,s.type=l.type,e=l.dependencies,s.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),t=t.sibling;return _i(os,1&os.current|2),n.child}e=e.sibling}null!==s.tail&&Qe()>Vl&&(n.flags|=128,r=!0,Go(s,!1),n.lanes=4194304)}else{if(!r)if(null!==(e=ls(l))){if(n.flags|=128,r=!0,null!==(t=e.updateQueue)&&(n.updateQueue=t,n.flags|=4),Go(s,!0),null===s.tail&&"hidden"===s.tailMode&&!l.alternate&&!ia)return $o(n),null}else 2*Qe()-s.renderingStartTime>Vl&&1073741824!==t&&(n.flags|=128,r=!0,Go(s,!1),n.lanes=4194304);s.isBackwards?(l.sibling=n.child,n.child=l):(null!==(t=s.last)?t.sibling=l:n.child=l,s.last=l)}return null!==s.tail?(n=s.tail,s.rendering=n,s.tail=n.sibling,s.renderingStartTime=Qe(),n.sibling=null,t=os.current,_i(os,r?1&t|2:1&t),n):($o(n),null);case 22:case 23:return pd(),r=null!==n.memoizedState,null!==e&&null!==e.memoizedState!==r&&(n.flags|=8192),r&&0!=(1&n.mode)?0!=(1073741824&Ul)&&($o(n),6&n.subtreeFlags&&(n.flags|=8192)):$o(n),null;case 24:case 25:return null}throw Error(a(156,n.tag))}function qo(e,n){switch(na(n),n.tag){case 1:return Li(n.type)&&Ui(),65536&(e=n.flags)?(n.flags=-65537&e|128,n):null;case 3:return is(),Ei(xi),Ei(Ii),cs(),0!=(65536&(e=n.flags))&&0==(128&e)?(n.flags=-65537&e|128,n):null;case 5:return ss(n),null;case 13:if(Ei(os),null!==(e=n.memoizedState)&&null!==e.dehydrated){if(null===n.alternate)throw Error(a(340));ma()}return 65536&(e=n.flags)?(n.flags=-65537&e|128,n):null;case 19:return Ei(os),null;case 4:return is(),null;case 10:return wa(n.type._context),null;case 22:case 23:return pd(),null;default:return null}}Lo=function(e,n){for(var t=n.child;null!==t;){if(5===t.tag||6===t.tag)e.appendChild(t.stateNode);else if(4!==t.tag&&null!==t.child){t.child.return=t,t=t.child;continue}if(t===n)break;for(;null===t.sibling;){if(null===t.return||t.return===n)return;t=t.return}t.sibling.return=t.return,t=t.sibling}},Uo=function(){},To=function(e,n,t,r){var i=e.memoizedProps;if(i!==r){e=n.stateNode,ts(Xa.current);var a,s=null;switch(t){case"input":i=q(e,i),r=q(e,r),s=[];break;case"select":i=M({},i,{value:void 0}),r=M({},r,{value:void 0}),s=[];break;case"textarea":i=re(e,i),r=re(e,r),s=[];break;default:"function"!=typeof i.onClick&&"function"==typeof r.onClick&&(e.onclick=Xr)}for(c in Ae(t,r),t=null,i)if(!r.hasOwnProperty(c)&&i.hasOwnProperty(c)&&null!=i[c])if("style"===c){var l=i[c];for(a in l)l.hasOwnProperty(a)&&(t||(t={}),t[a]="")}else"dangerouslySetInnerHTML"!==c&&"children"!==c&&"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&"autoFocus"!==c&&(o.hasOwnProperty(c)?s||(s=[]):(s=s||[]).push(c,null));for(c in r){var d=r[c];if(l=null!=i?i[c]:void 0,r.hasOwnProperty(c)&&d!==l&&(null!=d||null!=l))if("style"===c)if(l){for(a in l)!l.hasOwnProperty(a)||d&&d.hasOwnProperty(a)||(t||(t={}),t[a]="");for(a in d)d.hasOwnProperty(a)&&l[a]!==d[a]&&(t||(t={}),t[a]=d[a])}else t||(s||(s=[]),s.push(c,t)),t=d;else"dangerouslySetInnerHTML"===c?(d=d?d.__html:void 0,l=l?l.__html:void 0,null!=d&&l!==d&&(s=s||[]).push(c,d)):"children"===c?"string"!=typeof d&&"number"!=typeof d||(s=s||[]).push(c,""+d):"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&(o.hasOwnProperty(c)?(null!=d&&"onScroll"===c&&Wr("scroll",e),s||l===d||(s=[])):(s=s||[]).push(c,d))}t&&(s=s||[]).push("style",t);var c=s;(n.updateQueue=c)&&(n.flags|=4)}},Ro=function(e,n,t,r){t!==r&&(n.flags|=4)};var Zo=!1,Qo=!1,Ko="function"==typeof WeakSet?WeakSet:Set,Xo=null;function el(e,n){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){Ed(e,n,t)}else t.current=null}function nl(e,n,t){try{t()}catch(t){Ed(e,n,t)}}var tl=!1;function rl(e,n,t){var r=n.updateQueue;if(null!==(r=null!==r?r.lastEffect:null)){var i=r=r.next;do{if((i.tag&e)===e){var a=i.destroy;i.destroy=void 0,void 0!==a&&nl(n,t,a)}i=i.next}while(i!==r)}}function il(e,n){if(null!==(n=null!==(n=n.updateQueue)?n.lastEffect:null)){var t=n=n.next;do{if((t.tag&e)===e){var r=t.create;t.destroy=r()}t=t.next}while(t!==n)}}function al(e){var n=e.ref;if(null!==n){var t=e.stateNode;e.tag,e=t,"function"==typeof n?n(e):n.current=e}}function sl(e){var n=e.alternate;null!==n&&(e.alternate=null,sl(n)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&null!==(n=e.stateNode)&&(delete n[pi],delete n[mi],delete n[fi],delete n[gi],delete n[Ci]),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function ol(e){return 5===e.tag||3===e.tag||4===e.tag}function ll(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||ol(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&18!==e.tag;){if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function dl(e,n,t){var r=e.tag;if(5===r||6===r)e=e.stateNode,n?8===t.nodeType?t.parentNode.insertBefore(e,n):t.insertBefore(e,n):(8===t.nodeType?(n=t.parentNode).insertBefore(e,t):(n=t).appendChild(e),null!=(t=t._reactRootContainer)||null!==n.onclick||(n.onclick=Xr));else if(4!==r&&null!==(e=e.child))for(dl(e,n,t),e=e.sibling;null!==e;)dl(e,n,t),e=e.sibling}function cl(e,n,t){var r=e.tag;if(5===r||6===r)e=e.stateNode,n?t.insertBefore(e,n):t.appendChild(e);else if(4!==r&&null!==(e=e.child))for(cl(e,n,t),e=e.sibling;null!==e;)cl(e,n,t),e=e.sibling}var ul=null,pl=!1;function ml(e,n,t){for(t=t.child;null!==t;)hl(e,n,t),t=t.sibling}function hl(e,n,t){if(sn&&"function"==typeof sn.onCommitFiberUnmount)try{sn.onCommitFiberUnmount(an,t)}catch(e){}switch(t.tag){case 5:Qo||el(t,n);case 6:var r=ul,i=pl;ul=null,ml(e,n,t),pl=i,null!==(ul=r)&&(pl?(e=ul,t=t.stateNode,8===e.nodeType?e.parentNode.removeChild(t):e.removeChild(t)):ul.removeChild(t.stateNode));break;case 18:null!==ul&&(pl?(e=ul,t=t.stateNode,8===e.nodeType?li(e.parentNode,t):1===e.nodeType&&li(e,t),Vn(e)):li(ul,t.stateNode));break;case 4:r=ul,i=pl,ul=t.stateNode.containerInfo,pl=!0,ml(e,n,t),ul=r,pl=i;break;case 0:case 11:case 14:case 15:if(!Qo&&null!==(r=t.updateQueue)&&null!==(r=r.lastEffect)){i=r=r.next;do{var a=i,s=a.destroy;a=a.tag,void 0!==s&&(0!=(2&a)||0!=(4&a))&&nl(t,n,s),i=i.next}while(i!==r)}ml(e,n,t);break;case 1:if(!Qo&&(el(t,n),"function"==typeof(r=t.stateNode).componentWillUnmount))try{r.props=t.memoizedProps,r.state=t.memoizedState,r.componentWillUnmount()}catch(e){Ed(t,n,e)}ml(e,n,t);break;case 21:ml(e,n,t);break;case 22:1&t.mode?(Qo=(r=Qo)||null!==t.memoizedState,ml(e,n,t),Qo=r):ml(e,n,t);break;default:ml(e,n,t)}}function fl(e){var n=e.updateQueue;if(null!==n){e.updateQueue=null;var t=e.stateNode;null===t&&(t=e.stateNode=new Ko),n.forEach((function(n){var r=xd.bind(null,e,n);t.has(n)||(t.add(n),n.then(r,r))}))}}function gl(e,n){var t=n.deletions;if(null!==t)for(var r=0;r<t.length;r++){var i=t[r];try{var s=e,o=n,l=o;e:for(;null!==l;){switch(l.tag){case 5:ul=l.stateNode,pl=!1;break e;case 3:case 4:ul=l.stateNode.containerInfo,pl=!0;break e}l=l.return}if(null===ul)throw Error(a(160));hl(s,o,i),ul=null,pl=!1;var d=i.alternate;null!==d&&(d.return=null),i.return=null}catch(e){Ed(i,n,e)}}if(12854&n.subtreeFlags)for(n=n.child;null!==n;)Cl(n,e),n=n.sibling}function Cl(e,n){var t=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:if(gl(n,e),Al(e),4&r){try{rl(3,e,e.return),il(3,e)}catch(n){Ed(e,e.return,n)}try{rl(5,e,e.return)}catch(n){Ed(e,e.return,n)}}break;case 1:gl(n,e),Al(e),512&r&&null!==t&&el(t,t.return);break;case 5:if(gl(n,e),Al(e),512&r&&null!==t&&el(t,t.return),32&e.flags){var i=e.stateNode;try{pe(i,"")}catch(n){Ed(e,e.return,n)}}if(4&r&&null!=(i=e.stateNode)){var s=e.memoizedProps,o=null!==t?t.memoizedProps:s,l=e.type,d=e.updateQueue;if(e.updateQueue=null,null!==d)try{"input"===l&&"radio"===s.type&&null!=s.name&&Q(i,s),ve(l,o);var c=ve(l,s);for(o=0;o<d.length;o+=2){var u=d[o],p=d[o+1];"style"===u?ge(i,p):"dangerouslySetInnerHTML"===u?ue(i,p):"children"===u?pe(i,p):v(i,u,p,c)}switch(l){case"input":K(i,s);break;case"textarea":ae(i,s);break;case"select":var m=i._wrapperState.wasMultiple;i._wrapperState.wasMultiple=!!s.multiple;var h=s.value;null!=h?te(i,!!s.multiple,h,!1):m!==!!s.multiple&&(null!=s.defaultValue?te(i,!!s.multiple,s.defaultValue,!0):te(i,!!s.multiple,s.multiple?[]:"",!1))}i[mi]=s}catch(n){Ed(e,e.return,n)}}break;case 6:if(gl(n,e),Al(e),4&r){if(null===e.stateNode)throw Error(a(162));i=e.stateNode,s=e.memoizedProps;try{i.nodeValue=s}catch(n){Ed(e,e.return,n)}}break;case 3:if(gl(n,e),Al(e),4&r&&null!==t&&t.memoizedState.isDehydrated)try{Vn(n.containerInfo)}catch(n){Ed(e,e.return,n)}break;case 4:default:gl(n,e),Al(e);break;case 13:gl(n,e),Al(e),8192&(i=e.child).flags&&(s=null!==i.memoizedState,i.stateNode.isHidden=s,!s||null!==i.alternate&&null!==i.alternate.memoizedState||(zl=Qe())),4&r&&fl(e);break;case 22:if(u=null!==t&&null!==t.memoizedState,1&e.mode?(Qo=(c=Qo)||u,gl(n,e),Qo=c):gl(n,e),Al(e),8192&r){if(c=null!==e.memoizedState,(e.stateNode.isHidden=c)&&!u&&0!=(1&e.mode))for(Xo=e,u=e.child;null!==u;){for(p=Xo=u;null!==Xo;){switch(h=(m=Xo).child,m.tag){case 0:case 11:case 14:case 15:rl(4,m,m.return);break;case 1:el(m,m.return);var f=m.stateNode;if("function"==typeof f.componentWillUnmount){r=m,t=m.return;try{n=r,f.props=n.memoizedProps,f.state=n.memoizedState,f.componentWillUnmount()}catch(e){Ed(r,t,e)}}break;case 5:el(m,m.return);break;case 22:if(null!==m.memoizedState){wl(p);continue}}null!==h?(h.return=m,Xo=h):wl(p)}u=u.sibling}e:for(u=null,p=e;;){if(5===p.tag){if(null===u){u=p;try{i=p.stateNode,c?"function"==typeof(s=i.style).setProperty?s.setProperty("display","none","important"):s.display="none":(l=p.stateNode,o=null!=(d=p.memoizedProps.style)&&d.hasOwnProperty("display")?d.display:null,l.style.display=fe("display",o))}catch(n){Ed(e,e.return,n)}}}else if(6===p.tag){if(null===u)try{p.stateNode.nodeValue=c?"":p.memoizedProps}catch(n){Ed(e,e.return,n)}}else if((22!==p.tag&&23!==p.tag||null===p.memoizedState||p===e)&&null!==p.child){p.child.return=p,p=p.child;continue}if(p===e)break e;for(;null===p.sibling;){if(null===p.return||p.return===e)break e;u===p&&(u=null),p=p.return}u===p&&(u=null),p.sibling.return=p.return,p=p.sibling}}break;case 19:gl(n,e),Al(e),4&r&&fl(e);case 21:}}function Al(e){var n=e.flags;if(2&n){try{e:{for(var t=e.return;null!==t;){if(ol(t)){var r=t;break e}t=t.return}throw Error(a(160))}switch(r.tag){case 5:var i=r.stateNode;32&r.flags&&(pe(i,""),r.flags&=-33),cl(e,ll(e),i);break;case 3:case 4:var s=r.stateNode.containerInfo;dl(e,ll(e),s);break;default:throw Error(a(161))}}catch(n){Ed(e,e.return,n)}e.flags&=-3}4096&n&&(e.flags&=-4097)}function vl(e,n,t){Xo=e,bl(e,n,t)}function bl(e,n,t){for(var r=0!=(1&e.mode);null!==Xo;){var i=Xo,a=i.child;if(22===i.tag&&r){var s=null!==i.memoizedState||Zo;if(!s){var o=i.alternate,l=null!==o&&null!==o.memoizedState||Qo;o=Zo;var d=Qo;if(Zo=s,(Qo=l)&&!d)for(Xo=i;null!==Xo;)l=(s=Xo).child,22===s.tag&&null!==s.memoizedState?Sl(i):null!==l?(l.return=s,Xo=l):Sl(i);for(;null!==a;)Xo=a,bl(a,n,t),a=a.sibling;Xo=i,Zo=o,Qo=d}yl(e)}else 0!=(8772&i.subtreeFlags)&&null!==a?(a.return=i,Xo=a):yl(e)}}function yl(e){for(;null!==Xo;){var n=Xo;if(0!=(8772&n.flags)){var t=n.alternate;try{if(0!=(8772&n.flags))switch(n.tag){case 0:case 11:case 15:Qo||il(5,n);break;case 1:var r=n.stateNode;if(4&n.flags&&!Qo)if(null===t)r.componentDidMount();else{var i=n.elementType===n.type?t.memoizedProps:ga(n.type,t.memoizedProps);r.componentDidUpdate(i,t.memoizedState,r.__reactInternalSnapshotBeforeUpdate)}var s=n.updateQueue;null!==s&&Na(n,s,r);break;case 3:var o=n.updateQueue;if(null!==o){if(t=null,null!==n.child)switch(n.child.tag){case 5:case 1:t=n.child.stateNode}Na(n,o,t)}break;case 5:var l=n.stateNode;if(null===t&&4&n.flags){t=l;var d=n.memoizedProps;switch(n.type){case"button":case"input":case"select":case"textarea":d.autoFocus&&t.focus();break;case"img":d.src&&(t.src=d.src)}}break;case 6:case 4:case 12:case 19:case 17:case 21:case 22:case 23:case 25:break;case 13:if(null===n.memoizedState){var c=n.alternate;if(null!==c){var u=c.memoizedState;if(null!==u){var p=u.dehydrated;null!==p&&Vn(p)}}}break;default:throw Error(a(163))}Qo||512&n.flags&&al(n)}catch(e){Ed(n,n.return,e)}}if(n===e){Xo=null;break}if(null!==(t=n.sibling)){t.return=n.return,Xo=t;break}Xo=n.return}}function wl(e){for(;null!==Xo;){var n=Xo;if(n===e){Xo=null;break}var t=n.sibling;if(null!==t){t.return=n.return,Xo=t;break}Xo=n.return}}function Sl(e){for(;null!==Xo;){var n=Xo;try{switch(n.tag){case 0:case 11:case 15:var t=n.return;try{il(4,n)}catch(e){Ed(n,t,e)}break;case 1:var r=n.stateNode;if("function"==typeof r.componentDidMount){var i=n.return;try{r.componentDidMount()}catch(e){Ed(n,i,e)}}var a=n.return;try{al(n)}catch(e){Ed(n,a,e)}break;case 5:var s=n.return;try{al(n)}catch(e){Ed(n,s,e)}}}catch(e){Ed(n,n.return,e)}if(n===e){Xo=null;break}var o=n.sibling;if(null!==o){o.return=n.return,Xo=o;break}Xo=n.return}}var Pl,El=Math.ceil,_l=b.ReactCurrentDispatcher,Dl=b.ReactCurrentOwner,Il=b.ReactCurrentBatchConfig,xl=0,Ol=null,kl=null,Ll=0,Ul=0,Tl=Pi(0),Rl=0,Fl=null,Ml=0,Nl=0,Wl=0,jl=null,Bl=null,zl=0,Vl=1/0,Hl=null,Jl=!1,Gl=null,$l=null,Yl=!1,ql=null,Zl=0,Ql=0,Kl=null,Xl=-1,ed=0;function nd(){return 0!=(6&xl)?Qe():-1!==Xl?Xl:Xl=Qe()}function td(e){return 0==(1&e.mode)?1:0!=(2&xl)&&0!==Ll?Ll&-Ll:null!==fa.transition?(0===ed&&(ed=gn()),ed):0!==(e=bn)?e:e=void 0===(e=window.event)?16:Qn(e.type)}function rd(e,n,t,r){if(50<Ql)throw Ql=0,Kl=null,Error(a(185));An(e,t,r),0!=(2&xl)&&e===Ol||(e===Ol&&(0==(2&xl)&&(Nl|=t),4===Rl&&ld(e,Ll)),id(e,r),1===t&&0===xl&&0==(1&n.mode)&&(Vl=Qe()+500,Wi&&zi()))}function id(e,n){var t=e.callbackNode;!function(e,n){for(var t=e.suspendedLanes,r=e.pingedLanes,i=e.expirationTimes,a=e.pendingLanes;0<a;){var s=31-on(a),o=1<<s,l=i[s];-1===l?0!=(o&t)&&0==(o&r)||(i[s]=hn(o,n)):l<=n&&(e.expiredLanes|=o),a&=~o}}(e,n);var r=mn(e,e===Ol?Ll:0);if(0===r)null!==t&&Ye(t),e.callbackNode=null,e.callbackPriority=0;else if(n=r&-r,e.callbackPriority!==n){if(null!=t&&Ye(t),1===n)0===e.tag?function(e){Wi=!0,Bi(e)}(dd.bind(null,e)):Bi(dd.bind(null,e)),si((function(){0==(6&xl)&&zi()})),t=null;else{switch(yn(r)){case 1:t=Xe;break;case 4:t=en;break;case 16:default:t=nn;break;case 536870912:t=rn}t=Od(t,ad.bind(null,e))}e.callbackPriority=n,e.callbackNode=t}}function ad(e,n){if(Xl=-1,ed=0,0!=(6&xl))throw Error(a(327));var t=e.callbackNode;if(Sd()&&e.callbackNode!==t)return null;var r=mn(e,e===Ol?Ll:0);if(0===r)return null;if(0!=(30&r)||0!=(r&e.expiredLanes)||n)n=Cd(e,r);else{n=r;var i=xl;xl|=2;var s=fd();for(Ol===e&&Ll===n||(Hl=null,Vl=Qe()+500,md(e,n));;)try{vd();break}catch(n){hd(e,n)}ya(),_l.current=s,xl=i,null!==kl?n=0:(Ol=null,Ll=0,n=Rl)}if(0!==n){if(2===n&&0!==(i=fn(e))&&(r=i,n=sd(e,i)),1===n)throw t=Fl,md(e,0),ld(e,r),id(e,Qe()),t;if(6===n)ld(e,r);else{if(i=e.current.alternate,0==(30&r)&&!function(e){for(var n=e;;){if(16384&n.flags){var t=n.updateQueue;if(null!==t&&null!==(t=t.stores))for(var r=0;r<t.length;r++){var i=t[r],a=i.getSnapshot;i=i.value;try{if(!or(a(),i))return!1}catch(e){return!1}}}if(t=n.child,16384&n.subtreeFlags&&null!==t)t.return=n,n=t;else{if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return!0;n=n.return}n.sibling.return=n.return,n=n.sibling}}return!0}(i)&&(2===(n=Cd(e,r))&&0!==(s=fn(e))&&(r=s,n=sd(e,s)),1===n))throw t=Fl,md(e,0),ld(e,r),id(e,Qe()),t;switch(e.finishedWork=i,e.finishedLanes=r,n){case 0:case 1:throw Error(a(345));case 2:case 5:wd(e,Bl,Hl);break;case 3:if(ld(e,r),(130023424&r)===r&&10<(n=zl+500-Qe())){if(0!==mn(e,0))break;if(((i=e.suspendedLanes)&r)!==r){nd(),e.pingedLanes|=e.suspendedLanes&i;break}e.timeoutHandle=ri(wd.bind(null,e,Bl,Hl),n);break}wd(e,Bl,Hl);break;case 4:if(ld(e,r),(4194240&r)===r)break;for(n=e.eventTimes,i=-1;0<r;){var o=31-on(r);s=1<<o,(o=n[o])>i&&(i=o),r&=~s}if(r=i,10<(r=(120>(r=Qe()-r)?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*El(r/1960))-r)){e.timeoutHandle=ri(wd.bind(null,e,Bl,Hl),r);break}wd(e,Bl,Hl);break;default:throw Error(a(329))}}}return id(e,Qe()),e.callbackNode===t?ad.bind(null,e):null}function sd(e,n){var t=jl;return e.current.memoizedState.isDehydrated&&(md(e,n).flags|=256),2!==(e=Cd(e,n))&&(n=Bl,Bl=t,null!==n&&od(n)),e}function od(e){null===Bl?Bl=e:Bl.push.apply(Bl,e)}function ld(e,n){for(n&=~Wl,n&=~Nl,e.suspendedLanes|=n,e.pingedLanes&=~n,e=e.expirationTimes;0<n;){var t=31-on(n),r=1<<t;e[t]=-1,n&=~r}}function dd(e){if(0!=(6&xl))throw Error(a(327));Sd();var n=mn(e,0);if(0==(1&n))return id(e,Qe()),null;var t=Cd(e,n);if(0!==e.tag&&2===t){var r=fn(e);0!==r&&(n=r,t=sd(e,r))}if(1===t)throw t=Fl,md(e,0),ld(e,n),id(e,Qe()),t;if(6===t)throw Error(a(345));return e.finishedWork=e.current.alternate,e.finishedLanes=n,wd(e,Bl,Hl),id(e,Qe()),null}function cd(e,n){var t=xl;xl|=1;try{return e(n)}finally{0===(xl=t)&&(Vl=Qe()+500,Wi&&zi())}}function ud(e){null!==ql&&0===ql.tag&&0==(6&xl)&&Sd();var n=xl;xl|=1;var t=Il.transition,r=bn;try{if(Il.transition=null,bn=1,e)return e()}finally{bn=r,Il.transition=t,0==(6&(xl=n))&&zi()}}function pd(){Ul=Tl.current,Ei(Tl)}function md(e,n){e.finishedWork=null,e.finishedLanes=0;var t=e.timeoutHandle;if(-1!==t&&(e.timeoutHandle=-1,ii(t)),null!==kl)for(t=kl.return;null!==t;){var r=t;switch(na(r),r.tag){case 1:null!=(r=r.type.childContextTypes)&&Ui();break;case 3:is(),Ei(xi),Ei(Ii),cs();break;case 5:ss(r);break;case 4:is();break;case 13:case 19:Ei(os);break;case 10:wa(r.type._context);break;case 22:case 23:pd()}t=t.return}if(Ol=e,kl=e=Td(e.current,null),Ll=Ul=n,Rl=0,Fl=null,Wl=Nl=Ml=0,Bl=jl=null,null!==_a){for(n=0;n<_a.length;n++)if(null!==(r=(t=_a[n]).interleaved)){t.interleaved=null;var i=r.next,a=t.pending;if(null!==a){var s=a.next;a.next=i,r.next=s}t.pending=r}_a=null}return e}function hd(e,n){for(;;){var t=kl;try{if(ya(),us.current=ao,Cs){for(var r=hs.memoizedState;null!==r;){var i=r.queue;null!==i&&(i.pending=null),r=r.next}Cs=!1}if(ms=0,gs=fs=hs=null,As=!1,vs=0,Dl.current=null,null===t||null===t.return){Rl=1,Fl=n,kl=null;break}e:{var s=e,o=t.return,l=t,d=n;if(n=Ll,l.flags|=32768,null!==d&&"object"==typeof d&&"function"==typeof d.then){var c=d,u=l,p=u.tag;if(0==(1&u.mode)&&(0===p||11===p||15===p)){var m=u.alternate;m?(u.updateQueue=m.updateQueue,u.memoizedState=m.memoizedState,u.lanes=m.lanes):(u.updateQueue=null,u.memoizedState=null)}var h=Co(o);if(null!==h){h.flags&=-257,Ao(h,o,l,0,n),1&h.mode&&go(s,c,n),d=c;var f=(n=h).updateQueue;if(null===f){var g=new Set;g.add(d),n.updateQueue=g}else f.add(d);break e}if(0==(1&n)){go(s,c,n),gd();break e}d=Error(a(426))}else if(ia&&1&l.mode){var C=Co(o);if(null!==C){0==(65536&C.flags)&&(C.flags|=256),Ao(C,o,l,0,n),ha(co(d,l));break e}}s=d=co(d,l),4!==Rl&&(Rl=2),null===jl?jl=[s]:jl.push(s),s=o;do{switch(s.tag){case 3:s.flags|=65536,n&=-n,s.lanes|=n,Fa(s,ho(0,d,n));break e;case 1:l=d;var A=s.type,v=s.stateNode;if(0==(128&s.flags)&&("function"==typeof A.getDerivedStateFromError||null!==v&&"function"==typeof v.componentDidCatch&&(null===$l||!$l.has(v)))){s.flags|=65536,n&=-n,s.lanes|=n,Fa(s,fo(s,l,n));break e}}s=s.return}while(null!==s)}yd(t)}catch(e){n=e,kl===t&&null!==t&&(kl=t=t.return);continue}break}}function fd(){var e=_l.current;return _l.current=ao,null===e?ao:e}function gd(){0!==Rl&&3!==Rl&&2!==Rl||(Rl=4),null===Ol||0==(268435455&Ml)&&0==(268435455&Nl)||ld(Ol,Ll)}function Cd(e,n){var t=xl;xl|=2;var r=fd();for(Ol===e&&Ll===n||(Hl=null,md(e,n));;)try{Ad();break}catch(n){hd(e,n)}if(ya(),xl=t,_l.current=r,null!==kl)throw Error(a(261));return Ol=null,Ll=0,Rl}function Ad(){for(;null!==kl;)bd(kl)}function vd(){for(;null!==kl&&!qe();)bd(kl)}function bd(e){var n=Pl(e.alternate,e,Ul);e.memoizedProps=e.pendingProps,null===n?yd(e):kl=n,Dl.current=null}function yd(e){var n=e;do{var t=n.alternate;if(e=n.return,0==(32768&n.flags)){if(null!==(t=Yo(t,n,Ul)))return void(kl=t)}else{if(null!==(t=qo(t,n)))return t.flags&=32767,void(kl=t);if(null===e)return Rl=6,void(kl=null);e.flags|=32768,e.subtreeFlags=0,e.deletions=null}if(null!==(n=n.sibling))return void(kl=n);kl=n=e}while(null!==n);0===Rl&&(Rl=5)}function wd(e,n,t){var r=bn,i=Il.transition;try{Il.transition=null,bn=1,function(e,n,t,r){do{Sd()}while(null!==ql);if(0!=(6&xl))throw Error(a(327));t=e.finishedWork;var i=e.finishedLanes;if(null===t)return null;if(e.finishedWork=null,e.finishedLanes=0,t===e.current)throw Error(a(177));e.callbackNode=null,e.callbackPriority=0;var s=t.lanes|t.childLanes;if(function(e,n){var t=e.pendingLanes&~n;e.pendingLanes=n,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=n,e.mutableReadLanes&=n,e.entangledLanes&=n,n=e.entanglements;var r=e.eventTimes;for(e=e.expirationTimes;0<t;){var i=31-on(t),a=1<<i;n[i]=0,r[i]=-1,e[i]=-1,t&=~a}}(e,s),e===Ol&&(kl=Ol=null,Ll=0),0==(2064&t.subtreeFlags)&&0==(2064&t.flags)||Yl||(Yl=!0,Od(nn,(function(){return Sd(),null}))),s=0!=(15990&t.flags),0!=(15990&t.subtreeFlags)||s){s=Il.transition,Il.transition=null;var o=bn;bn=1;var l=xl;xl|=4,Dl.current=null,function(e,n){if(ei=Jn,mr(e=pr())){if("selectionStart"in e)var t={start:e.selectionStart,end:e.selectionEnd};else e:{var r=(t=(t=e.ownerDocument)&&t.defaultView||window).getSelection&&t.getSelection();if(r&&0!==r.rangeCount){t=r.anchorNode;var i=r.anchorOffset,s=r.focusNode;r=r.focusOffset;try{t.nodeType,s.nodeType}catch(e){t=null;break e}var o=0,l=-1,d=-1,c=0,u=0,p=e,m=null;n:for(;;){for(var h;p!==t||0!==i&&3!==p.nodeType||(l=o+i),p!==s||0!==r&&3!==p.nodeType||(d=o+r),3===p.nodeType&&(o+=p.nodeValue.length),null!==(h=p.firstChild);)m=p,p=h;for(;;){if(p===e)break n;if(m===t&&++c===i&&(l=o),m===s&&++u===r&&(d=o),null!==(h=p.nextSibling))break;m=(p=m).parentNode}p=h}t=-1===l||-1===d?null:{start:l,end:d}}else t=null}t=t||{start:0,end:0}}else t=null;for(ni={focusedElem:e,selectionRange:t},Jn=!1,Xo=n;null!==Xo;)if(e=(n=Xo).child,0!=(1028&n.subtreeFlags)&&null!==e)e.return=n,Xo=e;else for(;null!==Xo;){n=Xo;try{var f=n.alternate;if(0!=(1024&n.flags))switch(n.tag){case 0:case 11:case 15:case 5:case 6:case 4:case 17:break;case 1:if(null!==f){var g=f.memoizedProps,C=f.memoizedState,A=n.stateNode,v=A.getSnapshotBeforeUpdate(n.elementType===n.type?g:ga(n.type,g),C);A.__reactInternalSnapshotBeforeUpdate=v}break;case 3:var b=n.stateNode.containerInfo;1===b.nodeType?b.textContent="":9===b.nodeType&&b.documentElement&&b.removeChild(b.documentElement);break;default:throw Error(a(163))}}catch(e){Ed(n,n.return,e)}if(null!==(e=n.sibling)){e.return=n.return,Xo=e;break}Xo=n.return}f=tl,tl=!1}(e,t),Cl(t,e),hr(ni),Jn=!!ei,ni=ei=null,e.current=t,vl(t,e,i),Ze(),xl=l,bn=o,Il.transition=s}else e.current=t;if(Yl&&(Yl=!1,ql=e,Zl=i),0===(s=e.pendingLanes)&&($l=null),function(e){if(sn&&"function"==typeof sn.onCommitFiberRoot)try{sn.onCommitFiberRoot(an,e,void 0,128==(128&e.current.flags))}catch(e){}}(t.stateNode),id(e,Qe()),null!==n)for(r=e.onRecoverableError,t=0;t<n.length;t++)r((i=n[t]).value,{componentStack:i.stack,digest:i.digest});if(Jl)throw Jl=!1,e=Gl,Gl=null,e;0!=(1&Zl)&&0!==e.tag&&Sd(),0!=(1&(s=e.pendingLanes))?e===Kl?Ql++:(Ql=0,Kl=e):Ql=0,zi()}(e,n,t,r)}finally{Il.transition=i,bn=r}return null}function Sd(){if(null!==ql){var e=yn(Zl),n=Il.transition,t=bn;try{if(Il.transition=null,bn=16>e?16:e,null===ql)var r=!1;else{if(e=ql,ql=null,Zl=0,0!=(6&xl))throw Error(a(331));var i=xl;for(xl|=4,Xo=e.current;null!==Xo;){var s=Xo,o=s.child;if(0!=(16&Xo.flags)){var l=s.deletions;if(null!==l){for(var d=0;d<l.length;d++){var c=l[d];for(Xo=c;null!==Xo;){var u=Xo;switch(u.tag){case 0:case 11:case 15:rl(8,u,s)}var p=u.child;if(null!==p)p.return=u,Xo=p;else for(;null!==Xo;){var m=(u=Xo).sibling,h=u.return;if(sl(u),u===c){Xo=null;break}if(null!==m){m.return=h,Xo=m;break}Xo=h}}}var f=s.alternate;if(null!==f){var g=f.child;if(null!==g){f.child=null;do{var C=g.sibling;g.sibling=null,g=C}while(null!==g)}}Xo=s}}if(0!=(2064&s.subtreeFlags)&&null!==o)o.return=s,Xo=o;else e:for(;null!==Xo;){if(0!=(2048&(s=Xo).flags))switch(s.tag){case 0:case 11:case 15:rl(9,s,s.return)}var A=s.sibling;if(null!==A){A.return=s.return,Xo=A;break e}Xo=s.return}}var v=e.current;for(Xo=v;null!==Xo;){var b=(o=Xo).child;if(0!=(2064&o.subtreeFlags)&&null!==b)b.return=o,Xo=b;else e:for(o=v;null!==Xo;){if(0!=(2048&(l=Xo).flags))try{switch(l.tag){case 0:case 11:case 15:il(9,l)}}catch(e){Ed(l,l.return,e)}if(l===o){Xo=null;break e}var y=l.sibling;if(null!==y){y.return=l.return,Xo=y;break e}Xo=l.return}}if(xl=i,zi(),sn&&"function"==typeof sn.onPostCommitFiberRoot)try{sn.onPostCommitFiberRoot(an,e)}catch(e){}r=!0}return r}finally{bn=t,Il.transition=n}}return!1}function Pd(e,n,t){e=Ta(e,n=ho(0,n=co(t,n),1),1),n=nd(),null!==e&&(An(e,1,n),id(e,n))}function Ed(e,n,t){if(3===e.tag)Pd(e,e,t);else for(;null!==n;){if(3===n.tag){Pd(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===$l||!$l.has(r))){n=Ta(n,e=fo(n,e=co(t,e),1),1),e=nd(),null!==n&&(An(n,1,e),id(n,e));break}}n=n.return}}function _d(e,n,t){var r=e.pingCache;null!==r&&r.delete(n),n=nd(),e.pingedLanes|=e.suspendedLanes&t,Ol===e&&(Ll&t)===t&&(4===Rl||3===Rl&&(130023424&Ll)===Ll&&500>Qe()-zl?md(e,0):Wl|=t),id(e,n)}function Dd(e,n){0===n&&(0==(1&e.mode)?n=1:(n=un,0==(130023424&(un<<=1))&&(un=4194304)));var t=nd();null!==(e=xa(e,n))&&(An(e,n,t),id(e,t))}function Id(e){var n=e.memoizedState,t=0;null!==n&&(t=n.retryLane),Dd(e,t)}function xd(e,n){var t=0;switch(e.tag){case 13:var r=e.stateNode,i=e.memoizedState;null!==i&&(t=i.retryLane);break;case 19:r=e.stateNode;break;default:throw Error(a(314))}null!==r&&r.delete(n),Dd(e,t)}function Od(e,n){return $e(e,n)}function kd(e,n,t,r){this.tag=e,this.key=t,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=n,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Ld(e,n,t,r){return new kd(e,n,t,r)}function Ud(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Td(e,n){var t=e.alternate;return null===t?((t=Ld(e.tag,n,e.key,e.mode)).elementType=e.elementType,t.type=e.type,t.stateNode=e.stateNode,t.alternate=e,e.alternate=t):(t.pendingProps=n,t.type=e.type,t.flags=0,t.subtreeFlags=0,t.deletions=null),t.flags=14680064&e.flags,t.childLanes=e.childLanes,t.lanes=e.lanes,t.child=e.child,t.memoizedProps=e.memoizedProps,t.memoizedState=e.memoizedState,t.updateQueue=e.updateQueue,n=e.dependencies,t.dependencies=null===n?null:{lanes:n.lanes,firstContext:n.firstContext},t.sibling=e.sibling,t.index=e.index,t.ref=e.ref,t}function Rd(e,n,t,r,i,s){var o=2;if(r=e,"function"==typeof e)Ud(e)&&(o=1);else if("string"==typeof e)o=5;else e:switch(e){case S:return Fd(t.children,i,s,n);case P:o=8,i|=8;break;case E:return(e=Ld(12,t,n,2|i)).elementType=E,e.lanes=s,e;case x:return(e=Ld(13,t,n,i)).elementType=x,e.lanes=s,e;case O:return(e=Ld(19,t,n,i)).elementType=O,e.lanes=s,e;case U:return Md(t,i,s,n);default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case _:o=10;break e;case D:o=9;break e;case I:o=11;break e;case k:o=14;break e;case L:o=16,r=null;break e}throw Error(a(130,null==e?e:typeof e,""))}return(n=Ld(o,t,n,i)).elementType=e,n.type=r,n.lanes=s,n}function Fd(e,n,t,r){return(e=Ld(7,e,r,n)).lanes=t,e}function Md(e,n,t,r){return(e=Ld(22,e,r,n)).elementType=U,e.lanes=t,e.stateNode={isHidden:!1},e}function Nd(e,n,t){return(e=Ld(6,e,null,n)).lanes=t,e}function Wd(e,n,t){return(n=Ld(4,null!==e.children?e.children:[],e.key,n)).lanes=t,n.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},n}function jd(e,n,t,r,i){this.tag=n,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=Cn(0),this.expirationTimes=Cn(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=Cn(0),this.identifierPrefix=r,this.onRecoverableError=i,this.mutableSourceEagerHydrationData=null}function Bd(e,n,t,r,i,a,s,o,l){return e=new jd(e,n,t,o,l),1===n?(n=1,!0===a&&(n|=8)):n=0,a=Ld(3,null,null,n),e.current=a,a.stateNode=e,a.memoizedState={element:r,isDehydrated:t,cache:null,transitions:null,pendingSuspenseBoundaries:null},ka(a),e}function zd(e){if(!e)return Di;e:{if(ze(e=e._reactInternals)!==e||1!==e.tag)throw Error(a(170));var n=e;do{switch(n.tag){case 3:n=n.stateNode.context;break e;case 1:if(Li(n.type)){n=n.stateNode.__reactInternalMemoizedMergedChildContext;break e}}n=n.return}while(null!==n);throw Error(a(171))}if(1===e.tag){var t=e.type;if(Li(t))return Ri(e,t,n)}return n}function Vd(e,n,t,r,i,a,s,o,l){return(e=Bd(t,r,!0,e,0,a,0,o,l)).context=zd(null),t=e.current,(a=Ua(r=nd(),i=td(t))).callback=null!=n?n:null,Ta(t,a,i),e.current.lanes=i,An(e,i,r),id(e,r),e}function Hd(e,n,t,r){var i=n.current,a=nd(),s=td(i);return t=zd(t),null===n.context?n.context=t:n.pendingContext=t,(n=Ua(a,s)).payload={element:e},null!==(r=void 0===r?null:r)&&(n.callback=r),null!==(e=Ta(i,n,s))&&(rd(e,i,s,a),Ra(e,i,s)),s}function Jd(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function Gd(e,n){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var t=e.retryLane;e.retryLane=0!==t&&t<n?t:n}}function $d(e,n){Gd(e,n),(e=e.alternate)&&Gd(e,n)}Pl=function(e,n,t){if(null!==e)if(e.memoizedProps!==n.pendingProps||xi.current)bo=!0;else{if(0==(e.lanes&t)&&0==(128&n.flags))return bo=!1,function(e,n,t){switch(n.tag){case 3:Oo(n),ma();break;case 5:as(n);break;case 1:Li(n.type)&&Fi(n);break;case 4:rs(n,n.stateNode.containerInfo);break;case 10:var r=n.type._context,i=n.memoizedProps.value;_i(Ca,r._currentValue),r._currentValue=i;break;case 13:if(null!==(r=n.memoizedState))return null!==r.dehydrated?(_i(os,1&os.current),n.flags|=128,null):0!=(t&n.child.childLanes)?No(e,n,t):(_i(os,1&os.current),null!==(e=Jo(e,n,t))?e.sibling:null);_i(os,1&os.current);break;case 19:if(r=0!=(t&n.childLanes),0!=(128&e.flags)){if(r)return Vo(e,n,t);n.flags|=128}if(null!==(i=n.memoizedState)&&(i.rendering=null,i.tail=null,i.lastEffect=null),_i(os,os.current),r)break;return null;case 22:case 23:return n.lanes=0,Eo(e,n,t)}return Jo(e,n,t)}(e,n,t);bo=0!=(131072&e.flags)}else bo=!1,ia&&0!=(1048576&n.flags)&&Xi(n,Gi,n.index);switch(n.lanes=0,n.tag){case 2:var r=n.type;Ho(e,n),e=n.pendingProps;var i=ki(n,Ii.current);Pa(n,t),i=Ss(null,n,r,e,i,t);var s=Ps();return n.flags|=1,"object"==typeof i&&null!==i&&"function"==typeof i.render&&void 0===i.$$typeof?(n.tag=1,n.memoizedState=null,n.updateQueue=null,Li(r)?(s=!0,Fi(n)):s=!1,n.memoizedState=null!==i.state&&void 0!==i.state?i.state:null,ka(n),i.updater=Ba,n.stateNode=i,i._reactInternals=n,Ja(n,r,e,t),n=xo(null,n,r,!0,s,t)):(n.tag=0,ia&&s&&ea(n),yo(null,n,i,t),n=n.child),n;case 16:r=n.elementType;e:{switch(Ho(e,n),e=n.pendingProps,r=(i=r._init)(r._payload),n.type=r,i=n.tag=function(e){if("function"==typeof e)return Ud(e)?1:0;if(null!=e){if((e=e.$$typeof)===I)return 11;if(e===k)return 14}return 2}(r),e=ga(r,e),i){case 0:n=Do(null,n,r,e,t);break e;case 1:n=Io(null,n,r,e,t);break e;case 11:n=wo(null,n,r,e,t);break e;case 14:n=So(null,n,r,ga(r.type,e),t);break e}throw Error(a(306,r,""))}return n;case 0:return r=n.type,i=n.pendingProps,Do(e,n,r,i=n.elementType===r?i:ga(r,i),t);case 1:return r=n.type,i=n.pendingProps,Io(e,n,r,i=n.elementType===r?i:ga(r,i),t);case 3:e:{if(Oo(n),null===e)throw Error(a(387));r=n.pendingProps,i=(s=n.memoizedState).element,La(e,n),Ma(n,r,null,t);var o=n.memoizedState;if(r=o.element,s.isDehydrated){if(s={element:r,isDehydrated:!1,cache:o.cache,pendingSuspenseBoundaries:o.pendingSuspenseBoundaries,transitions:o.transitions},n.updateQueue.baseState=s,n.memoizedState=s,256&n.flags){n=ko(e,n,r,t,i=co(Error(a(423)),n));break e}if(r!==i){n=ko(e,n,r,t,i=co(Error(a(424)),n));break e}for(ra=di(n.stateNode.containerInfo.firstChild),ta=n,ia=!0,aa=null,t=Qa(n,null,r,t),n.child=t;t;)t.flags=-3&t.flags|4096,t=t.sibling}else{if(ma(),r===i){n=Jo(e,n,t);break e}yo(e,n,r,t)}n=n.child}return n;case 5:return as(n),null===e&&da(n),r=n.type,i=n.pendingProps,s=null!==e?e.memoizedProps:null,o=i.children,ti(r,i)?o=null:null!==s&&ti(r,s)&&(n.flags|=32),_o(e,n),yo(e,n,o,t),n.child;case 6:return null===e&&da(n),null;case 13:return No(e,n,t);case 4:return rs(n,n.stateNode.containerInfo),r=n.pendingProps,null===e?n.child=Za(n,null,r,t):yo(e,n,r,t),n.child;case 11:return r=n.type,i=n.pendingProps,wo(e,n,r,i=n.elementType===r?i:ga(r,i),t);case 7:return yo(e,n,n.pendingProps,t),n.child;case 8:case 12:return yo(e,n,n.pendingProps.children,t),n.child;case 10:e:{if(r=n.type._context,i=n.pendingProps,s=n.memoizedProps,o=i.value,_i(Ca,r._currentValue),r._currentValue=o,null!==s)if(or(s.value,o)){if(s.children===i.children&&!xi.current){n=Jo(e,n,t);break e}}else for(null!==(s=n.child)&&(s.return=n);null!==s;){var l=s.dependencies;if(null!==l){o=s.child;for(var d=l.firstContext;null!==d;){if(d.context===r){if(1===s.tag){(d=Ua(-1,t&-t)).tag=2;var c=s.updateQueue;if(null!==c){var u=(c=c.shared).pending;null===u?d.next=d:(d.next=u.next,u.next=d),c.pending=d}}s.lanes|=t,null!==(d=s.alternate)&&(d.lanes|=t),Sa(s.return,t,n),l.lanes|=t;break}d=d.next}}else if(10===s.tag)o=s.type===n.type?null:s.child;else if(18===s.tag){if(null===(o=s.return))throw Error(a(341));o.lanes|=t,null!==(l=o.alternate)&&(l.lanes|=t),Sa(o,t,n),o=s.sibling}else o=s.child;if(null!==o)o.return=s;else for(o=s;null!==o;){if(o===n){o=null;break}if(null!==(s=o.sibling)){s.return=o.return,o=s;break}o=o.return}s=o}yo(e,n,i.children,t),n=n.child}return n;case 9:return i=n.type,r=n.pendingProps.children,Pa(n,t),r=r(i=Ea(i)),n.flags|=1,yo(e,n,r,t),n.child;case 14:return i=ga(r=n.type,n.pendingProps),So(e,n,r,i=ga(r.type,i),t);case 15:return Po(e,n,n.type,n.pendingProps,t);case 17:return r=n.type,i=n.pendingProps,i=n.elementType===r?i:ga(r,i),Ho(e,n),n.tag=1,Li(r)?(e=!0,Fi(n)):e=!1,Pa(n,t),Va(n,r,i),Ja(n,r,i,t),xo(null,n,r,!0,e,t);case 19:return Vo(e,n,t);case 22:return Eo(e,n,t)}throw Error(a(156,n.tag))};var Yd="function"==typeof reportError?reportError:function(e){console.error(e)};function qd(e){this._internalRoot=e}function Zd(e){this._internalRoot=e}function Qd(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType)}function Kd(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Xd(){}function ec(e,n,t,r,i){var a=t._reactRootContainer;if(a){var s=a;if("function"==typeof i){var o=i;i=function(){var e=Jd(s);o.call(e)}}Hd(n,s,e,i)}else s=function(e,n,t,r,i){if(i){if("function"==typeof r){var a=r;r=function(){var e=Jd(s);a.call(e)}}var s=Vd(n,r,e,0,null,!1,0,"",Xd);return e._reactRootContainer=s,e[hi]=s.current,zr(8===e.nodeType?e.parentNode:e),ud(),s}for(;i=e.lastChild;)e.removeChild(i);if("function"==typeof r){var o=r;r=function(){var e=Jd(l);o.call(e)}}var l=Bd(e,0,!1,null,0,!1,0,"",Xd);return e._reactRootContainer=l,e[hi]=l.current,zr(8===e.nodeType?e.parentNode:e),ud((function(){Hd(n,l,t,r)})),l}(t,n,e,i,r);return Jd(s)}Zd.prototype.render=qd.prototype.render=function(e){var n=this._internalRoot;if(null===n)throw Error(a(409));Hd(e,n,null,null)},Zd.prototype.unmount=qd.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var n=e.containerInfo;ud((function(){Hd(null,e,null,null)})),n[hi]=null}},Zd.prototype.unstable_scheduleHydration=function(e){if(e){var n=En();e={blockedOn:null,target:e,priority:n};for(var t=0;t<Tn.length&&0!==n&&n<Tn[t].priority;t++);Tn.splice(t,0,e),0===t&&Nn(e)}},wn=function(e){switch(e.tag){case 3:var n=e.stateNode;if(n.current.memoizedState.isDehydrated){var t=pn(n.pendingLanes);0!==t&&(vn(n,1|t),id(n,Qe()),0==(6&xl)&&(Vl=Qe()+500,zi()))}break;case 13:ud((function(){var n=xa(e,1);if(null!==n){var t=nd();rd(n,e,1,t)}})),$d(e,1)}},Sn=function(e){if(13===e.tag){var n=xa(e,134217728);null!==n&&rd(n,e,134217728,nd()),$d(e,134217728)}},Pn=function(e){if(13===e.tag){var n=td(e),t=xa(e,n);null!==t&&rd(t,e,n,nd()),$d(e,n)}},En=function(){return bn},_n=function(e,n){var t=bn;try{return bn=e,n()}finally{bn=t}},we=function(e,n,t){switch(n){case"input":if(K(e,t),n=t.name,"radio"===t.type&&null!=n){for(t=e;t.parentNode;)t=t.parentNode;for(t=t.querySelectorAll("input[name="+JSON.stringify(""+n)+'][type="radio"]'),n=0;n<t.length;n++){var r=t[n];if(r!==e&&r.form===e.form){var i=yi(r);if(!i)throw Error(a(90));$(r),K(r,i)}}}break;case"textarea":ae(e,t);break;case"select":null!=(n=t.value)&&te(e,!!t.multiple,n,!1)}},Ie=cd,xe=ud;var nc={usingClientEntryPoint:!1,Events:[vi,bi,yi,_e,De,cd]},tc={findFiberByHostInstance:Ai,bundleType:0,version:"18.2.0",rendererPackageName:"react-dom"},rc={bundleType:tc.bundleType,version:tc.version,rendererPackageName:tc.rendererPackageName,rendererConfig:tc.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:b.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=Je(e))?null:e.stateNode},findFiberByHostInstance:tc.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.2.0-next-9e3b772b8-20220608"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var ic=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!ic.isDisabled&&ic.supportsFiber)try{an=ic.inject(rc),sn=ic}catch(ce){}}n.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=nc,n.createPortal=function(e,n){var t=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Qd(n))throw Error(a(200));return function(e,n,t){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:w,key:null==r?null:""+r,children:e,containerInfo:n,implementation:t}}(e,n,null,t)},n.createRoot=function(e,n){if(!Qd(e))throw Error(a(299));var t=!1,r="",i=Yd;return null!=n&&(!0===n.unstable_strictMode&&(t=!0),void 0!==n.identifierPrefix&&(r=n.identifierPrefix),void 0!==n.onRecoverableError&&(i=n.onRecoverableError)),n=Bd(e,1,!1,null,0,t,0,r,i),e[hi]=n.current,zr(8===e.nodeType?e.parentNode:e),new qd(n)},n.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var n=e._reactInternals;if(void 0===n){if("function"==typeof e.render)throw Error(a(188));throw e=Object.keys(e).join(","),Error(a(268,e))}return null===(e=Je(n))?null:e.stateNode},n.flushSync=function(e){return ud(e)},n.hydrate=function(e,n,t){if(!Kd(n))throw Error(a(200));return ec(null,e,n,!0,t)},n.hydrateRoot=function(e,n,t){if(!Qd(e))throw Error(a(405));var r=null!=t&&t.hydratedSources||null,i=!1,s="",o=Yd;if(null!=t&&(!0===t.unstable_strictMode&&(i=!0),void 0!==t.identifierPrefix&&(s=t.identifierPrefix),void 0!==t.onRecoverableError&&(o=t.onRecoverableError)),n=Vd(n,null,e,1,null!=t?t:null,i,0,s,o),e[hi]=n.current,zr(e),r)for(e=0;e<r.length;e++)i=(i=(t=r[e])._getVersion)(t._source),null==n.mutableSourceEagerHydrationData?n.mutableSourceEagerHydrationData=[t,i]:n.mutableSourceEagerHydrationData.push(t,i);return new Zd(n)},n.render=function(e,n,t){if(!Kd(n))throw Error(a(200));return ec(null,e,n,!1,t)},n.unmountComponentAtNode=function(e){if(!Kd(e))throw Error(a(40));return!!e._reactRootContainer&&(ud((function(){ec(null,null,e,!1,(function(){e._reactRootContainer=null,e[hi]=null}))})),!0)},n.unstable_batchedUpdates=cd,n.unstable_renderSubtreeIntoContainer=function(e,n,t,r){if(!Kd(t))throw Error(a(200));if(null==e||void 0===e._reactInternals)throw Error(a(38));return ec(e,n,t,!1,r)},n.version="18.2.0-next-9e3b772b8-20220608"},745:(e,n,t)=>{"use strict";var r=t(935);n.s=r.createRoot,r.hydrateRoot},935:(e,n,t)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=t(448)},5:(e,n,t)=>{var r=t(294);function i(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var a=i(r);!function(e){if("undefined"==typeof window)return;const n=document.createElement("style");n.setAttribute("type","text/css"),n.innerHTML=e,document.head.appendChild(n)}('.rfm-marquee-container {\n  overflow-x: hidden;\n  display: flex;\n  flex-direction: row;\n  position: relative;\n  width: var(--width);\n  transform: var(--transform);\n}\n.rfm-marquee-container:hover div {\n  animation-play-state: var(--pause-on-hover);\n}\n.rfm-marquee-container:active div {\n  animation-play-state: var(--pause-on-click);\n}\n\n.rfm-overlay {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n}\n.rfm-overlay::before, .rfm-overlay::after {\n  background: linear-gradient(to right, var(--gradient-color), rgba(255, 255, 255, 0));\n  content: "";\n  height: 100%;\n  position: absolute;\n  width: var(--gradient-width);\n  z-index: 2;\n  pointer-events: none;\n  touch-action: none;\n}\n.rfm-overlay::after {\n  right: 0;\n  top: 0;\n  transform: rotateZ(180deg);\n}\n.rfm-overlay::before {\n  left: 0;\n  top: 0;\n}\n\n.rfm-marquee {\n  flex: 0 0 auto;\n  min-width: var(--min-width);\n  z-index: 1;\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  animation: scroll var(--duration) linear var(--delay) var(--iteration-count);\n  animation-play-state: var(--play);\n  animation-delay: var(--delay);\n  animation-direction: var(--direction);\n}\n@keyframes scroll {\n  0% {\n    transform: translateX(0%);\n  }\n  100% {\n    transform: translateX(-100%);\n  }\n}\n\n.rfm-initial-child-container {\n  flex: 0 0 auto;\n  display: flex;\n  min-width: auto;\n  flex-direction: row;\n  align-items: center;\n}\n\n.rfm-child {\n  transform: var(--transform);\n}');const s=r.forwardRef((function({style:e={},className:n="",autoFill:t=!1,play:i=!0,pauseOnHover:s=!1,pauseOnClick:o=!1,direction:l="left",speed:d=50,delay:c=0,loop:u=0,gradient:p=!1,gradientColor:m="white",gradientWidth:h=200,onFinish:f,onCycleComplete:g,onMount:C,children:A},v){const[b,y]=r.useState(0),[w,S]=r.useState(0),[P,E]=r.useState(1),[_,D]=r.useState(!1),I=r.useRef(null),x=v||I,O=r.useRef(null),k=r.useCallback((()=>{if(O.current&&x.current){const e=x.current.getBoundingClientRect(),n=O.current.getBoundingClientRect();let r=e.width,i=n.width;"up"!==l&&"down"!==l||(r=e.height,i=n.height),E(t&&r&&i&&i<r?Math.ceil(r/i):1),y(r),S(i)}}),[t,x,l]);r.useEffect((()=>{if(_&&(k(),O.current&&x.current)){const e=new ResizeObserver((()=>k()));return e.observe(x.current),e.observe(O.current),()=>{e&&e.disconnect()}}}),[k,x,_]),r.useEffect((()=>{k()}),[k,A]),r.useEffect((()=>{D(!0)}),[]),r.useEffect((()=>{"function"==typeof C&&C()}),[]);const L=r.useMemo((()=>t?w*P/d:w<b?b/d:w/d),[t,b,w,P,d]),U=r.useMemo((()=>Object.assign(Object.assign({},e),{"--pause-on-hover":!i||s?"paused":"running","--pause-on-click":!i||s&&!o||o?"paused":"running","--width":"up"===l||"down"===l?"100vh":"100%","--transform":"up"===l?"rotate(-90deg)":"down"===l?"rotate(90deg)":"none"})),[e,i,s,o,l]),T=r.useMemo((()=>({"--gradient-color":m,"--gradient-width":"number"==typeof h?`${h}px`:h})),[m,h]),R=r.useMemo((()=>({"--play":i?"running":"paused","--direction":"left"===l?"normal":"reverse","--duration":`${L}s`,"--delay":`${c}s`,"--iteration-count":u?`${u}`:"infinite","--min-width":t?"auto":"100%"})),[i,l,L,c,u,t]),F=r.useMemo((()=>({"--transform":"up"===l?"rotate(90deg)":"down"===l?"rotate(-90deg)":"none"})),[l]),M=r.useCallback((e=>[...Array(Number.isFinite(e)&&e>=0?e:0)].map(((e,n)=>a.default.createElement(r.Fragment,{key:n},r.Children.map(A,(e=>a.default.createElement("div",{style:F,className:"rfm-child"},e))))))),[F,A]);return _?a.default.createElement("div",{ref:x,style:U,className:"rfm-marquee-container "+n},p&&a.default.createElement("div",{style:T,className:"rfm-overlay"}),a.default.createElement("div",{className:"rfm-marquee",style:R,onAnimationIteration:g,onAnimationEnd:f},a.default.createElement("div",{className:"rfm-initial-child-container",ref:O},r.Children.map(A,(e=>a.default.createElement("div",{style:F,className:"rfm-child"},e)))),M(P-1)),a.default.createElement("div",{className:"rfm-marquee",style:R},M(P))):null}));n.Z=s},251:(e,n,t)=>{"use strict";var r=t(294),i=Symbol.for("react.element"),a=Symbol.for("react.fragment"),s=Object.prototype.hasOwnProperty,o=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,l={key:!0,ref:!0,__self:!0,__source:!0};function d(e,n,t){var r,a={},d=null,c=null;for(r in void 0!==t&&(d=""+t),void 0!==n.key&&(d=""+n.key),void 0!==n.ref&&(c=n.ref),n)s.call(n,r)&&!l.hasOwnProperty(r)&&(a[r]=n[r]);if(e&&e.defaultProps)for(r in n=e.defaultProps)void 0===a[r]&&(a[r]=n[r]);return{$$typeof:i,type:e,key:d,ref:c,props:a,_owner:o.current}}n.Fragment=a,n.jsx=d,n.jsxs=d},408:(e,n)=>{"use strict";var t=Symbol.for("react.element"),r=Symbol.for("react.portal"),i=Symbol.for("react.fragment"),a=Symbol.for("react.strict_mode"),s=Symbol.for("react.profiler"),o=Symbol.for("react.provider"),l=Symbol.for("react.context"),d=Symbol.for("react.forward_ref"),c=Symbol.for("react.suspense"),u=Symbol.for("react.memo"),p=Symbol.for("react.lazy"),m=Symbol.iterator,h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},f=Object.assign,g={};function C(e,n,t){this.props=e,this.context=n,this.refs=g,this.updater=t||h}function A(){}function v(e,n,t){this.props=e,this.context=n,this.refs=g,this.updater=t||h}C.prototype.isReactComponent={},C.prototype.setState=function(e,n){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,n,"setState")},C.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},A.prototype=C.prototype;var b=v.prototype=new A;b.constructor=v,f(b,C.prototype),b.isPureReactComponent=!0;var y=Array.isArray,w=Object.prototype.hasOwnProperty,S={current:null},P={key:!0,ref:!0,__self:!0,__source:!0};function E(e,n,r){var i,a={},s=null,o=null;if(null!=n)for(i in void 0!==n.ref&&(o=n.ref),void 0!==n.key&&(s=""+n.key),n)w.call(n,i)&&!P.hasOwnProperty(i)&&(a[i]=n[i]);var l=arguments.length-2;if(1===l)a.children=r;else if(1<l){for(var d=Array(l),c=0;c<l;c++)d[c]=arguments[c+2];a.children=d}if(e&&e.defaultProps)for(i in l=e.defaultProps)void 0===a[i]&&(a[i]=l[i]);return{$$typeof:t,type:e,key:s,ref:o,props:a,_owner:S.current}}function _(e){return"object"==typeof e&&null!==e&&e.$$typeof===t}var D=/\/+/g;function I(e,n){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var n={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return n[e]}))}(""+e.key):n.toString(36)}function x(e,n,i,a,s){var o=typeof e;"undefined"!==o&&"boolean"!==o||(e=null);var l=!1;if(null===e)l=!0;else switch(o){case"string":case"number":l=!0;break;case"object":switch(e.$$typeof){case t:case r:l=!0}}if(l)return s=s(l=e),e=""===a?"."+I(l,0):a,y(s)?(i="",null!=e&&(i=e.replace(D,"$&/")+"/"),x(s,n,i,"",(function(e){return e}))):null!=s&&(_(s)&&(s=function(e,n){return{$$typeof:t,type:e.type,key:n,ref:e.ref,props:e.props,_owner:e._owner}}(s,i+(!s.key||l&&l.key===s.key?"":(""+s.key).replace(D,"$&/")+"/")+e)),n.push(s)),1;if(l=0,a=""===a?".":a+":",y(e))for(var d=0;d<e.length;d++){var c=a+I(o=e[d],d);l+=x(o,n,i,c,s)}else if(c=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=m&&e[m]||e["@@iterator"])?e:null}(e),"function"==typeof c)for(e=c.call(e),d=0;!(o=e.next()).done;)l+=x(o=o.value,n,i,c=a+I(o,d++),s);else if("object"===o)throw n=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===n?"object with keys {"+Object.keys(e).join(", ")+"}":n)+"). If you meant to render a collection of children, use an array instead.");return l}function O(e,n,t){if(null==e)return e;var r=[],i=0;return x(e,r,"","",(function(e){return n.call(t,e,i++)})),r}function k(e){if(-1===e._status){var n=e._result;(n=n()).then((function(n){0!==e._status&&-1!==e._status||(e._status=1,e._result=n)}),(function(n){0!==e._status&&-1!==e._status||(e._status=2,e._result=n)})),-1===e._status&&(e._status=0,e._result=n)}if(1===e._status)return e._result.default;throw e._result}var L={current:null},U={transition:null},T={ReactCurrentDispatcher:L,ReactCurrentBatchConfig:U,ReactCurrentOwner:S};n.Children={map:O,forEach:function(e,n,t){O(e,(function(){n.apply(this,arguments)}),t)},count:function(e){var n=0;return O(e,(function(){n++})),n},toArray:function(e){return O(e,(function(e){return e}))||[]},only:function(e){if(!_(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},n.Component=C,n.Fragment=i,n.Profiler=s,n.PureComponent=v,n.StrictMode=a,n.Suspense=c,n.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=T,n.cloneElement=function(e,n,r){if(null==e)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var i=f({},e.props),a=e.key,s=e.ref,o=e._owner;if(null!=n){if(void 0!==n.ref&&(s=n.ref,o=S.current),void 0!==n.key&&(a=""+n.key),e.type&&e.type.defaultProps)var l=e.type.defaultProps;for(d in n)w.call(n,d)&&!P.hasOwnProperty(d)&&(i[d]=void 0===n[d]&&void 0!==l?l[d]:n[d])}var d=arguments.length-2;if(1===d)i.children=r;else if(1<d){l=Array(d);for(var c=0;c<d;c++)l[c]=arguments[c+2];i.children=l}return{$$typeof:t,type:e.type,key:a,ref:s,props:i,_owner:o}},n.createContext=function(e){return(e={$$typeof:l,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null}).Provider={$$typeof:o,_context:e},e.Consumer=e},n.createElement=E,n.createFactory=function(e){var n=E.bind(null,e);return n.type=e,n},n.createRef=function(){return{current:null}},n.forwardRef=function(e){return{$$typeof:d,render:e}},n.isValidElement=_,n.lazy=function(e){return{$$typeof:p,_payload:{_status:-1,_result:e},_init:k}},n.memo=function(e,n){return{$$typeof:u,type:e,compare:void 0===n?null:n}},n.startTransition=function(e){var n=U.transition;U.transition={};try{e()}finally{U.transition=n}},n.unstable_act=function(){throw Error("act(...) is not supported in production builds of React.")},n.useCallback=function(e,n){return L.current.useCallback(e,n)},n.useContext=function(e){return L.current.useContext(e)},n.useDebugValue=function(){},n.useDeferredValue=function(e){return L.current.useDeferredValue(e)},n.useEffect=function(e,n){return L.current.useEffect(e,n)},n.useId=function(){return L.current.useId()},n.useImperativeHandle=function(e,n,t){return L.current.useImperativeHandle(e,n,t)},n.useInsertionEffect=function(e,n){return L.current.useInsertionEffect(e,n)},n.useLayoutEffect=function(e,n){return L.current.useLayoutEffect(e,n)},n.useMemo=function(e,n){return L.current.useMemo(e,n)},n.useReducer=function(e,n,t){return L.current.useReducer(e,n,t)},n.useRef=function(e){return L.current.useRef(e)},n.useState=function(e){return L.current.useState(e)},n.useSyncExternalStore=function(e,n,t){return L.current.useSyncExternalStore(e,n,t)},n.useTransition=function(){return L.current.useTransition()},n.version="18.2.0"},294:(e,n,t)=>{"use strict";e.exports=t(408)},893:(e,n,t)=>{"use strict";e.exports=t(251)},53:(e,n)=>{"use strict";function t(e,n){var t=e.length;e.push(n);e:for(;0<t;){var r=t-1>>>1,i=e[r];if(!(0<a(i,n)))break e;e[r]=n,e[t]=i,t=r}}function r(e){return 0===e.length?null:e[0]}function i(e){if(0===e.length)return null;var n=e[0],t=e.pop();if(t!==n){e[0]=t;e:for(var r=0,i=e.length,s=i>>>1;r<s;){var o=2*(r+1)-1,l=e[o],d=o+1,c=e[d];if(0>a(l,t))d<i&&0>a(c,l)?(e[r]=c,e[d]=t,r=d):(e[r]=l,e[o]=t,r=o);else{if(!(d<i&&0>a(c,t)))break e;e[r]=c,e[d]=t,r=d}}}return n}function a(e,n){var t=e.sortIndex-n.sortIndex;return 0!==t?t:e.id-n.id}if("object"==typeof performance&&"function"==typeof performance.now){var s=performance;n.unstable_now=function(){return s.now()}}else{var o=Date,l=o.now();n.unstable_now=function(){return o.now()-l}}var d=[],c=[],u=1,p=null,m=3,h=!1,f=!1,g=!1,C="function"==typeof setTimeout?setTimeout:null,A="function"==typeof clearTimeout?clearTimeout:null,v="undefined"!=typeof setImmediate?setImmediate:null;function b(e){for(var n=r(c);null!==n;){if(null===n.callback)i(c);else{if(!(n.startTime<=e))break;i(c),n.sortIndex=n.expirationTime,t(d,n)}n=r(c)}}function y(e){if(g=!1,b(e),!f)if(null!==r(d))f=!0,U(w);else{var n=r(c);null!==n&&T(y,n.startTime-e)}}function w(e,t){f=!1,g&&(g=!1,A(_),_=-1),h=!0;var a=m;try{for(b(t),p=r(d);null!==p&&(!(p.expirationTime>t)||e&&!x());){var s=p.callback;if("function"==typeof s){p.callback=null,m=p.priorityLevel;var o=s(p.expirationTime<=t);t=n.unstable_now(),"function"==typeof o?p.callback=o:p===r(d)&&i(d),b(t)}else i(d);p=r(d)}if(null!==p)var l=!0;else{var u=r(c);null!==u&&T(y,u.startTime-t),l=!1}return l}finally{p=null,m=a,h=!1}}"undefined"!=typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);var S,P=!1,E=null,_=-1,D=5,I=-1;function x(){return!(n.unstable_now()-I<D)}function O(){if(null!==E){var e=n.unstable_now();I=e;var t=!0;try{t=E(!0,e)}finally{t?S():(P=!1,E=null)}}else P=!1}if("function"==typeof v)S=function(){v(O)};else if("undefined"!=typeof MessageChannel){var k=new MessageChannel,L=k.port2;k.port1.onmessage=O,S=function(){L.postMessage(null)}}else S=function(){C(O,0)};function U(e){E=e,P||(P=!0,S())}function T(e,t){_=C((function(){e(n.unstable_now())}),t)}n.unstable_IdlePriority=5,n.unstable_ImmediatePriority=1,n.unstable_LowPriority=4,n.unstable_NormalPriority=3,n.unstable_Profiling=null,n.unstable_UserBlockingPriority=2,n.unstable_cancelCallback=function(e){e.callback=null},n.unstable_continueExecution=function(){f||h||(f=!0,U(w))},n.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):D=0<e?Math.floor(1e3/e):5},n.unstable_getCurrentPriorityLevel=function(){return m},n.unstable_getFirstCallbackNode=function(){return r(d)},n.unstable_next=function(e){switch(m){case 1:case 2:case 3:var n=3;break;default:n=m}var t=m;m=n;try{return e()}finally{m=t}},n.unstable_pauseExecution=function(){},n.unstable_requestPaint=function(){},n.unstable_runWithPriority=function(e,n){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var t=m;m=e;try{return n()}finally{m=t}},n.unstable_scheduleCallback=function(e,i,a){var s=n.unstable_now();switch(a="object"==typeof a&&null!==a&&"number"==typeof(a=a.delay)&&0<a?s+a:s,e){case 1:var o=-1;break;case 2:o=250;break;case 5:o=1073741823;break;case 4:o=1e4;break;default:o=5e3}return e={id:u++,callback:i,priorityLevel:e,startTime:a,expirationTime:o=a+o,sortIndex:-1},a>s?(e.sortIndex=a,t(c,e),null===r(d)&&e===r(c)&&(g?(A(_),_=-1):g=!0,T(y,a-s))):(e.sortIndex=o,t(d,e),f||h||(f=!0,U(w))),e},n.unstable_shouldYield=x,n.unstable_wrapCallback=function(e){var n=m;return function(){var t=m;m=n;try{return e.apply(this,arguments)}finally{m=t}}}},840:(e,n,t)=>{"use strict";e.exports=t(53)},774:e=>{e.exports=function(e,n,t,r){var i=t?t.call(r,e,n):void 0;if(void 0!==i)return!!i;if(e===n)return!0;if("object"!=typeof e||!e||"object"!=typeof n||!n)return!1;var a=Object.keys(e),s=Object.keys(n);if(a.length!==s.length)return!1;for(var o=Object.prototype.hasOwnProperty.bind(n),l=0;l<a.length;l++){var d=a[l];if(!o(d))return!1;var c=e[d],u=n[d];if(!1===(i=t?t.call(r,c,u,d):void 0)||void 0===i&&c!==u)return!1}return!0}},379:e=>{"use strict";var n=[];function t(e){for(var t=-1,r=0;r<n.length;r++)if(n[r].identifier===e){t=r;break}return t}function r(e,r){for(var a={},s=[],o=0;o<e.length;o++){var l=e[o],d=r.base?l[0]+r.base:l[0],c=a[d]||0,u="".concat(d," ").concat(c);a[d]=c+1;var p=t(u),m={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==p)n[p].references++,n[p].updater(m);else{var h=i(m,r);r.byIndex=o,n.splice(o,0,{identifier:u,updater:h,references:1})}s.push(u)}return s}function i(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,i){var a=r(e=e||[],i=i||{});return function(e){e=e||[];for(var s=0;s<a.length;s++){var o=t(a[s]);n[o].references--}for(var l=r(e,i),d=0;d<a.length;d++){var c=t(a[d]);0===n[c].references&&(n[c].updater(),n.splice(c,1))}a=l}}},569:e=>{"use strict";var n={};e.exports=function(e,t){var r=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:e=>{"use strict";e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,t)=>{"use strict";e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{"use strict";e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var i=void 0!==t.layer;i&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,i&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),n.styleTagTransform(r,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{"use strict";e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}},954:e=>{"use strict";e.exports="data:application/font-woff;charset=utf-8;base64, d09GRgABAAAAAAZgABAAAAAADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGRlRNAAAGRAAAABoAAAAci6qHkUdERUYAAAWgAAAAIwAAACQAYABXR1BPUwAABhQAAAAuAAAANuAY7+xHU1VCAAAFxAAAAFAAAABm2fPczU9TLzIAAAHcAAAASgAAAGBP9V5RY21hcAAAAkQAAACIAAABYt6F0cBjdnQgAAACzAAAAAQAAAAEABEBRGdhc3AAAAWYAAAACAAAAAj//wADZ2x5ZgAAAywAAADMAAAD2MHtryVoZWFkAAABbAAAADAAAAA2E2+eoWhoZWEAAAGcAAAAHwAAACQC9gDzaG10eAAAAigAAAAZAAAArgJkABFsb2NhAAAC0AAAAFoAAABaFQAUGG1heHAAAAG8AAAAHwAAACAAcABAbmFtZQAAA/gAAAE5AAACXvFdBwlwb3N0AAAFNAAAAGIAAACE5s74hXjaY2BkYGAAYpf5Hu/j+W2+MnAzMYDAzaX6QjD6/4//Bxj5GA8AuRwMYGkAPywL13jaY2BkYGA88P8Agx4j+/8fQDYfA1AEBWgDAIB2BOoAeNpjYGRgYNBh4GdgYgABEMnIABJzYNADCQAACWgAsQB42mNgYfzCOIGBlYGB0YcxjYGBwR1Kf2WQZGhhYGBiYGVmgAFGBiQQkOaawtDAoMBQxXjg/wEGPcYDDA4wNUA2CCgwsAAAO4EL6gAAeNpj2M0gyAACqxgGNWBkZ2D4/wMA+xkDdgAAAHjaY2BgYGaAYBkGRgYQiAHyGMF8FgYHIM3DwMHABGQrMOgyWDLEM1T9/w8UBfEMgLzE////P/5//f/V/xv+r4eaAAeMbAxwIUYmIMHEgKYAYjUcsDAwsLKxc3BycfPw8jEQA/gZBASFhEVExcQlJKWkZWTl5BUUlZRVVNXUNTQZBgMAAMR+E+gAEQFEAAAAKgAqACoANAA+AEgAUgBcAGYAcAB6AIQAjgCYAKIArAC2AMAAygDUAN4A6ADyAPwBBgEQARoBJAEuATgBQgFMAVYBYAFqAXQBfgGIAZIBnAGmAbIBzgHsAAB42u2NMQ6CUAyGW568x9AneYYgm4MJbhKFaExIOAVX8ApewSt4Bic4AfeAid3VOBixDxfPYEza5O+Xfi04YADggiUIULCuEJK8VhO4bSvpdnktHI5QCYtdi2sl8ZnXaHlqUrNKzdKcT8cjlq+rwZSvIVczNiezsfnP/uznmfPFBNODM2K7MTQ45YEAZqGP81AmGGcF3iPqOop0r1SPTaTbVkfUe4HXj97wYE+yNwWYxwWu4v1ugWHgo3S1XdZEVqWM7ET0cfnLGxWfkgR42o2PvWrDMBSFj/IHLaF0zKjRgdiVMwScNRAoWUoH78Y2icB/yIY09An6AH2Bdu/UB+yxopYshQiEvnvu0dURgDt8QeC8PDw7Fpji3fEA4z/PEJ6YOB5hKh4dj3EvXhxPqH/SKUY3rJ7srZ4FZnh1PMAtPhwP6fl2PMJMPDgeQ4rY8YT6Gzao0eAEA409DuggmTnFnOcSCiEiLMgxCiTI6Cq5DZUd3Qmp10vO0LaLTd2cjN4fOumlc7lUYbSQcZFkutRG7g6JKZKy0RmdLY680CDnEJ+UMkpFFe1RN7nxdVpXrC4aTtnaurOnYercZg2YVmLN/d/gczfEimrE/fs/bOuq29Zmn8tloORaXgZgGa78yO9/cnXm2BpaGvq25Dv9S4E9+5SIc9PqupJKhYFSSl47+Qcr1mYNAAAAeNptw0cKwkAAAMDZJA8Q7OUJvkLsPfZ6zFVERPy8qHh2YER+3i/BP83vIBLLySsoKimrqKqpa2hp6+jq6RsYGhmbmJqZSy0sraxtbO3sHRydnEMU4uR6yx7JJXveP7WrDycAAAAAAAH//wACeNpjYGRgYOABYhkgZgJCZgZNBkYGLQZtIJsFLMYAAAw3ALgAeNolizEKgDAQBCchRbC2sFER0YD6qVQiBCv/H9ezGI6Z5XBAw8CBK/m5iQQVauVbXLnOrMZv2oLdKFa8Pjuru2hJzGabmOSLzNMzvutpB3N42mNgZGBg4GKQYzBhYMxJLMlj4GBgAYow/P/PAJJhLM6sSoWKfWCAAwDAjgbRAAB42mNgYGBkAIIbCZo5IPrmUn0hGA0AO8EFTQAA"}},r={};function i(e){var n=r[e];if(void 0!==n)return n.exports;var a=r[e]={id:e,exports:{}};return t[e](a,a.exports,i),a.exports}i.m=t,i.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return i.d(n,{a:n}),n},n=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,i.t=function(t,r){if(1&r&&(t=this(t)),8&r)return t;if("object"==typeof t&&t){if(4&r&&t.__esModule)return t;if(16&r&&"function"==typeof t.then)return t}var a=Object.create(null);i.r(a);var s={};e=e||[null,n({}),n([]),n(n)];for(var o=2&r&&t;"object"==typeof o&&!~e.indexOf(o);o=n(o))Object.getOwnPropertyNames(o).forEach((e=>s[e]=()=>t[e]));return s.default=()=>t,i.d(a,s),a},i.d=(e,n)=>{for(var t in n)i.o(n,t)&&!i.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:n[t]})},i.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),i.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),i.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.b=document.baseURI||self.location.href,i.nc=void 0,(()=>{"use strict";var e,n=i(294),t=i.t(n,2),r=i(745),a=i(935),s=i.t(a,2);function o(){return o=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e},o.apply(this,arguments)}!function(e){e.Pop="POP",e.Push="PUSH",e.Replace="REPLACE"}(e||(e={}));const l="popstate";function d(e,n){if(!1===e||null==e)throw new Error(n)}function c(e,n){if(!e){"undefined"!=typeof console&&console.warn(n);try{throw new Error(n)}catch(e){}}}function u(e,n){return{usr:e.state,key:e.key,idx:n}}function p(e,n,t,r){return void 0===t&&(t=null),o({pathname:"string"==typeof e?e:e.pathname,search:"",hash:""},"string"==typeof n?h(n):n,{state:t,key:n&&n.key||r||Math.random().toString(36).substr(2,8)})}function m(e){let{pathname:n="/",search:t="",hash:r=""}=e;return t&&"?"!==t&&(n+="?"===t.charAt(0)?t:"?"+t),r&&"#"!==r&&(n+="#"===r.charAt(0)?r:"#"+r),n}function h(e){let n={};if(e){let t=e.indexOf("#");t>=0&&(n.hash=e.substr(t),e=e.substr(0,t));let r=e.indexOf("?");r>=0&&(n.search=e.substr(r),e=e.substr(0,r)),e&&(n.pathname=e)}return n}var f;function g(e,n,t){void 0===t&&(t="/");let r=O(("string"==typeof n?h(n):n).pathname||"/",t);if(null==r)return null;let i=C(e);!function(e){e.sort(((e,n)=>e.score!==n.score?n.score-e.score:function(e,n){return e.length===n.length&&e.slice(0,-1).every(((e,t)=>e===n[t]))?e[e.length-1]-n[n.length-1]:0}(e.routesMeta.map((e=>e.childrenIndex)),n.routesMeta.map((e=>e.childrenIndex)))))}(i);let a=null;for(let e=0;null==a&&e<i.length;++e)a=D(i[e],x(r));return a}function C(e,n,t,r){void 0===n&&(n=[]),void 0===t&&(t=[]),void 0===r&&(r="");let i=(e,i,a)=>{let s={relativePath:void 0===a?e.path||"":a,caseSensitive:!0===e.caseSensitive,childrenIndex:i,route:e};s.relativePath.startsWith("/")&&(d(s.relativePath.startsWith(r),'Absolute route path "'+s.relativePath+'" nested under path "'+r+'" is not valid. An absolute child route path must start with the combined path of all its parent routes.'),s.relativePath=s.relativePath.slice(r.length));let o=T([r,s.relativePath]),l=t.concat(s);e.children&&e.children.length>0&&(d(!0!==e.index,'Index routes must not have child routes. Please remove all child routes from route path "'+o+'".'),C(e.children,n,l,o)),(null!=e.path||e.index)&&n.push({path:o,score:_(o,e.index),routesMeta:l})};return e.forEach(((e,n)=>{var t;if(""!==e.path&&null!=(t=e.path)&&t.includes("?"))for(let t of A(e.path))i(e,n,t);else i(e,n)})),n}function A(e){let n=e.split("/");if(0===n.length)return[];let[t,...r]=n,i=t.endsWith("?"),a=t.replace(/\?$/,"");if(0===r.length)return i?[a,""]:[a];let s=A(r.join("/")),o=[];return o.push(...s.map((e=>""===e?a:[a,e].join("/")))),i&&o.push(...s),o.map((n=>e.startsWith("/")&&""===n?"/":n))}!function(e){e.data="data",e.deferred="deferred",e.redirect="redirect",e.error="error"}(f||(f={})),new Set(["lazy","caseSensitive","path","id","index","children"]);const v=/^:\w+$/,b=3,y=2,w=1,S=10,P=-2,E=e=>"*"===e;function _(e,n){let t=e.split("/"),r=t.length;return t.some(E)&&(r+=P),n&&(r+=y),t.filter((e=>!E(e))).reduce(((e,n)=>e+(v.test(n)?b:""===n?w:S)),r)}function D(e,n){let{routesMeta:t}=e,r={},i="/",a=[];for(let e=0;e<t.length;++e){let s=t[e],o=e===t.length-1,l="/"===i?n:n.slice(i.length)||"/",d=I({path:s.relativePath,caseSensitive:s.caseSensitive,end:o},l);if(!d)return null;Object.assign(r,d.params);let c=s.route;a.push({params:r,pathname:T([i,d.pathname]),pathnameBase:R(T([i,d.pathnameBase])),route:c}),"/"!==d.pathnameBase&&(i=T([i,d.pathnameBase]))}return a}function I(e,n){"string"==typeof e&&(e={path:e,caseSensitive:!1,end:!0});let[t,r]=function(e,n,t){void 0===n&&(n=!1),void 0===t&&(t=!0),c("*"===e||!e.endsWith("*")||e.endsWith("/*"),'Route path "'+e+'" will be treated as if it were "'+e.replace(/\*$/,"/*")+'" because the `*` character must always follow a `/` in the pattern. To get rid of this warning, please change the route path to "'+e.replace(/\*$/,"/*")+'".');let r=[],i="^"+e.replace(/\/*\*?$/,"").replace(/^\/*/,"/").replace(/[\\.*+^${}|()[\]]/g,"\\$&").replace(/\/:(\w+)(\?)?/g,((e,n,t)=>(r.push({paramName:n,isOptional:null!=t}),t?"/?([^\\/]+)?":"/([^\\/]+)")));return e.endsWith("*")?(r.push({paramName:"*"}),i+="*"===e||"/*"===e?"(.*)$":"(?:\\/(.+)|\\/*)$"):t?i+="\\/*$":""!==e&&"/"!==e&&(i+="(?:(?=\\/|$))"),[new RegExp(i,n?void 0:"i"),r]}(e.path,e.caseSensitive,e.end),i=n.match(t);if(!i)return null;let a=i[0],s=a.replace(/(.)\/+$/,"$1"),o=i.slice(1);return{params:r.reduce(((e,n,t)=>{let{paramName:r,isOptional:i}=n;if("*"===r){let e=o[t]||"";s=a.slice(0,a.length-e.length).replace(/(.)\/+$/,"$1")}const l=o[t];return e[r]=i&&!l?void 0:function(e,n){try{return decodeURIComponent(e)}catch(t){return c(!1,'The value for the URL param "'+n+'" will not be decoded because the string "'+e+'" is a malformed URL segment. This is probably due to a bad percent encoding ('+t+")."),e}}(l||"",r),e}),{}),pathname:a,pathnameBase:s,pattern:e}}function x(e){try{return decodeURI(e)}catch(n){return c(!1,'The URL path "'+e+'" could not be decoded because it is is a malformed URL segment. This is probably due to a bad percent encoding ('+n+")."),e}}function O(e,n){if("/"===n)return e;if(!e.toLowerCase().startsWith(n.toLowerCase()))return null;let t=n.endsWith("/")?n.length-1:n.length,r=e.charAt(t);return r&&"/"!==r?null:e.slice(t)||"/"}function k(e,n,t,r){return"Cannot include a '"+e+"' character in a manually specified `to."+n+"` field ["+JSON.stringify(r)+"].  Please separate it out to the `to."+t+'` field. Alternatively you may provide the full path as a string in <Link to="..."> and the router will parse it for you.'}function L(e){return function(e){return e.filter(((e,n)=>0===n||e.route.path&&e.route.path.length>0))}(e).map(((n,t)=>t===e.length-1?n.pathname:n.pathnameBase))}function U(e,n,t,r){let i;void 0===r&&(r=!1),"string"==typeof e?i=h(e):(i=o({},e),d(!i.pathname||!i.pathname.includes("?"),k("?","pathname","search",i)),d(!i.pathname||!i.pathname.includes("#"),k("#","pathname","hash",i)),d(!i.search||!i.search.includes("#"),k("#","search","hash",i)));let a,s=""===e||""===i.pathname,l=s?"/":i.pathname;if(null==l)a=t;else if(r){let e=n[n.length-1].replace(/^\//,"").split("/");if(l.startsWith("..")){let n=l.split("/");for(;".."===n[0];)n.shift(),e.pop();i.pathname=n.join("/")}a="/"+e.join("/")}else{let e=n.length-1;if(l.startsWith("..")){let n=l.split("/");for(;".."===n[0];)n.shift(),e-=1;i.pathname=n.join("/")}a=e>=0?n[e]:"/"}let c=function(e,n){void 0===n&&(n="/");let{pathname:t,search:r="",hash:i=""}="string"==typeof e?h(e):e,a=t?t.startsWith("/")?t:function(e,n){let t=n.replace(/\/+$/,"").split("/");return e.split("/").forEach((e=>{".."===e?t.length>1&&t.pop():"."!==e&&t.push(e)})),t.length>1?t.join("/"):"/"}(t,n):n;return{pathname:a,search:F(r),hash:M(i)}}(i,a),u=l&&"/"!==l&&l.endsWith("/"),p=(s||"."===l)&&t.endsWith("/");return c.pathname.endsWith("/")||!u&&!p||(c.pathname+="/"),c}const T=e=>e.join("/").replace(/\/\/+/g,"/"),R=e=>e.replace(/\/+$/,"").replace(/^\/*/,"/"),F=e=>e&&"?"!==e?e.startsWith("?")?e:"?"+e:"",M=e=>e&&"#"!==e?e.startsWith("#")?e:"#"+e:"";Error;const N=["post","put","patch","delete"],W=(new Set(N),["get",...N]);function j(){return j=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e},j.apply(this,arguments)}new Set(W),new Set([301,302,303,307,308]),new Set([307,308]),Symbol("deferred");const B=n.createContext(null),z=n.createContext(null),V=n.createContext(null),H=n.createContext(null),J=n.createContext({outlet:null,matches:[],isDataRoute:!1}),G=n.createContext(null);function $(){return null!=n.useContext(H)}function Y(){return $()||d(!1),n.useContext(H).location}function q(e){n.useContext(V).static||n.useLayoutEffect(e)}function Z(){let{isDataRoute:e}=n.useContext(J);return e?function(){let{router:e}=function(e){let t=n.useContext(B);return t||d(!1),t}(re.UseNavigateStable),t=ae(ie.UseNavigateStable),r=n.useRef(!1);q((()=>{r.current=!0}));let i=n.useCallback((function(n,i){void 0===i&&(i={}),r.current&&("number"==typeof n?e.navigate(n):e.navigate(n,j({fromRouteId:t},i)))}),[e,t]);return i}():function(){$()||d(!1);let e=n.useContext(B),{basename:t,navigator:r}=n.useContext(V),{matches:i}=n.useContext(J),{pathname:a}=Y(),s=JSON.stringify(L(i)),o=n.useRef(!1);q((()=>{o.current=!0}));let l=n.useCallback((function(n,i){if(void 0===i&&(i={}),!o.current)return;if("number"==typeof n)return void r.go(n);let l=U(n,JSON.parse(s),a,"path"===i.relative);null==e&&"/"!==t&&(l.pathname="/"===l.pathname?t:T([t,l.pathname])),(i.replace?r.replace:r.push)(l,i.state,i)}),[t,r,s,a,e]);return l}()}function Q(e,t){let{relative:r}=void 0===t?{}:t,{matches:i}=n.useContext(J),{pathname:a}=Y(),s=JSON.stringify(L(i));return n.useMemo((()=>U(e,JSON.parse(s),a,"path"===r)),[e,s,a,r])}function K(t,r,i){$()||d(!1);let{navigator:a}=n.useContext(V),{matches:s}=n.useContext(J),o=s[s.length-1],l=o?o.params:{},c=(o&&o.pathname,o?o.pathnameBase:"/");o&&o.route;let u,p=Y();if(r){var m;let e="string"==typeof r?h(r):r;"/"===c||(null==(m=e.pathname)?void 0:m.startsWith(c))||d(!1),u=e}else u=p;let f=u.pathname||"/",C=g(t,{pathname:"/"===c?f:f.slice(c.length)||"/"}),A=function(e,t,r){var i;if(void 0===t&&(t=[]),void 0===r&&(r=null),null==e){var a;if(null==(a=r)||!a.errors)return null;e=r.matches}let s=e,o=null==(i=r)?void 0:i.errors;if(null!=o){let e=s.findIndex((e=>e.route.id&&(null==o?void 0:o[e.route.id])));e>=0||d(!1),s=s.slice(0,Math.min(s.length,e+1))}return s.reduceRight(((e,i,a)=>{let l=i.route.id?null==o?void 0:o[i.route.id]:null,d=null;r&&(d=i.route.errorElement||ee);let c=t.concat(s.slice(0,a+1)),u=()=>{let t;return t=l?d:i.route.Component?n.createElement(i.route.Component,null):i.route.element?i.route.element:e,n.createElement(te,{match:i,routeContext:{outlet:e,matches:c,isDataRoute:null!=r},children:t})};return r&&(i.route.ErrorBoundary||i.route.errorElement||0===a)?n.createElement(ne,{location:r.location,revalidation:r.revalidation,component:d,error:l,children:u(),routeContext:{outlet:null,matches:c,isDataRoute:!0}}):u()}),null)}(C&&C.map((e=>Object.assign({},e,{params:Object.assign({},l,e.params),pathname:T([c,a.encodeLocation?a.encodeLocation(e.pathname).pathname:e.pathname]),pathnameBase:"/"===e.pathnameBase?c:T([c,a.encodeLocation?a.encodeLocation(e.pathnameBase).pathname:e.pathnameBase])}))),s,i);return r&&A?n.createElement(H.Provider,{value:{location:j({pathname:"/",search:"",hash:"",state:null,key:"default"},u),navigationType:e.Pop}},A):A}function X(){let e=function(){var e;let t=n.useContext(G),r=function(e){let t=n.useContext(z);return t||d(!1),t}(ie.UseRouteError),i=ae(ie.UseRouteError);return t||(null==(e=r.errors)?void 0:e[i])}(),t=function(e){return null!=e&&"number"==typeof e.status&&"string"==typeof e.statusText&&"boolean"==typeof e.internal&&"data"in e}(e)?e.status+" "+e.statusText:e instanceof Error?e.message:JSON.stringify(e),r=e instanceof Error?e.stack:null,i={padding:"0.5rem",backgroundColor:"rgba(200,200,200, 0.5)"};return n.createElement(n.Fragment,null,n.createElement("h2",null,"Unexpected Application Error!"),n.createElement("h3",{style:{fontStyle:"italic"}},t),r?n.createElement("pre",{style:i},r):null,null)}const ee=n.createElement(X,null);class ne extends n.Component{constructor(e){super(e),this.state={location:e.location,revalidation:e.revalidation,error:e.error}}static getDerivedStateFromError(e){return{error:e}}static getDerivedStateFromProps(e,n){return n.location!==e.location||"idle"!==n.revalidation&&"idle"===e.revalidation?{error:e.error,location:e.location,revalidation:e.revalidation}:{error:e.error||n.error,location:n.location,revalidation:e.revalidation||n.revalidation}}componentDidCatch(e,n){console.error("React Router caught the following error during render",e,n)}render(){return this.state.error?n.createElement(J.Provider,{value:this.props.routeContext},n.createElement(G.Provider,{value:this.state.error,children:this.props.component})):this.props.children}}function te(e){let{routeContext:t,match:r,children:i}=e,a=n.useContext(B);return a&&a.static&&a.staticContext&&(r.route.errorElement||r.route.ErrorBoundary)&&(a.staticContext._deepestRenderedBoundaryId=r.route.id),n.createElement(J.Provider,{value:t},i)}var re=function(e){return e.UseBlocker="useBlocker",e.UseRevalidator="useRevalidator",e.UseNavigateStable="useNavigate",e}(re||{}),ie=function(e){return e.UseBlocker="useBlocker",e.UseLoaderData="useLoaderData",e.UseActionData="useActionData",e.UseRouteError="useRouteError",e.UseNavigation="useNavigation",e.UseRouteLoaderData="useRouteLoaderData",e.UseMatches="useMatches",e.UseRevalidator="useRevalidator",e.UseNavigateStable="useNavigate",e.UseRouteId="useRouteId",e}(ie||{});function ae(e){let t=function(e){let t=n.useContext(J);return t||d(!1),t}(),r=t.matches[t.matches.length-1];return r.route.id||d(!1),r.route.id}function se(e){d(!1)}function oe(t){let{basename:r="/",children:i=null,location:a,navigationType:s=e.Pop,navigator:o,static:l=!1}=t;$()&&d(!1);let c=r.replace(/^\/*/,"/"),u=n.useMemo((()=>({basename:c,navigator:o,static:l})),[c,o,l]);"string"==typeof a&&(a=h(a));let{pathname:p="/",search:m="",hash:f="",state:g=null,key:C="default"}=a,A=n.useMemo((()=>{let e=O(p,c);return null==e?null:{location:{pathname:e,search:m,hash:f,state:g,key:C},navigationType:s}}),[c,p,m,f,g,C,s]);return null==A?null:n.createElement(V.Provider,{value:u},n.createElement(H.Provider,{children:i,value:A}))}function le(e){let{children:n,location:t}=e;return K(de(n),t)}function de(e,t){void 0===t&&(t=[]);let r=[];return n.Children.forEach(e,((e,i)=>{if(!n.isValidElement(e))return;let a=[...t,i];if(e.type===n.Fragment)return void r.push.apply(r,de(e.props.children,a));e.type!==se&&d(!1),e.props.index&&e.props.children&&d(!1);let s={id:e.props.id||a.join("-"),caseSensitive:e.props.caseSensitive,element:e.props.element,Component:e.props.Component,index:e.props.index,path:e.props.path,loader:e.props.loader,action:e.props.action,errorElement:e.props.errorElement,ErrorBoundary:e.props.ErrorBoundary,hasErrorBoundary:null!=e.props.ErrorBoundary||null!=e.props.errorElement,shouldRevalidate:e.props.shouldRevalidate,handle:e.props.handle,lazy:e.props.lazy};e.props.children&&(s.children=de(e.props.children,a)),r.push(s)})),r}function ce(){return ce=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e},ce.apply(this,arguments)}t.startTransition,new Promise((()=>{})),n.Component,new Set(["application/x-www-form-urlencoded","multipart/form-data","text/plain"]);const ue=["onClick","relative","reloadDocument","replace","state","target","to","preventScrollReset","unstable_viewTransition"];new Map;const pe=t.startTransition;function me(t){let{basename:r,children:i,future:a,window:s}=t,f=n.useRef();null==f.current&&(f.current=function(n){return void 0===n&&(n={}),function(n,t,r,i){void 0===i&&(i={});let{window:a=document.defaultView,v5Compat:s=!1}=i,c=a.history,h=e.Pop,f=null,g=C();function C(){return(c.state||{idx:null}).idx}function A(){h=e.Pop;let n=C(),t=null==n?null:n-g;g=n,f&&f({action:h,location:b.location,delta:t})}function v(e){let n="null"!==a.location.origin?a.location.origin:a.location.href,t="string"==typeof e?e:m(e);return d(n,"No window.location.(origin|href) available to create URL for href: "+t),new URL(t,n)}null==g&&(g=0,c.replaceState(o({},c.state,{idx:g}),""));let b={get action(){return h},get location(){return n(a,c)},listen(e){if(f)throw new Error("A history only accepts one active listener");return a.addEventListener(l,A),f=e,()=>{a.removeEventListener(l,A),f=null}},createHref:e=>t(a,e),createURL:v,encodeLocation(e){let n=v(e);return{pathname:n.pathname,search:n.search,hash:n.hash}},push:function(n,t){h=e.Push;let i=p(b.location,n,t);r&&r(i,n),g=C()+1;let o=u(i,g),l=b.createHref(i);try{c.pushState(o,"",l)}catch(e){if(e instanceof DOMException&&"DataCloneError"===e.name)throw e;a.location.assign(l)}s&&f&&f({action:h,location:b.location,delta:1})},replace:function(n,t){h=e.Replace;let i=p(b.location,n,t);r&&r(i,n),g=C();let a=u(i,g),o=b.createHref(i);c.replaceState(a,"",o),s&&f&&f({action:h,location:b.location,delta:0})},go:e=>c.go(e)};return b}((function(e,n){let{pathname:t="/",search:r="",hash:i=""}=h(e.location.hash.substr(1));return t.startsWith("/")||t.startsWith(".")||(t="/"+t),p("",{pathname:t,search:r,hash:i},n.state&&n.state.usr||null,n.state&&n.state.key||"default")}),(function(e,n){let t=e.document.querySelector("base"),r="";if(t&&t.getAttribute("href")){let n=e.location.href,t=n.indexOf("#");r=-1===t?n:n.slice(0,t)}return r+"#"+("string"==typeof n?n:m(n))}),(function(e,n){c("/"===e.pathname.charAt(0),"relative pathnames are not supported in hash history.push("+JSON.stringify(n)+")")}),n)}({window:s,v5Compat:!0}));let g=f.current,[C,A]=n.useState({action:g.action,location:g.location}),{v7_startTransition:v}=a||{},b=n.useCallback((e=>{v&&pe?pe((()=>A(e))):A(e)}),[A,v]);return n.useLayoutEffect((()=>g.listen(b)),[g,b]),n.createElement(oe,{basename:r,children:i,location:C.location,navigationType:C.action,navigator:g})}s.flushSync;const he="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement,fe=/^(?:[a-z][a-z0-9+.-]*:|\/\/)/i,ge=n.forwardRef((function(e,t){let r,{onClick:i,relative:a,reloadDocument:s,replace:o,state:l,target:c,to:u,preventScrollReset:p,unstable_viewTransition:h}=e,f=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,ue),{basename:g}=n.useContext(V),C=!1;if("string"==typeof u&&fe.test(u)&&(r=u,he))try{let e=new URL(window.location.href),n=u.startsWith("//")?new URL(e.protocol+u):new URL(u),t=O(n.pathname,g);n.origin===e.origin&&null!=t?u=t+n.search+n.hash:C=!0}catch(e){}let A=function(e,t){let{relative:r}=void 0===t?{}:t;$()||d(!1);let{basename:i,navigator:a}=n.useContext(V),{hash:s,pathname:o,search:l}=Q(e,{relative:r}),c=o;return"/"!==i&&(c="/"===o?i:T([i,o])),a.createHref({pathname:c,search:l,hash:s})}(u,{relative:a}),v=function(e,t){let{target:r,replace:i,state:a,preventScrollReset:s,relative:o,unstable_viewTransition:l}=void 0===t?{}:t,d=Z(),c=Y(),u=Q(e,{relative:o});return n.useCallback((n=>{if(function(e,n){return!(0!==e.button||n&&"_self"!==n||function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}(e))}(n,r)){n.preventDefault();let t=void 0!==i?i:m(c)===m(u);d(e,{replace:t,state:a,preventScrollReset:s,relative:o,unstable_viewTransition:l})}}),[c,d,u,i,a,r,e,s,o,l])}(u,{replace:o,state:l,target:c,preventScrollReset:p,relative:a,unstable_viewTransition:h});return n.createElement("a",ce({},f,{href:r||A,onClick:C||s?i:function(e){i&&i(e),e.defaultPrevented||v(e)},ref:t,target:c}))}));var Ce,Ae;(function(e){e.UseScrollRestoration="useScrollRestoration",e.UseSubmit="useSubmit",e.UseSubmitFetcher="useSubmitFetcher",e.UseFetcher="useFetcher",e.useViewTransitionState="useViewTransitionState"})(Ce||(Ce={})),function(e){e.UseFetcher="useFetcher",e.UseFetchers="useFetchers",e.UseScrollRestoration="useScrollRestoration"}(Ae||(Ae={}));var ve=function(){return ve=Object.assign||function(e){for(var n,t=1,r=arguments.length;t<r;t++)for(var i in n=arguments[t])Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i]);return e},ve.apply(this,arguments)};function be(e,n){var t={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&n.indexOf(r)<0&&(t[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(r=Object.getOwnPropertySymbols(e);i<r.length;i++)n.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(e,r[i])&&(t[r[i]]=e[r[i]])}return t}function ye(e,n,t){if(t||2===arguments.length)for(var r,i=0,a=n.length;i<a;i++)!r&&i in n||(r||(r=Array.prototype.slice.call(n,0,i)),r[i]=n[i]);return e.concat(r||Array.prototype.slice.call(n))}Object.create,Object.create,"function"==typeof SuppressedError&&SuppressedError;var we=i(774),Se=i.n(we),Pe="-ms-",Ee="-moz-",_e="-webkit-",De="comm",Ie="rule",xe="decl",Oe="@import",ke="@keyframes",Le="@layer",Ue=Math.abs,Te=String.fromCharCode,Re=Object.assign;function Fe(e){return e.trim()}function Me(e,n){return(e=n.exec(e))?e[0]:e}function Ne(e,n,t){return e.replace(n,t)}function We(e,n){return e.indexOf(n)}function je(e,n){return 0|e.charCodeAt(n)}function Be(e,n,t){return e.slice(n,t)}function ze(e){return e.length}function Ve(e){return e.length}function He(e,n){return n.push(e),e}function Je(e,n){return e.filter((function(e){return!Me(e,n)}))}var Ge=1,$e=1,Ye=0,qe=0,Ze=0,Qe="";function Ke(e,n,t,r,i,a,s,o){return{value:e,root:n,parent:t,type:r,props:i,children:a,line:Ge,column:$e,length:s,return:"",siblings:o}}function Xe(e,n){return Re(Ke("",null,null,"",null,null,0,e.siblings),e,{length:-e.length},n)}function en(e){for(;e.root;)e=Xe(e.root,{children:[e]});He(e,e.siblings)}function nn(){return Ze=qe>0?je(Qe,--qe):0,$e--,10===Ze&&($e=1,Ge--),Ze}function tn(){return Ze=qe<Ye?je(Qe,qe++):0,$e++,10===Ze&&($e=1,Ge++),Ze}function rn(){return je(Qe,qe)}function an(){return qe}function sn(e,n){return Be(Qe,e,n)}function on(e){switch(e){case 0:case 9:case 10:case 13:case 32:return 5;case 33:case 43:case 44:case 47:case 62:case 64:case 126:case 59:case 123:case 125:return 4;case 58:return 3;case 34:case 39:case 40:case 91:return 2;case 41:case 93:return 1}return 0}function ln(e){return Fe(sn(qe-1,un(91===e?e+2:40===e?e+1:e)))}function dn(e){for(;(Ze=rn())&&Ze<33;)tn();return on(e)>2||on(Ze)>3?"":" "}function cn(e,n){for(;--n&&tn()&&!(Ze<48||Ze>102||Ze>57&&Ze<65||Ze>70&&Ze<97););return sn(e,an()+(n<6&&32==rn()&&32==tn()))}function un(e){for(;tn();)switch(Ze){case e:return qe;case 34:case 39:34!==e&&39!==e&&un(Ze);break;case 40:41===e&&un(e);break;case 92:tn()}return qe}function pn(e,n){for(;tn()&&e+Ze!==57&&(e+Ze!==84||47!==rn()););return"/*"+sn(n,qe-1)+"*"+Te(47===e?e:tn())}function mn(e){for(;!on(rn());)tn();return sn(e,qe)}function hn(e,n){for(var t="",r=0;r<e.length;r++)t+=n(e[r],r,e,n)||"";return t}function fn(e,n,t,r){switch(e.type){case Le:if(e.children.length)break;case Oe:case xe:return e.return=e.return||e.value;case De:return"";case ke:return e.return=e.value+"{"+hn(e.children,r)+"}";case Ie:if(!ze(e.value=e.props.join(",")))return""}return ze(t=hn(e.children,r))?e.return=e.value+"{"+t+"}":""}function gn(e,n,t){switch(function(e,n){return 45^je(e,0)?(((n<<2^je(e,0))<<2^je(e,1))<<2^je(e,2))<<2^je(e,3):0}(e,n)){case 5103:return _e+"print-"+e+e;case 5737:case 4201:case 3177:case 3433:case 1641:case 4457:case 2921:case 5572:case 6356:case 5844:case 3191:case 6645:case 3005:case 6391:case 5879:case 5623:case 6135:case 4599:case 4855:case 4215:case 6389:case 5109:case 5365:case 5621:case 3829:return _e+e+e;case 4789:return Ee+e+e;case 5349:case 4246:case 4810:case 6968:case 2756:return _e+e+Ee+e+Pe+e+e;case 5936:switch(je(e,n+11)){case 114:return _e+e+Pe+Ne(e,/[svh]\w+-[tblr]{2}/,"tb")+e;case 108:return _e+e+Pe+Ne(e,/[svh]\w+-[tblr]{2}/,"tb-rl")+e;case 45:return _e+e+Pe+Ne(e,/[svh]\w+-[tblr]{2}/,"lr")+e}case 6828:case 4268:case 2903:return _e+e+Pe+e+e;case 6165:return _e+e+Pe+"flex-"+e+e;case 5187:return _e+e+Ne(e,/(\w+).+(:[^]+)/,_e+"box-$1$2"+Pe+"flex-$1$2")+e;case 5443:return _e+e+Pe+"flex-item-"+Ne(e,/flex-|-self/g,"")+(Me(e,/flex-|baseline/)?"":Pe+"grid-row-"+Ne(e,/flex-|-self/g,""))+e;case 4675:return _e+e+Pe+"flex-line-pack"+Ne(e,/align-content|flex-|-self/g,"")+e;case 5548:return _e+e+Pe+Ne(e,"shrink","negative")+e;case 5292:return _e+e+Pe+Ne(e,"basis","preferred-size")+e;case 6060:return _e+"box-"+Ne(e,"-grow","")+_e+e+Pe+Ne(e,"grow","positive")+e;case 4554:return _e+Ne(e,/([^-])(transform)/g,"$1"+_e+"$2")+e;case 6187:return Ne(Ne(Ne(e,/(zoom-|grab)/,_e+"$1"),/(image-set)/,_e+"$1"),e,"")+e;case 5495:case 3959:return Ne(e,/(image-set\([^]*)/,_e+"$1$`$1");case 4968:return Ne(Ne(e,/(.+:)(flex-)?(.*)/,_e+"box-pack:$3"+Pe+"flex-pack:$3"),/s.+-b[^;]+/,"justify")+_e+e+e;case 4200:if(!Me(e,/flex-|baseline/))return Pe+"grid-column-align"+Be(e,n)+e;break;case 2592:case 3360:return Pe+Ne(e,"template-","")+e;case 4384:case 3616:return t&&t.some((function(e,t){return n=t,Me(e.props,/grid-\w+-end/)}))?~We(e+(t=t[n].value),"span")?e:Pe+Ne(e,"-start","")+e+Pe+"grid-row-span:"+(~We(t,"span")?Me(t,/\d+/):+Me(t,/\d+/)-+Me(e,/\d+/))+";":Pe+Ne(e,"-start","")+e;case 4896:case 4128:return t&&t.some((function(e){return Me(e.props,/grid-\w+-start/)}))?e:Pe+Ne(Ne(e,"-end","-span"),"span ","")+e;case 4095:case 3583:case 4068:case 2532:return Ne(e,/(.+)-inline(.+)/,_e+"$1$2")+e;case 8116:case 7059:case 5753:case 5535:case 5445:case 5701:case 4933:case 4677:case 5533:case 5789:case 5021:case 4765:if(ze(e)-1-n>6)switch(je(e,n+1)){case 109:if(45!==je(e,n+4))break;case 102:return Ne(e,/(.+:)(.+)-([^]+)/,"$1"+_e+"$2-$3$1"+Ee+(108==je(e,n+3)?"$3":"$2-$3"))+e;case 115:return~We(e,"stretch")?gn(Ne(e,"stretch","fill-available"),n,t)+e:e}break;case 5152:case 5920:return Ne(e,/(.+?):(\d+)(\s*\/\s*(span)?\s*(\d+))?(.*)/,(function(n,t,r,i,a,s,o){return Pe+t+":"+r+o+(i?Pe+t+"-span:"+(a?s:+s-+r)+o:"")+e}));case 4949:if(121===je(e,n+6))return Ne(e,":",":"+_e)+e;break;case 6444:switch(je(e,45===je(e,14)?18:11)){case 120:return Ne(e,/(.+:)([^;\s!]+)(;|(\s+)?!.+)?/,"$1"+_e+(45===je(e,14)?"inline-":"")+"box$3$1"+_e+"$2$3$1"+Pe+"$2box$3")+e;case 100:return Ne(e,":",":"+Pe)+e}break;case 5719:case 2647:case 2135:case 3927:case 2391:return Ne(e,"scroll-","scroll-snap-")+e}return e}function Cn(e,n,t,r){if(e.length>-1&&!e.return)switch(e.type){case xe:return void(e.return=gn(e.value,e.length,t));case ke:return hn([Xe(e,{value:Ne(e.value,"@","@"+_e)})],r);case Ie:if(e.length)return function(e,n){return e.map(n).join("")}(t=e.props,(function(n){switch(Me(n,r=/(::plac\w+|:read-\w+)/)){case":read-only":case":read-write":en(Xe(e,{props:[Ne(n,/:(read-\w+)/,":"+Ee+"$1")]})),en(Xe(e,{props:[n]})),Re(e,{props:Je(t,r)});break;case"::placeholder":en(Xe(e,{props:[Ne(n,/:(plac\w+)/,":"+_e+"input-$1")]})),en(Xe(e,{props:[Ne(n,/:(plac\w+)/,":"+Ee+"$1")]})),en(Xe(e,{props:[Ne(n,/:(plac\w+)/,Pe+"input-$1")]})),en(Xe(e,{props:[n]})),Re(e,{props:Je(t,r)})}return""}))}}function An(e){return function(e){return Qe="",e}(vn("",null,null,null,[""],e=function(e){return Ge=$e=1,Ye=ze(Qe=e),qe=0,[]}(e),0,[0],e))}function vn(e,n,t,r,i,a,s,o,l){for(var d=0,c=0,u=s,p=0,m=0,h=0,f=1,g=1,C=1,A=0,v="",b=i,y=a,w=r,S=v;g;)switch(h=A,A=tn()){case 40:if(108!=h&&58==je(S,u-1)){-1!=We(S+=Ne(ln(A),"&","&\f"),"&\f")&&(C=-1);break}case 34:case 39:case 91:S+=ln(A);break;case 9:case 10:case 13:case 32:S+=dn(h);break;case 92:S+=cn(an()-1,7);continue;case 47:switch(rn()){case 42:case 47:He(yn(pn(tn(),an()),n,t,l),l);break;default:S+="/"}break;case 123*f:o[d++]=ze(S)*C;case 125*f:case 59:case 0:switch(A){case 0:case 125:g=0;case 59+c:-1==C&&(S=Ne(S,/\f/g,"")),m>0&&ze(S)-u&&He(m>32?wn(S+";",r,t,u-1,l):wn(Ne(S," ","")+";",r,t,u-2,l),l);break;case 59:S+=";";default:if(He(w=bn(S,n,t,d,c,i,o,v,b=[],y=[],u,a),a),123===A)if(0===c)vn(S,n,w,w,b,a,u,o,y);else switch(99===p&&110===je(S,3)?100:p){case 100:case 108:case 109:case 115:vn(e,w,w,r&&He(bn(e,w,w,0,0,i,o,v,i,b=[],u,y),y),i,y,u,o,r?b:y);break;default:vn(S,w,w,w,[""],y,0,o,y)}}d=c=m=0,f=C=1,v=S="",u=s;break;case 58:u=1+ze(S),m=h;default:if(f<1)if(123==A)--f;else if(125==A&&0==f++&&125==nn())continue;switch(S+=Te(A),A*f){case 38:C=c>0?1:(S+="\f",-1);break;case 44:o[d++]=(ze(S)-1)*C,C=1;break;case 64:45===rn()&&(S+=ln(tn())),p=rn(),c=u=ze(v=S+=mn(an())),A++;break;case 45:45===h&&2==ze(S)&&(f=0)}}return a}function bn(e,n,t,r,i,a,s,o,l,d,c,u){for(var p=i-1,m=0===i?a:[""],h=Ve(m),f=0,g=0,C=0;f<r;++f)for(var A=0,v=Be(e,p+1,p=Ue(g=s[f])),b=e;A<h;++A)(b=Fe(g>0?m[A]+" "+v:Ne(v,/&\f/g,m[A])))&&(l[C++]=b);return Ke(e,n,t,0===i?Ie:o,l,d,c,u)}function yn(e,n,t,r){return Ke(e,n,t,De,Te(Ze),Be(e,2,-2),0,r)}function wn(e,n,t,r,i){return Ke(e,n,t,xe,Be(e,0,r),Be(e,r+1,-1),r,i)}var Sn={animationIterationCount:1,aspectRatio:1,borderImageOutset:1,borderImageSlice:1,borderImageWidth:1,boxFlex:1,boxFlexGroup:1,boxOrdinalGroup:1,columnCount:1,columns:1,flex:1,flexGrow:1,flexPositive:1,flexShrink:1,flexNegative:1,flexOrder:1,gridRow:1,gridRowEnd:1,gridRowSpan:1,gridRowStart:1,gridColumn:1,gridColumnEnd:1,gridColumnSpan:1,gridColumnStart:1,msGridRow:1,msGridRowSpan:1,msGridColumn:1,msGridColumnSpan:1,fontWeight:1,lineHeight:1,opacity:1,order:1,orphans:1,tabSize:1,widows:1,zIndex:1,zoom:1,WebkitLineClamp:1,fillOpacity:1,floodOpacity:1,stopOpacity:1,strokeDasharray:1,strokeDashoffset:1,strokeMiterlimit:1,strokeOpacity:1,strokeWidth:1},Pn="undefined"!=typeof process&&void 0!=={ALLUSERSPROFILE:"C:\\ProgramData",APPDATA:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming",ChocolateyInstall:"C:\\ProgramData\\chocolatey",ChocolateyLastPathUpdate:"133739169618057786",COLOR:"1",CommonProgramFiles:"C:\\Program Files\\Common Files","CommonProgramFiles(x86)":"C:\\Program Files (x86)\\Common Files",CommonProgramW6432:"C:\\Program Files\\Common Files",COMPUTERNAME:"IBT-WS-062679",ComSpec:"C:\\WINDOWS\\system32\\cmd.exe",DriverData:"C:\\Windows\\System32\\Drivers\\DriverData",EDITOR:"C:\\WINDOWS\\notepad.exe",EFC_9708:"1",FPS_BROWSER_APP_PROFILE_STRING:"Internet Explorer",FPS_BROWSER_USER_PROFILE_STRING:"Default",GoLand:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\GoLand 2023.2.5\\bin;",HOME:"C:\\Users\\mdorsi.tier2.admin",HOMEDRIVE:"C:",HOMEPATH:"\\Users\\mdorsi.tier2.admin",IDEA_INITIAL_DIRECTORY:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\WebStorm 2023.3\\bin",IGCCSVC_DB:"AQAAANCMnd8BFdERjHoAwE/Cl+sBAAAA7DqY1R3HX0aTSSlswK0VlgQAAAACAAAAAAAQZgAAAAEAACAAAABm65ppy4VnMFDUW4UsfN5HPI3yz9rnIpdfVGhrA4zgigAAAAAOgAAAAAIAACAAAABJpvp9a80y9IV5hP6fnCb1uKjNyrXZjdLmSwVxaoJylWAAAADYv8hOqBVUtjT1Cqsh1Xczhe4/q8hfUQ6SA5kSaemR37Yl+0aOG1FimG6uDSlGjhQDyeDwToU/XF4GyH7pVWO2rOVlfzMJbXLy8LJpGAn+JxZN3K0KK3+xDbw+vPjsczBAAAAA2Pth2w7+5O2/1E0Pt9N37mzbN3Q7/+oMWl+T3/m8hiS7sPgeMlEvoaBrgLXIlEi1j3+1o3rII1AJ3+7b3dSClA==",INIT_CWD:"C:\\Users\\mdorsi.tier2.admin\\charlotemichelpage","IntelliJ IDEA":"C:\\Program Files\\JetBrains\\IntelliJ IDEA 2024.1.4\\bin;",JAVA_HOME:"C:\\java\\jdk-17.0.10",LOCALAPPDATA:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local",LOGONSERVER:"\\\\AWW-W-ACADDC01",NODE:"C:\\Program Files\\nodejs\\node.exe",NODE_EXE:"C:\\Program Files\\nodejs\\\\node.exe",NPM_CLI_JS:"C:\\Program Files\\nodejs\\\\node_modules\\npm\\bin\\npm-cli.js",npm_command:"run-script",npm_config_cache:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\npm-cache",npm_config_globalconfig:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm\\etc\\npmrc",npm_config_global_prefix:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm",npm_config_init_module:"C:\\Users\\mdorsi.tier2.admin\\.npm-init.js",npm_config_local_prefix:"C:\\Users\\mdorsi.tier2.admin\\charlotemichelpage",npm_config_node_gyp:"C:\\Program Files\\nodejs\\node_modules\\npm\\node_modules\\node-gyp\\bin\\node-gyp.js",npm_config_noproxy:"",npm_config_npm_version:"10.5.0",npm_config_prefix:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm",npm_config_userconfig:"C:\\Users\\mdorsi.tier2.admin\\.npmrc",npm_config_user_agent:"npm/10.5.0 node/v20.12.2 win32 x64 workspaces/false",npm_execpath:"C:\\Program Files\\nodejs\\node_modules\\npm\\bin\\npm-cli.js",npm_lifecycle_event:"build",npm_lifecycle_script:"webpack --mode production",npm_node_execpath:"C:\\Program Files\\nodejs\\node.exe",npm_package_json:"C:\\Users\\mdorsi.tier2.admin\\charlotemichelpage\\package.json",npm_package_name:"charloterio",npm_package_version:"1.0.0",NPM_PREFIX_NPM_CLI_JS:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm\\node_modules\\npm\\bin\\npm-cli.js",NUMBER_OF_PROCESSORS:"8",OneDrive:"C:\\Users\\mdorsi.tier2.admin\\OneDrive - Corporativo",OneDriveCommercial:"C:\\Users\\mdorsi.tier2.admin\\OneDrive - Corporativo",OneDriveConsumer:"C:\\Users\\mdorsi.tier2.admin\\OneDrive",OS:"Windows_NT",Path:"C:\\Users\\mdorsi.tier2.admin\\charlotemichelpage\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\node_modules\\.bin;C:\\Users\\node_modules\\.bin;C:\\node_modules\\.bin;C:\\Program Files\\nodejs\\node_modules\\npm\\node_modules\\@npmcli\\run-script\\lib\\node-gyp-bin;C:\\Users\\mdorsi.tier2.admin\\charlotemichelpage\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\node_modules\\.bin;C:\\Users\\node_modules\\.bin;C:\\node_modules\\.bin;C:\\Program Files\\nodejs\\node_modules\\npm\\node_modules\\@npmcli\\run-script\\lib\\node-gyp-bin;C:\\Program Files (x86)\\Common Files\\Oracle\\Java\\javapath;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\WINDOWS\\System32\\OpenSSH\\;C:\\Program Files\\dotnet\\;C:\\Program Files (x86)\\Windows Kits\\10\\Windows Performance Toolkit\\;C:\\Program Files\\nodejs\\;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin;C:\\Program Files\\PostgreSQL\\16\\bin;C:\\Program Files\\vtex\\client\\bin;C:\\Program Files\\Git\\cmd;C:\\Users\\mdorsi.tier2.admin\\.fly\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm\\node_modules\\yarn;C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm\\node_modules\\yarn\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Launcher\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python311\\Scripts\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python311\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Microsoft\\WindowsApps;C:\\Program Files\\JetBrains\\IntelliJ IDEA 2024.1.4\\bin;;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python312\\Scripts;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Git\\cmd;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\PyCharm 2023.2.5\\bin;;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\GoLand 2023.2.5\\bin;;C:\\go;C:\\go\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\WebStorm 2023.3\\bin;;C:\\java\\jdk-17.0.10\\bin;C:\\java\\jdk-17.0.10\\lib;C:\\java\\jdk-17.0.10;C:\\java\\jdk-17.0.10\\bin;C:\\Program Files (x86)\\Common Files\\Oracle\\Java\\javapath;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\WINDOWS\\System32\\OpenSSH\\;C:\\Program Files\\dotnet\\;C:\\Program Files (x86)\\Windows Kits\\10\\Windows Performance Toolkit\\;C:\\Program Files\\nodejs\\;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin;C:\\Program Files\\PostgreSQL\\16\\bin;C:\\Program Files\\vtex\\client\\bin;C:\\Program Files\\Git\\cmd;C:\\Program Files\\Docker\\Docker\\resources\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Launcher\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python311\\Scripts\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python311\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Microsoft\\WindowsApps;C:\\Program Files\\JetBrains\\IntelliJ IDEA 2024.1.4\\bin;;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python312\\Scripts;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Git\\cmd;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\PyCharm 2023.2.5\\bin;;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\GoLand 2023.2.5\\bin;;C:\\go;C:\\go\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\WebStorm 2023.3\\bin;;C:\\java\\jdk-17.0.10\\bin;C:\\java\\jdk-17.0.10\\lib;C:\\java\\jdk-17.0.10;C:\\java\\jdk-17.0.10\\bin;C:\\Program Files (x86)\\Common Files\\Oracle\\Java\\javapath;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\WINDOWS\\System32\\OpenSSH\\;C:\\Program Files\\dotnet\\;C:\\Program Files (x86)\\Windows Kits\\10\\Windows Performance Toolkit\\;C:\\Program Files\\nodejs\\;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin;C:\\Program Files\\PostgreSQL\\16\\bin;C:\\Program Files\\vtex\\client\\bin;C:\\Program Files\\Git\\cmd;C:\\Program Files\\Docker\\Docker\\resources\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin;C:\\Users\\mdorsi.tier2.admin\\.cargo\\;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin\\rustup.exe;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\pessoal\\Aplicativos\\PdftoImage\\dependences\\poppler-23.08.0;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\pessoal\\Aplicativos\\PdftoImage\\dependences\\poppler-23.08.0\\Library\\bin;C:\\Users\\mdorsi.tier2.admin\\apache-maven-3.9.9;C:\\Users\\mdorsi.tier2.admin\\apache-maven-3.9.9\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Microsoft VS Code\\bin;;C:\\Program Files\\JetBrains\\PhpStorm 2024.3.1\\bin;;C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin;C:\\Users\\mdorsi.tier2.admin\\.cargo\\;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin\\rustup.exe;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\pessoal\\Aplicativos\\PdftoImage\\dependences\\poppler-23.08.0;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\pessoal\\Aplicativos\\PdftoImage\\dependences\\poppler-23.08.0\\Library\\bin;C:\\Users\\mdorsi.tier2.admin\\apache-maven-3.9.9;C:\\Users\\mdorsi.tier2.admin\\apache-maven-3.9.9\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Microsoft VS Code\\bin;;C:\\Program Files\\JetBrains\\PhpStorm 2024.3.1\\bin;;C:\\Users\\mdorsi.tier2.admin\\.fly\\bin;C:\\Users\\mdorsi.tier2.admin\\CharloteRio\\node_modules\\.bin",PATHEXT:".COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC;.CPL",PhpStorm:"C:\\Program Files\\JetBrains\\PhpStorm 2024.3.1\\bin;",PLMVIS_82_LIBPATH:"C:\\Program Files (x86)\\SAP\\FrontEnd\\SAPgui\\Program",PROCESSOR_ARCHITECTURE:"AMD64",PROCESSOR_IDENTIFIER:"Intel64 Family 6 Model 140 Stepping 1, GenuineIntel",PROCESSOR_LEVEL:"6",PROCESSOR_REVISION:"8c01",ProgramData:"C:\\ProgramData",ProgramFiles:"C:\\Program Files","ProgramFiles(x86)":"C:\\Program Files (x86)",ProgramW6432:"C:\\Program Files",PROMPT:"$P$G",PSExecutionPolicyPreference:"Bypass",PSModulePath:"C:\\Users\\mdorsi.tier2.admin\\OneDrive\\Documentos\\WindowsPowerShell\\Modules;C:\\Program Files\\WindowsPowerShell\\Modules;C:\\WINDOWS\\system32\\WindowsPowerShell\\v1.0\\Modules",PT8HOME:"C:\\Program Files\\Cisco Packet Tracer 8.2.2",PUBLIC:"C:\\Users\\Public",PyCharm:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\PyCharm 2023.2.5\\bin;",SESSIONNAME:"Console",SystemDrive:"C:",SystemRoot:"C:\\WINDOWS",TEMP:"C:\\Users\\MDORSI~1.ADM\\AppData\\Local\\Temp",TERMINAL_EMULATOR:"JetBrains-JediTerm",TERM_SESSION_ID:"f1913f5b-8352-4ffb-9a3e-e115e4486275",TMP:"C:\\Users\\MDORSI~1.ADM\\AppData\\Local\\Temp",USERDNSDOMAIN:"EDUC.ACAD",USERDOMAIN:"EDUCACAD",USERDOMAIN_ROAMINGPROFILE:"EDUCACAD",USERNAME:"mdorsi.tier2.admin",USERPROFILE:"C:\\Users\\mdorsi.tier2.admin",WebStorm:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\WebStorm 2023.3\\bin;",windir:"C:\\WINDOWS",ZES_ENABLE_SYSMAN:"1"}&&({ALLUSERSPROFILE:"C:\\ProgramData",APPDATA:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming",ChocolateyInstall:"C:\\ProgramData\\chocolatey",ChocolateyLastPathUpdate:"133739169618057786",COLOR:"1",CommonProgramFiles:"C:\\Program Files\\Common Files","CommonProgramFiles(x86)":"C:\\Program Files (x86)\\Common Files",CommonProgramW6432:"C:\\Program Files\\Common Files",COMPUTERNAME:"IBT-WS-062679",ComSpec:"C:\\WINDOWS\\system32\\cmd.exe",DriverData:"C:\\Windows\\System32\\Drivers\\DriverData",EDITOR:"C:\\WINDOWS\\notepad.exe",EFC_9708:"1",FPS_BROWSER_APP_PROFILE_STRING:"Internet Explorer",FPS_BROWSER_USER_PROFILE_STRING:"Default",GoLand:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\GoLand 2023.2.5\\bin;",HOME:"C:\\Users\\mdorsi.tier2.admin",HOMEDRIVE:"C:",HOMEPATH:"\\Users\\mdorsi.tier2.admin",IDEA_INITIAL_DIRECTORY:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\WebStorm 2023.3\\bin",IGCCSVC_DB:"AQAAANCMnd8BFdERjHoAwE/Cl+sBAAAA7DqY1R3HX0aTSSlswK0VlgQAAAACAAAAAAAQZgAAAAEAACAAAABm65ppy4VnMFDUW4UsfN5HPI3yz9rnIpdfVGhrA4zgigAAAAAOgAAAAAIAACAAAABJpvp9a80y9IV5hP6fnCb1uKjNyrXZjdLmSwVxaoJylWAAAADYv8hOqBVUtjT1Cqsh1Xczhe4/q8hfUQ6SA5kSaemR37Yl+0aOG1FimG6uDSlGjhQDyeDwToU/XF4GyH7pVWO2rOVlfzMJbXLy8LJpGAn+JxZN3K0KK3+xDbw+vPjsczBAAAAA2Pth2w7+5O2/1E0Pt9N37mzbN3Q7/+oMWl+T3/m8hiS7sPgeMlEvoaBrgLXIlEi1j3+1o3rII1AJ3+7b3dSClA==",INIT_CWD:"C:\\Users\\mdorsi.tier2.admin\\charlotemichelpage","IntelliJ IDEA":"C:\\Program Files\\JetBrains\\IntelliJ IDEA 2024.1.4\\bin;",JAVA_HOME:"C:\\java\\jdk-17.0.10",LOCALAPPDATA:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local",LOGONSERVER:"\\\\AWW-W-ACADDC01",NODE:"C:\\Program Files\\nodejs\\node.exe",NODE_EXE:"C:\\Program Files\\nodejs\\\\node.exe",NPM_CLI_JS:"C:\\Program Files\\nodejs\\\\node_modules\\npm\\bin\\npm-cli.js",npm_command:"run-script",npm_config_cache:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\npm-cache",npm_config_globalconfig:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm\\etc\\npmrc",npm_config_global_prefix:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm",npm_config_init_module:"C:\\Users\\mdorsi.tier2.admin\\.npm-init.js",npm_config_local_prefix:"C:\\Users\\mdorsi.tier2.admin\\charlotemichelpage",npm_config_node_gyp:"C:\\Program Files\\nodejs\\node_modules\\npm\\node_modules\\node-gyp\\bin\\node-gyp.js",npm_config_noproxy:"",npm_config_npm_version:"10.5.0",npm_config_prefix:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm",npm_config_userconfig:"C:\\Users\\mdorsi.tier2.admin\\.npmrc",npm_config_user_agent:"npm/10.5.0 node/v20.12.2 win32 x64 workspaces/false",npm_execpath:"C:\\Program Files\\nodejs\\node_modules\\npm\\bin\\npm-cli.js",npm_lifecycle_event:"build",npm_lifecycle_script:"webpack --mode production",npm_node_execpath:"C:\\Program Files\\nodejs\\node.exe",npm_package_json:"C:\\Users\\mdorsi.tier2.admin\\charlotemichelpage\\package.json",npm_package_name:"charloterio",npm_package_version:"1.0.0",NPM_PREFIX_NPM_CLI_JS:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm\\node_modules\\npm\\bin\\npm-cli.js",NUMBER_OF_PROCESSORS:"8",OneDrive:"C:\\Users\\mdorsi.tier2.admin\\OneDrive - Corporativo",OneDriveCommercial:"C:\\Users\\mdorsi.tier2.admin\\OneDrive - Corporativo",OneDriveConsumer:"C:\\Users\\mdorsi.tier2.admin\\OneDrive",OS:"Windows_NT",Path:"C:\\Users\\mdorsi.tier2.admin\\charlotemichelpage\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\node_modules\\.bin;C:\\Users\\node_modules\\.bin;C:\\node_modules\\.bin;C:\\Program Files\\nodejs\\node_modules\\npm\\node_modules\\@npmcli\\run-script\\lib\\node-gyp-bin;C:\\Users\\mdorsi.tier2.admin\\charlotemichelpage\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\node_modules\\.bin;C:\\Users\\node_modules\\.bin;C:\\node_modules\\.bin;C:\\Program Files\\nodejs\\node_modules\\npm\\node_modules\\@npmcli\\run-script\\lib\\node-gyp-bin;C:\\Program Files (x86)\\Common Files\\Oracle\\Java\\javapath;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\WINDOWS\\System32\\OpenSSH\\;C:\\Program Files\\dotnet\\;C:\\Program Files (x86)\\Windows Kits\\10\\Windows Performance Toolkit\\;C:\\Program Files\\nodejs\\;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin;C:\\Program Files\\PostgreSQL\\16\\bin;C:\\Program Files\\vtex\\client\\bin;C:\\Program Files\\Git\\cmd;C:\\Users\\mdorsi.tier2.admin\\.fly\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm\\node_modules\\yarn;C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm\\node_modules\\yarn\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Launcher\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python311\\Scripts\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python311\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Microsoft\\WindowsApps;C:\\Program Files\\JetBrains\\IntelliJ IDEA 2024.1.4\\bin;;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python312\\Scripts;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Git\\cmd;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\PyCharm 2023.2.5\\bin;;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\GoLand 2023.2.5\\bin;;C:\\go;C:\\go\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\WebStorm 2023.3\\bin;;C:\\java\\jdk-17.0.10\\bin;C:\\java\\jdk-17.0.10\\lib;C:\\java\\jdk-17.0.10;C:\\java\\jdk-17.0.10\\bin;C:\\Program Files (x86)\\Common Files\\Oracle\\Java\\javapath;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\WINDOWS\\System32\\OpenSSH\\;C:\\Program Files\\dotnet\\;C:\\Program Files (x86)\\Windows Kits\\10\\Windows Performance Toolkit\\;C:\\Program Files\\nodejs\\;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin;C:\\Program Files\\PostgreSQL\\16\\bin;C:\\Program Files\\vtex\\client\\bin;C:\\Program Files\\Git\\cmd;C:\\Program Files\\Docker\\Docker\\resources\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Launcher\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python311\\Scripts\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python311\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Microsoft\\WindowsApps;C:\\Program Files\\JetBrains\\IntelliJ IDEA 2024.1.4\\bin;;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python312\\Scripts;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Git\\cmd;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\PyCharm 2023.2.5\\bin;;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\GoLand 2023.2.5\\bin;;C:\\go;C:\\go\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\WebStorm 2023.3\\bin;;C:\\java\\jdk-17.0.10\\bin;C:\\java\\jdk-17.0.10\\lib;C:\\java\\jdk-17.0.10;C:\\java\\jdk-17.0.10\\bin;C:\\Program Files (x86)\\Common Files\\Oracle\\Java\\javapath;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\WINDOWS\\System32\\OpenSSH\\;C:\\Program Files\\dotnet\\;C:\\Program Files (x86)\\Windows Kits\\10\\Windows Performance Toolkit\\;C:\\Program Files\\nodejs\\;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin;C:\\Program Files\\PostgreSQL\\16\\bin;C:\\Program Files\\vtex\\client\\bin;C:\\Program Files\\Git\\cmd;C:\\Program Files\\Docker\\Docker\\resources\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin;C:\\Users\\mdorsi.tier2.admin\\.cargo\\;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin\\rustup.exe;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\pessoal\\Aplicativos\\PdftoImage\\dependences\\poppler-23.08.0;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\pessoal\\Aplicativos\\PdftoImage\\dependences\\poppler-23.08.0\\Library\\bin;C:\\Users\\mdorsi.tier2.admin\\apache-maven-3.9.9;C:\\Users\\mdorsi.tier2.admin\\apache-maven-3.9.9\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Microsoft VS Code\\bin;;C:\\Program Files\\JetBrains\\PhpStorm 2024.3.1\\bin;;C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin;C:\\Users\\mdorsi.tier2.admin\\.cargo\\;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin\\rustup.exe;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\pessoal\\Aplicativos\\PdftoImage\\dependences\\poppler-23.08.0;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\pessoal\\Aplicativos\\PdftoImage\\dependences\\poppler-23.08.0\\Library\\bin;C:\\Users\\mdorsi.tier2.admin\\apache-maven-3.9.9;C:\\Users\\mdorsi.tier2.admin\\apache-maven-3.9.9\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Microsoft VS Code\\bin;;C:\\Program Files\\JetBrains\\PhpStorm 2024.3.1\\bin;;C:\\Users\\mdorsi.tier2.admin\\.fly\\bin;C:\\Users\\mdorsi.tier2.admin\\CharloteRio\\node_modules\\.bin",PATHEXT:".COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC;.CPL",PhpStorm:"C:\\Program Files\\JetBrains\\PhpStorm 2024.3.1\\bin;",PLMVIS_82_LIBPATH:"C:\\Program Files (x86)\\SAP\\FrontEnd\\SAPgui\\Program",PROCESSOR_ARCHITECTURE:"AMD64",PROCESSOR_IDENTIFIER:"Intel64 Family 6 Model 140 Stepping 1, GenuineIntel",PROCESSOR_LEVEL:"6",PROCESSOR_REVISION:"8c01",ProgramData:"C:\\ProgramData",ProgramFiles:"C:\\Program Files","ProgramFiles(x86)":"C:\\Program Files (x86)",ProgramW6432:"C:\\Program Files",PROMPT:"$P$G",PSExecutionPolicyPreference:"Bypass",PSModulePath:"C:\\Users\\mdorsi.tier2.admin\\OneDrive\\Documentos\\WindowsPowerShell\\Modules;C:\\Program Files\\WindowsPowerShell\\Modules;C:\\WINDOWS\\system32\\WindowsPowerShell\\v1.0\\Modules",PT8HOME:"C:\\Program Files\\Cisco Packet Tracer 8.2.2",PUBLIC:"C:\\Users\\Public",PyCharm:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\PyCharm 2023.2.5\\bin;",SESSIONNAME:"Console",SystemDrive:"C:",SystemRoot:"C:\\WINDOWS",TEMP:"C:\\Users\\MDORSI~1.ADM\\AppData\\Local\\Temp",TERMINAL_EMULATOR:"JetBrains-JediTerm",TERM_SESSION_ID:"f1913f5b-8352-4ffb-9a3e-e115e4486275",TMP:"C:\\Users\\MDORSI~1.ADM\\AppData\\Local\\Temp",USERDNSDOMAIN:"EDUC.ACAD",USERDOMAIN:"EDUCACAD",USERDOMAIN_ROAMINGPROFILE:"EDUCACAD",USERNAME:"mdorsi.tier2.admin",USERPROFILE:"C:\\Users\\mdorsi.tier2.admin",WebStorm:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\WebStorm 2023.3\\bin;",windir:"C:\\WINDOWS",ZES_ENABLE_SYSMAN:"1"}.REACT_APP_SC_ATTR||{ALLUSERSPROFILE:"C:\\ProgramData",APPDATA:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming",ChocolateyInstall:"C:\\ProgramData\\chocolatey",ChocolateyLastPathUpdate:"133739169618057786",COLOR:"1",CommonProgramFiles:"C:\\Program Files\\Common Files","CommonProgramFiles(x86)":"C:\\Program Files (x86)\\Common Files",CommonProgramW6432:"C:\\Program Files\\Common Files",COMPUTERNAME:"IBT-WS-062679",ComSpec:"C:\\WINDOWS\\system32\\cmd.exe",DriverData:"C:\\Windows\\System32\\Drivers\\DriverData",EDITOR:"C:\\WINDOWS\\notepad.exe",EFC_9708:"1",FPS_BROWSER_APP_PROFILE_STRING:"Internet Explorer",FPS_BROWSER_USER_PROFILE_STRING:"Default",GoLand:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\GoLand 2023.2.5\\bin;",HOME:"C:\\Users\\mdorsi.tier2.admin",HOMEDRIVE:"C:",HOMEPATH:"\\Users\\mdorsi.tier2.admin",IDEA_INITIAL_DIRECTORY:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\WebStorm 2023.3\\bin",IGCCSVC_DB:"AQAAANCMnd8BFdERjHoAwE/Cl+sBAAAA7DqY1R3HX0aTSSlswK0VlgQAAAACAAAAAAAQZgAAAAEAACAAAABm65ppy4VnMFDUW4UsfN5HPI3yz9rnIpdfVGhrA4zgigAAAAAOgAAAAAIAACAAAABJpvp9a80y9IV5hP6fnCb1uKjNyrXZjdLmSwVxaoJylWAAAADYv8hOqBVUtjT1Cqsh1Xczhe4/q8hfUQ6SA5kSaemR37Yl+0aOG1FimG6uDSlGjhQDyeDwToU/XF4GyH7pVWO2rOVlfzMJbXLy8LJpGAn+JxZN3K0KK3+xDbw+vPjsczBAAAAA2Pth2w7+5O2/1E0Pt9N37mzbN3Q7/+oMWl+T3/m8hiS7sPgeMlEvoaBrgLXIlEi1j3+1o3rII1AJ3+7b3dSClA==",INIT_CWD:"C:\\Users\\mdorsi.tier2.admin\\charlotemichelpage","IntelliJ IDEA":"C:\\Program Files\\JetBrains\\IntelliJ IDEA 2024.1.4\\bin;",JAVA_HOME:"C:\\java\\jdk-17.0.10",LOCALAPPDATA:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local",LOGONSERVER:"\\\\AWW-W-ACADDC01",NODE:"C:\\Program Files\\nodejs\\node.exe",NODE_EXE:"C:\\Program Files\\nodejs\\\\node.exe",NPM_CLI_JS:"C:\\Program Files\\nodejs\\\\node_modules\\npm\\bin\\npm-cli.js",npm_command:"run-script",npm_config_cache:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\npm-cache",npm_config_globalconfig:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm\\etc\\npmrc",npm_config_global_prefix:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm",npm_config_init_module:"C:\\Users\\mdorsi.tier2.admin\\.npm-init.js",npm_config_local_prefix:"C:\\Users\\mdorsi.tier2.admin\\charlotemichelpage",npm_config_node_gyp:"C:\\Program Files\\nodejs\\node_modules\\npm\\node_modules\\node-gyp\\bin\\node-gyp.js",npm_config_noproxy:"",npm_config_npm_version:"10.5.0",npm_config_prefix:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm",npm_config_userconfig:"C:\\Users\\mdorsi.tier2.admin\\.npmrc",npm_config_user_agent:"npm/10.5.0 node/v20.12.2 win32 x64 workspaces/false",npm_execpath:"C:\\Program Files\\nodejs\\node_modules\\npm\\bin\\npm-cli.js",npm_lifecycle_event:"build",npm_lifecycle_script:"webpack --mode production",npm_node_execpath:"C:\\Program Files\\nodejs\\node.exe",npm_package_json:"C:\\Users\\mdorsi.tier2.admin\\charlotemichelpage\\package.json",npm_package_name:"charloterio",npm_package_version:"1.0.0",NPM_PREFIX_NPM_CLI_JS:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm\\node_modules\\npm\\bin\\npm-cli.js",NUMBER_OF_PROCESSORS:"8",OneDrive:"C:\\Users\\mdorsi.tier2.admin\\OneDrive - Corporativo",OneDriveCommercial:"C:\\Users\\mdorsi.tier2.admin\\OneDrive - Corporativo",OneDriveConsumer:"C:\\Users\\mdorsi.tier2.admin\\OneDrive",OS:"Windows_NT",Path:"C:\\Users\\mdorsi.tier2.admin\\charlotemichelpage\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\node_modules\\.bin;C:\\Users\\node_modules\\.bin;C:\\node_modules\\.bin;C:\\Program Files\\nodejs\\node_modules\\npm\\node_modules\\@npmcli\\run-script\\lib\\node-gyp-bin;C:\\Users\\mdorsi.tier2.admin\\charlotemichelpage\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\node_modules\\.bin;C:\\Users\\node_modules\\.bin;C:\\node_modules\\.bin;C:\\Program Files\\nodejs\\node_modules\\npm\\node_modules\\@npmcli\\run-script\\lib\\node-gyp-bin;C:\\Program Files (x86)\\Common Files\\Oracle\\Java\\javapath;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\WINDOWS\\System32\\OpenSSH\\;C:\\Program Files\\dotnet\\;C:\\Program Files (x86)\\Windows Kits\\10\\Windows Performance Toolkit\\;C:\\Program Files\\nodejs\\;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin;C:\\Program Files\\PostgreSQL\\16\\bin;C:\\Program Files\\vtex\\client\\bin;C:\\Program Files\\Git\\cmd;C:\\Users\\mdorsi.tier2.admin\\.fly\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm\\node_modules\\yarn;C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm\\node_modules\\yarn\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Launcher\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python311\\Scripts\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python311\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Microsoft\\WindowsApps;C:\\Program Files\\JetBrains\\IntelliJ IDEA 2024.1.4\\bin;;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python312\\Scripts;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Git\\cmd;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\PyCharm 2023.2.5\\bin;;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\GoLand 2023.2.5\\bin;;C:\\go;C:\\go\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\WebStorm 2023.3\\bin;;C:\\java\\jdk-17.0.10\\bin;C:\\java\\jdk-17.0.10\\lib;C:\\java\\jdk-17.0.10;C:\\java\\jdk-17.0.10\\bin;C:\\Program Files (x86)\\Common Files\\Oracle\\Java\\javapath;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\WINDOWS\\System32\\OpenSSH\\;C:\\Program Files\\dotnet\\;C:\\Program Files (x86)\\Windows Kits\\10\\Windows Performance Toolkit\\;C:\\Program Files\\nodejs\\;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin;C:\\Program Files\\PostgreSQL\\16\\bin;C:\\Program Files\\vtex\\client\\bin;C:\\Program Files\\Git\\cmd;C:\\Program Files\\Docker\\Docker\\resources\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Launcher\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python311\\Scripts\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python311\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Microsoft\\WindowsApps;C:\\Program Files\\JetBrains\\IntelliJ IDEA 2024.1.4\\bin;;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python312\\Scripts;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Git\\cmd;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\PyCharm 2023.2.5\\bin;;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\GoLand 2023.2.5\\bin;;C:\\go;C:\\go\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\WebStorm 2023.3\\bin;;C:\\java\\jdk-17.0.10\\bin;C:\\java\\jdk-17.0.10\\lib;C:\\java\\jdk-17.0.10;C:\\java\\jdk-17.0.10\\bin;C:\\Program Files (x86)\\Common Files\\Oracle\\Java\\javapath;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\WINDOWS\\System32\\OpenSSH\\;C:\\Program Files\\dotnet\\;C:\\Program Files (x86)\\Windows Kits\\10\\Windows Performance Toolkit\\;C:\\Program Files\\nodejs\\;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin;C:\\Program Files\\PostgreSQL\\16\\bin;C:\\Program Files\\vtex\\client\\bin;C:\\Program Files\\Git\\cmd;C:\\Program Files\\Docker\\Docker\\resources\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin;C:\\Users\\mdorsi.tier2.admin\\.cargo\\;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin\\rustup.exe;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\pessoal\\Aplicativos\\PdftoImage\\dependences\\poppler-23.08.0;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\pessoal\\Aplicativos\\PdftoImage\\dependences\\poppler-23.08.0\\Library\\bin;C:\\Users\\mdorsi.tier2.admin\\apache-maven-3.9.9;C:\\Users\\mdorsi.tier2.admin\\apache-maven-3.9.9\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Microsoft VS Code\\bin;;C:\\Program Files\\JetBrains\\PhpStorm 2024.3.1\\bin;;C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin;C:\\Users\\mdorsi.tier2.admin\\.cargo\\;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin\\rustup.exe;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\pessoal\\Aplicativos\\PdftoImage\\dependences\\poppler-23.08.0;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\pessoal\\Aplicativos\\PdftoImage\\dependences\\poppler-23.08.0\\Library\\bin;C:\\Users\\mdorsi.tier2.admin\\apache-maven-3.9.9;C:\\Users\\mdorsi.tier2.admin\\apache-maven-3.9.9\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Microsoft VS Code\\bin;;C:\\Program Files\\JetBrains\\PhpStorm 2024.3.1\\bin;;C:\\Users\\mdorsi.tier2.admin\\.fly\\bin;C:\\Users\\mdorsi.tier2.admin\\CharloteRio\\node_modules\\.bin",PATHEXT:".COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC;.CPL",PhpStorm:"C:\\Program Files\\JetBrains\\PhpStorm 2024.3.1\\bin;",PLMVIS_82_LIBPATH:"C:\\Program Files (x86)\\SAP\\FrontEnd\\SAPgui\\Program",PROCESSOR_ARCHITECTURE:"AMD64",PROCESSOR_IDENTIFIER:"Intel64 Family 6 Model 140 Stepping 1, GenuineIntel",PROCESSOR_LEVEL:"6",PROCESSOR_REVISION:"8c01",ProgramData:"C:\\ProgramData",ProgramFiles:"C:\\Program Files","ProgramFiles(x86)":"C:\\Program Files (x86)",ProgramW6432:"C:\\Program Files",PROMPT:"$P$G",PSExecutionPolicyPreference:"Bypass",PSModulePath:"C:\\Users\\mdorsi.tier2.admin\\OneDrive\\Documentos\\WindowsPowerShell\\Modules;C:\\Program Files\\WindowsPowerShell\\Modules;C:\\WINDOWS\\system32\\WindowsPowerShell\\v1.0\\Modules",PT8HOME:"C:\\Program Files\\Cisco Packet Tracer 8.2.2",PUBLIC:"C:\\Users\\Public",PyCharm:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\PyCharm 2023.2.5\\bin;",SESSIONNAME:"Console",SystemDrive:"C:",SystemRoot:"C:\\WINDOWS",TEMP:"C:\\Users\\MDORSI~1.ADM\\AppData\\Local\\Temp",TERMINAL_EMULATOR:"JetBrains-JediTerm",TERM_SESSION_ID:"f1913f5b-8352-4ffb-9a3e-e115e4486275",TMP:"C:\\Users\\MDORSI~1.ADM\\AppData\\Local\\Temp",USERDNSDOMAIN:"EDUC.ACAD",USERDOMAIN:"EDUCACAD",USERDOMAIN_ROAMINGPROFILE:"EDUCACAD",USERNAME:"mdorsi.tier2.admin",USERPROFILE:"C:\\Users\\mdorsi.tier2.admin",WebStorm:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\WebStorm 2023.3\\bin;",windir:"C:\\WINDOWS",ZES_ENABLE_SYSMAN:"1"}.SC_ATTR)||"data-styled",En="undefined"!=typeof window&&"HTMLElement"in window,_n=Boolean("boolean"==typeof SC_DISABLE_SPEEDY?SC_DISABLE_SPEEDY:"undefined"!=typeof process&&void 0!=={ALLUSERSPROFILE:"C:\\ProgramData",APPDATA:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming",ChocolateyInstall:"C:\\ProgramData\\chocolatey",ChocolateyLastPathUpdate:"133739169618057786",COLOR:"1",CommonProgramFiles:"C:\\Program Files\\Common Files","CommonProgramFiles(x86)":"C:\\Program Files (x86)\\Common Files",CommonProgramW6432:"C:\\Program Files\\Common Files",COMPUTERNAME:"IBT-WS-062679",ComSpec:"C:\\WINDOWS\\system32\\cmd.exe",DriverData:"C:\\Windows\\System32\\Drivers\\DriverData",EDITOR:"C:\\WINDOWS\\notepad.exe",EFC_9708:"1",FPS_BROWSER_APP_PROFILE_STRING:"Internet Explorer",FPS_BROWSER_USER_PROFILE_STRING:"Default",GoLand:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\GoLand 2023.2.5\\bin;",HOME:"C:\\Users\\mdorsi.tier2.admin",HOMEDRIVE:"C:",HOMEPATH:"\\Users\\mdorsi.tier2.admin",IDEA_INITIAL_DIRECTORY:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\WebStorm 2023.3\\bin",IGCCSVC_DB:"AQAAANCMnd8BFdERjHoAwE/Cl+sBAAAA7DqY1R3HX0aTSSlswK0VlgQAAAACAAAAAAAQZgAAAAEAACAAAABm65ppy4VnMFDUW4UsfN5HPI3yz9rnIpdfVGhrA4zgigAAAAAOgAAAAAIAACAAAABJpvp9a80y9IV5hP6fnCb1uKjNyrXZjdLmSwVxaoJylWAAAADYv8hOqBVUtjT1Cqsh1Xczhe4/q8hfUQ6SA5kSaemR37Yl+0aOG1FimG6uDSlGjhQDyeDwToU/XF4GyH7pVWO2rOVlfzMJbXLy8LJpGAn+JxZN3K0KK3+xDbw+vPjsczBAAAAA2Pth2w7+5O2/1E0Pt9N37mzbN3Q7/+oMWl+T3/m8hiS7sPgeMlEvoaBrgLXIlEi1j3+1o3rII1AJ3+7b3dSClA==",INIT_CWD:"C:\\Users\\mdorsi.tier2.admin\\charlotemichelpage","IntelliJ IDEA":"C:\\Program Files\\JetBrains\\IntelliJ IDEA 2024.1.4\\bin;",JAVA_HOME:"C:\\java\\jdk-17.0.10",LOCALAPPDATA:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local",LOGONSERVER:"\\\\AWW-W-ACADDC01",NODE:"C:\\Program Files\\nodejs\\node.exe",NODE_EXE:"C:\\Program Files\\nodejs\\\\node.exe",NPM_CLI_JS:"C:\\Program Files\\nodejs\\\\node_modules\\npm\\bin\\npm-cli.js",npm_command:"run-script",npm_config_cache:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\npm-cache",npm_config_globalconfig:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm\\etc\\npmrc",npm_config_global_prefix:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm",npm_config_init_module:"C:\\Users\\mdorsi.tier2.admin\\.npm-init.js",npm_config_local_prefix:"C:\\Users\\mdorsi.tier2.admin\\charlotemichelpage",npm_config_node_gyp:"C:\\Program Files\\nodejs\\node_modules\\npm\\node_modules\\node-gyp\\bin\\node-gyp.js",npm_config_noproxy:"",npm_config_npm_version:"10.5.0",npm_config_prefix:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm",npm_config_userconfig:"C:\\Users\\mdorsi.tier2.admin\\.npmrc",npm_config_user_agent:"npm/10.5.0 node/v20.12.2 win32 x64 workspaces/false",npm_execpath:"C:\\Program Files\\nodejs\\node_modules\\npm\\bin\\npm-cli.js",npm_lifecycle_event:"build",npm_lifecycle_script:"webpack --mode production",npm_node_execpath:"C:\\Program Files\\nodejs\\node.exe",npm_package_json:"C:\\Users\\mdorsi.tier2.admin\\charlotemichelpage\\package.json",npm_package_name:"charloterio",npm_package_version:"1.0.0",NPM_PREFIX_NPM_CLI_JS:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm\\node_modules\\npm\\bin\\npm-cli.js",NUMBER_OF_PROCESSORS:"8",OneDrive:"C:\\Users\\mdorsi.tier2.admin\\OneDrive - Corporativo",OneDriveCommercial:"C:\\Users\\mdorsi.tier2.admin\\OneDrive - Corporativo",OneDriveConsumer:"C:\\Users\\mdorsi.tier2.admin\\OneDrive",OS:"Windows_NT",Path:"C:\\Users\\mdorsi.tier2.admin\\charlotemichelpage\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\node_modules\\.bin;C:\\Users\\node_modules\\.bin;C:\\node_modules\\.bin;C:\\Program Files\\nodejs\\node_modules\\npm\\node_modules\\@npmcli\\run-script\\lib\\node-gyp-bin;C:\\Users\\mdorsi.tier2.admin\\charlotemichelpage\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\node_modules\\.bin;C:\\Users\\node_modules\\.bin;C:\\node_modules\\.bin;C:\\Program Files\\nodejs\\node_modules\\npm\\node_modules\\@npmcli\\run-script\\lib\\node-gyp-bin;C:\\Program Files (x86)\\Common Files\\Oracle\\Java\\javapath;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\WINDOWS\\System32\\OpenSSH\\;C:\\Program Files\\dotnet\\;C:\\Program Files (x86)\\Windows Kits\\10\\Windows Performance Toolkit\\;C:\\Program Files\\nodejs\\;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin;C:\\Program Files\\PostgreSQL\\16\\bin;C:\\Program Files\\vtex\\client\\bin;C:\\Program Files\\Git\\cmd;C:\\Users\\mdorsi.tier2.admin\\.fly\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm\\node_modules\\yarn;C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm\\node_modules\\yarn\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Launcher\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python311\\Scripts\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python311\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Microsoft\\WindowsApps;C:\\Program Files\\JetBrains\\IntelliJ IDEA 2024.1.4\\bin;;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python312\\Scripts;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Git\\cmd;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\PyCharm 2023.2.5\\bin;;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\GoLand 2023.2.5\\bin;;C:\\go;C:\\go\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\WebStorm 2023.3\\bin;;C:\\java\\jdk-17.0.10\\bin;C:\\java\\jdk-17.0.10\\lib;C:\\java\\jdk-17.0.10;C:\\java\\jdk-17.0.10\\bin;C:\\Program Files (x86)\\Common Files\\Oracle\\Java\\javapath;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\WINDOWS\\System32\\OpenSSH\\;C:\\Program Files\\dotnet\\;C:\\Program Files (x86)\\Windows Kits\\10\\Windows Performance Toolkit\\;C:\\Program Files\\nodejs\\;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin;C:\\Program Files\\PostgreSQL\\16\\bin;C:\\Program Files\\vtex\\client\\bin;C:\\Program Files\\Git\\cmd;C:\\Program Files\\Docker\\Docker\\resources\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Launcher\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python311\\Scripts\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python311\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Microsoft\\WindowsApps;C:\\Program Files\\JetBrains\\IntelliJ IDEA 2024.1.4\\bin;;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python312\\Scripts;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Git\\cmd;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\PyCharm 2023.2.5\\bin;;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\GoLand 2023.2.5\\bin;;C:\\go;C:\\go\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\WebStorm 2023.3\\bin;;C:\\java\\jdk-17.0.10\\bin;C:\\java\\jdk-17.0.10\\lib;C:\\java\\jdk-17.0.10;C:\\java\\jdk-17.0.10\\bin;C:\\Program Files (x86)\\Common Files\\Oracle\\Java\\javapath;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\WINDOWS\\System32\\OpenSSH\\;C:\\Program Files\\dotnet\\;C:\\Program Files (x86)\\Windows Kits\\10\\Windows Performance Toolkit\\;C:\\Program Files\\nodejs\\;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin;C:\\Program Files\\PostgreSQL\\16\\bin;C:\\Program Files\\vtex\\client\\bin;C:\\Program Files\\Git\\cmd;C:\\Program Files\\Docker\\Docker\\resources\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin;C:\\Users\\mdorsi.tier2.admin\\.cargo\\;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin\\rustup.exe;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\pessoal\\Aplicativos\\PdftoImage\\dependences\\poppler-23.08.0;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\pessoal\\Aplicativos\\PdftoImage\\dependences\\poppler-23.08.0\\Library\\bin;C:\\Users\\mdorsi.tier2.admin\\apache-maven-3.9.9;C:\\Users\\mdorsi.tier2.admin\\apache-maven-3.9.9\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Microsoft VS Code\\bin;;C:\\Program Files\\JetBrains\\PhpStorm 2024.3.1\\bin;;C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin;C:\\Users\\mdorsi.tier2.admin\\.cargo\\;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin\\rustup.exe;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\pessoal\\Aplicativos\\PdftoImage\\dependences\\poppler-23.08.0;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\pessoal\\Aplicativos\\PdftoImage\\dependences\\poppler-23.08.0\\Library\\bin;C:\\Users\\mdorsi.tier2.admin\\apache-maven-3.9.9;C:\\Users\\mdorsi.tier2.admin\\apache-maven-3.9.9\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Microsoft VS Code\\bin;;C:\\Program Files\\JetBrains\\PhpStorm 2024.3.1\\bin;;C:\\Users\\mdorsi.tier2.admin\\.fly\\bin;C:\\Users\\mdorsi.tier2.admin\\CharloteRio\\node_modules\\.bin",PATHEXT:".COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC;.CPL",PhpStorm:"C:\\Program Files\\JetBrains\\PhpStorm 2024.3.1\\bin;",PLMVIS_82_LIBPATH:"C:\\Program Files (x86)\\SAP\\FrontEnd\\SAPgui\\Program",PROCESSOR_ARCHITECTURE:"AMD64",PROCESSOR_IDENTIFIER:"Intel64 Family 6 Model 140 Stepping 1, GenuineIntel",PROCESSOR_LEVEL:"6",PROCESSOR_REVISION:"8c01",ProgramData:"C:\\ProgramData",ProgramFiles:"C:\\Program Files","ProgramFiles(x86)":"C:\\Program Files (x86)",ProgramW6432:"C:\\Program Files",PROMPT:"$P$G",PSExecutionPolicyPreference:"Bypass",PSModulePath:"C:\\Users\\mdorsi.tier2.admin\\OneDrive\\Documentos\\WindowsPowerShell\\Modules;C:\\Program Files\\WindowsPowerShell\\Modules;C:\\WINDOWS\\system32\\WindowsPowerShell\\v1.0\\Modules",PT8HOME:"C:\\Program Files\\Cisco Packet Tracer 8.2.2",PUBLIC:"C:\\Users\\Public",PyCharm:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\PyCharm 2023.2.5\\bin;",SESSIONNAME:"Console",SystemDrive:"C:",SystemRoot:"C:\\WINDOWS",TEMP:"C:\\Users\\MDORSI~1.ADM\\AppData\\Local\\Temp",TERMINAL_EMULATOR:"JetBrains-JediTerm",TERM_SESSION_ID:"f1913f5b-8352-4ffb-9a3e-e115e4486275",TMP:"C:\\Users\\MDORSI~1.ADM\\AppData\\Local\\Temp",USERDNSDOMAIN:"EDUC.ACAD",USERDOMAIN:"EDUCACAD",USERDOMAIN_ROAMINGPROFILE:"EDUCACAD",USERNAME:"mdorsi.tier2.admin",USERPROFILE:"C:\\Users\\mdorsi.tier2.admin",WebStorm:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\WebStorm 2023.3\\bin;",windir:"C:\\WINDOWS",ZES_ENABLE_SYSMAN:"1"}&&void 0!=={ALLUSERSPROFILE:"C:\\ProgramData",APPDATA:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming",ChocolateyInstall:"C:\\ProgramData\\chocolatey",ChocolateyLastPathUpdate:"133739169618057786",COLOR:"1",CommonProgramFiles:"C:\\Program Files\\Common Files","CommonProgramFiles(x86)":"C:\\Program Files (x86)\\Common Files",CommonProgramW6432:"C:\\Program Files\\Common Files",COMPUTERNAME:"IBT-WS-062679",ComSpec:"C:\\WINDOWS\\system32\\cmd.exe",DriverData:"C:\\Windows\\System32\\Drivers\\DriverData",EDITOR:"C:\\WINDOWS\\notepad.exe",EFC_9708:"1",FPS_BROWSER_APP_PROFILE_STRING:"Internet Explorer",FPS_BROWSER_USER_PROFILE_STRING:"Default",GoLand:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\GoLand 2023.2.5\\bin;",HOME:"C:\\Users\\mdorsi.tier2.admin",HOMEDRIVE:"C:",HOMEPATH:"\\Users\\mdorsi.tier2.admin",IDEA_INITIAL_DIRECTORY:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\WebStorm 2023.3\\bin",IGCCSVC_DB:"AQAAANCMnd8BFdERjHoAwE/Cl+sBAAAA7DqY1R3HX0aTSSlswK0VlgQAAAACAAAAAAAQZgAAAAEAACAAAABm65ppy4VnMFDUW4UsfN5HPI3yz9rnIpdfVGhrA4zgigAAAAAOgAAAAAIAACAAAABJpvp9a80y9IV5hP6fnCb1uKjNyrXZjdLmSwVxaoJylWAAAADYv8hOqBVUtjT1Cqsh1Xczhe4/q8hfUQ6SA5kSaemR37Yl+0aOG1FimG6uDSlGjhQDyeDwToU/XF4GyH7pVWO2rOVlfzMJbXLy8LJpGAn+JxZN3K0KK3+xDbw+vPjsczBAAAAA2Pth2w7+5O2/1E0Pt9N37mzbN3Q7/+oMWl+T3/m8hiS7sPgeMlEvoaBrgLXIlEi1j3+1o3rII1AJ3+7b3dSClA==",INIT_CWD:"C:\\Users\\mdorsi.tier2.admin\\charlotemichelpage","IntelliJ IDEA":"C:\\Program Files\\JetBrains\\IntelliJ IDEA 2024.1.4\\bin;",JAVA_HOME:"C:\\java\\jdk-17.0.10",LOCALAPPDATA:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local",LOGONSERVER:"\\\\AWW-W-ACADDC01",NODE:"C:\\Program Files\\nodejs\\node.exe",NODE_EXE:"C:\\Program Files\\nodejs\\\\node.exe",NPM_CLI_JS:"C:\\Program Files\\nodejs\\\\node_modules\\npm\\bin\\npm-cli.js",npm_command:"run-script",npm_config_cache:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\npm-cache",npm_config_globalconfig:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm\\etc\\npmrc",npm_config_global_prefix:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm",npm_config_init_module:"C:\\Users\\mdorsi.tier2.admin\\.npm-init.js",npm_config_local_prefix:"C:\\Users\\mdorsi.tier2.admin\\charlotemichelpage",npm_config_node_gyp:"C:\\Program Files\\nodejs\\node_modules\\npm\\node_modules\\node-gyp\\bin\\node-gyp.js",npm_config_noproxy:"",npm_config_npm_version:"10.5.0",npm_config_prefix:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm",npm_config_userconfig:"C:\\Users\\mdorsi.tier2.admin\\.npmrc",npm_config_user_agent:"npm/10.5.0 node/v20.12.2 win32 x64 workspaces/false",npm_execpath:"C:\\Program Files\\nodejs\\node_modules\\npm\\bin\\npm-cli.js",npm_lifecycle_event:"build",npm_lifecycle_script:"webpack --mode production",npm_node_execpath:"C:\\Program Files\\nodejs\\node.exe",npm_package_json:"C:\\Users\\mdorsi.tier2.admin\\charlotemichelpage\\package.json",npm_package_name:"charloterio",npm_package_version:"1.0.0",NPM_PREFIX_NPM_CLI_JS:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm\\node_modules\\npm\\bin\\npm-cli.js",NUMBER_OF_PROCESSORS:"8",OneDrive:"C:\\Users\\mdorsi.tier2.admin\\OneDrive - Corporativo",OneDriveCommercial:"C:\\Users\\mdorsi.tier2.admin\\OneDrive - Corporativo",OneDriveConsumer:"C:\\Users\\mdorsi.tier2.admin\\OneDrive",OS:"Windows_NT",Path:"C:\\Users\\mdorsi.tier2.admin\\charlotemichelpage\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\node_modules\\.bin;C:\\Users\\node_modules\\.bin;C:\\node_modules\\.bin;C:\\Program Files\\nodejs\\node_modules\\npm\\node_modules\\@npmcli\\run-script\\lib\\node-gyp-bin;C:\\Users\\mdorsi.tier2.admin\\charlotemichelpage\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\node_modules\\.bin;C:\\Users\\node_modules\\.bin;C:\\node_modules\\.bin;C:\\Program Files\\nodejs\\node_modules\\npm\\node_modules\\@npmcli\\run-script\\lib\\node-gyp-bin;C:\\Program Files (x86)\\Common Files\\Oracle\\Java\\javapath;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\WINDOWS\\System32\\OpenSSH\\;C:\\Program Files\\dotnet\\;C:\\Program Files (x86)\\Windows Kits\\10\\Windows Performance Toolkit\\;C:\\Program Files\\nodejs\\;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin;C:\\Program Files\\PostgreSQL\\16\\bin;C:\\Program Files\\vtex\\client\\bin;C:\\Program Files\\Git\\cmd;C:\\Users\\mdorsi.tier2.admin\\.fly\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm\\node_modules\\yarn;C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm\\node_modules\\yarn\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Launcher\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python311\\Scripts\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python311\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Microsoft\\WindowsApps;C:\\Program Files\\JetBrains\\IntelliJ IDEA 2024.1.4\\bin;;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python312\\Scripts;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Git\\cmd;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\PyCharm 2023.2.5\\bin;;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\GoLand 2023.2.5\\bin;;C:\\go;C:\\go\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\WebStorm 2023.3\\bin;;C:\\java\\jdk-17.0.10\\bin;C:\\java\\jdk-17.0.10\\lib;C:\\java\\jdk-17.0.10;C:\\java\\jdk-17.0.10\\bin;C:\\Program Files (x86)\\Common Files\\Oracle\\Java\\javapath;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\WINDOWS\\System32\\OpenSSH\\;C:\\Program Files\\dotnet\\;C:\\Program Files (x86)\\Windows Kits\\10\\Windows Performance Toolkit\\;C:\\Program Files\\nodejs\\;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin;C:\\Program Files\\PostgreSQL\\16\\bin;C:\\Program Files\\vtex\\client\\bin;C:\\Program Files\\Git\\cmd;C:\\Program Files\\Docker\\Docker\\resources\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Launcher\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python311\\Scripts\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python311\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Microsoft\\WindowsApps;C:\\Program Files\\JetBrains\\IntelliJ IDEA 2024.1.4\\bin;;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python312\\Scripts;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Git\\cmd;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\PyCharm 2023.2.5\\bin;;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\GoLand 2023.2.5\\bin;;C:\\go;C:\\go\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\WebStorm 2023.3\\bin;;C:\\java\\jdk-17.0.10\\bin;C:\\java\\jdk-17.0.10\\lib;C:\\java\\jdk-17.0.10;C:\\java\\jdk-17.0.10\\bin;C:\\Program Files (x86)\\Common Files\\Oracle\\Java\\javapath;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\WINDOWS\\System32\\OpenSSH\\;C:\\Program Files\\dotnet\\;C:\\Program Files (x86)\\Windows Kits\\10\\Windows Performance Toolkit\\;C:\\Program Files\\nodejs\\;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin;C:\\Program Files\\PostgreSQL\\16\\bin;C:\\Program Files\\vtex\\client\\bin;C:\\Program Files\\Git\\cmd;C:\\Program Files\\Docker\\Docker\\resources\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin;C:\\Users\\mdorsi.tier2.admin\\.cargo\\;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin\\rustup.exe;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\pessoal\\Aplicativos\\PdftoImage\\dependences\\poppler-23.08.0;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\pessoal\\Aplicativos\\PdftoImage\\dependences\\poppler-23.08.0\\Library\\bin;C:\\Users\\mdorsi.tier2.admin\\apache-maven-3.9.9;C:\\Users\\mdorsi.tier2.admin\\apache-maven-3.9.9\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Microsoft VS Code\\bin;;C:\\Program Files\\JetBrains\\PhpStorm 2024.3.1\\bin;;C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin;C:\\Users\\mdorsi.tier2.admin\\.cargo\\;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin\\rustup.exe;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\pessoal\\Aplicativos\\PdftoImage\\dependences\\poppler-23.08.0;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\pessoal\\Aplicativos\\PdftoImage\\dependences\\poppler-23.08.0\\Library\\bin;C:\\Users\\mdorsi.tier2.admin\\apache-maven-3.9.9;C:\\Users\\mdorsi.tier2.admin\\apache-maven-3.9.9\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Microsoft VS Code\\bin;;C:\\Program Files\\JetBrains\\PhpStorm 2024.3.1\\bin;;C:\\Users\\mdorsi.tier2.admin\\.fly\\bin;C:\\Users\\mdorsi.tier2.admin\\CharloteRio\\node_modules\\.bin",PATHEXT:".COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC;.CPL",PhpStorm:"C:\\Program Files\\JetBrains\\PhpStorm 2024.3.1\\bin;",PLMVIS_82_LIBPATH:"C:\\Program Files (x86)\\SAP\\FrontEnd\\SAPgui\\Program",PROCESSOR_ARCHITECTURE:"AMD64",PROCESSOR_IDENTIFIER:"Intel64 Family 6 Model 140 Stepping 1, GenuineIntel",PROCESSOR_LEVEL:"6",PROCESSOR_REVISION:"8c01",ProgramData:"C:\\ProgramData",ProgramFiles:"C:\\Program Files","ProgramFiles(x86)":"C:\\Program Files (x86)",ProgramW6432:"C:\\Program Files",PROMPT:"$P$G",PSExecutionPolicyPreference:"Bypass",PSModulePath:"C:\\Users\\mdorsi.tier2.admin\\OneDrive\\Documentos\\WindowsPowerShell\\Modules;C:\\Program Files\\WindowsPowerShell\\Modules;C:\\WINDOWS\\system32\\WindowsPowerShell\\v1.0\\Modules",PT8HOME:"C:\\Program Files\\Cisco Packet Tracer 8.2.2",PUBLIC:"C:\\Users\\Public",PyCharm:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\PyCharm 2023.2.5\\bin;",SESSIONNAME:"Console",SystemDrive:"C:",SystemRoot:"C:\\WINDOWS",TEMP:"C:\\Users\\MDORSI~1.ADM\\AppData\\Local\\Temp",TERMINAL_EMULATOR:"JetBrains-JediTerm",TERM_SESSION_ID:"f1913f5b-8352-4ffb-9a3e-e115e4486275",TMP:"C:\\Users\\MDORSI~1.ADM\\AppData\\Local\\Temp",USERDNSDOMAIN:"EDUC.ACAD",USERDOMAIN:"EDUCACAD",USERDOMAIN_ROAMINGPROFILE:"EDUCACAD",USERNAME:"mdorsi.tier2.admin",USERPROFILE:"C:\\Users\\mdorsi.tier2.admin",WebStorm:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\WebStorm 2023.3\\bin;",windir:"C:\\WINDOWS",ZES_ENABLE_SYSMAN:"1"}.REACT_APP_SC_DISABLE_SPEEDY&&""!=={ALLUSERSPROFILE:"C:\\ProgramData",APPDATA:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming",ChocolateyInstall:"C:\\ProgramData\\chocolatey",ChocolateyLastPathUpdate:"133739169618057786",COLOR:"1",CommonProgramFiles:"C:\\Program Files\\Common Files","CommonProgramFiles(x86)":"C:\\Program Files (x86)\\Common Files",CommonProgramW6432:"C:\\Program Files\\Common Files",COMPUTERNAME:"IBT-WS-062679",ComSpec:"C:\\WINDOWS\\system32\\cmd.exe",DriverData:"C:\\Windows\\System32\\Drivers\\DriverData",EDITOR:"C:\\WINDOWS\\notepad.exe",EFC_9708:"1",FPS_BROWSER_APP_PROFILE_STRING:"Internet Explorer",FPS_BROWSER_USER_PROFILE_STRING:"Default",GoLand:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\GoLand 2023.2.5\\bin;",HOME:"C:\\Users\\mdorsi.tier2.admin",HOMEDRIVE:"C:",HOMEPATH:"\\Users\\mdorsi.tier2.admin",IDEA_INITIAL_DIRECTORY:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\WebStorm 2023.3\\bin",IGCCSVC_DB:"AQAAANCMnd8BFdERjHoAwE/Cl+sBAAAA7DqY1R3HX0aTSSlswK0VlgQAAAACAAAAAAAQZgAAAAEAACAAAABm65ppy4VnMFDUW4UsfN5HPI3yz9rnIpdfVGhrA4zgigAAAAAOgAAAAAIAACAAAABJpvp9a80y9IV5hP6fnCb1uKjNyrXZjdLmSwVxaoJylWAAAADYv8hOqBVUtjT1Cqsh1Xczhe4/q8hfUQ6SA5kSaemR37Yl+0aOG1FimG6uDSlGjhQDyeDwToU/XF4GyH7pVWO2rOVlfzMJbXLy8LJpGAn+JxZN3K0KK3+xDbw+vPjsczBAAAAA2Pth2w7+5O2/1E0Pt9N37mzbN3Q7/+oMWl+T3/m8hiS7sPgeMlEvoaBrgLXIlEi1j3+1o3rII1AJ3+7b3dSClA==",INIT_CWD:"C:\\Users\\mdorsi.tier2.admin\\charlotemichelpage","IntelliJ IDEA":"C:\\Program Files\\JetBrains\\IntelliJ IDEA 2024.1.4\\bin;",JAVA_HOME:"C:\\java\\jdk-17.0.10",LOCALAPPDATA:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local",LOGONSERVER:"\\\\AWW-W-ACADDC01",NODE:"C:\\Program Files\\nodejs\\node.exe",NODE_EXE:"C:\\Program Files\\nodejs\\\\node.exe",NPM_CLI_JS:"C:\\Program Files\\nodejs\\\\node_modules\\npm\\bin\\npm-cli.js",npm_command:"run-script",npm_config_cache:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\npm-cache",npm_config_globalconfig:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm\\etc\\npmrc",npm_config_global_prefix:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm",npm_config_init_module:"C:\\Users\\mdorsi.tier2.admin\\.npm-init.js",npm_config_local_prefix:"C:\\Users\\mdorsi.tier2.admin\\charlotemichelpage",npm_config_node_gyp:"C:\\Program Files\\nodejs\\node_modules\\npm\\node_modules\\node-gyp\\bin\\node-gyp.js",npm_config_noproxy:"",npm_config_npm_version:"10.5.0",npm_config_prefix:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm",npm_config_userconfig:"C:\\Users\\mdorsi.tier2.admin\\.npmrc",npm_config_user_agent:"npm/10.5.0 node/v20.12.2 win32 x64 workspaces/false",npm_execpath:"C:\\Program Files\\nodejs\\node_modules\\npm\\bin\\npm-cli.js",npm_lifecycle_event:"build",npm_lifecycle_script:"webpack --mode production",npm_node_execpath:"C:\\Program Files\\nodejs\\node.exe",npm_package_json:"C:\\Users\\mdorsi.tier2.admin\\charlotemichelpage\\package.json",npm_package_name:"charloterio",npm_package_version:"1.0.0",NPM_PREFIX_NPM_CLI_JS:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm\\node_modules\\npm\\bin\\npm-cli.js",NUMBER_OF_PROCESSORS:"8",OneDrive:"C:\\Users\\mdorsi.tier2.admin\\OneDrive - Corporativo",OneDriveCommercial:"C:\\Users\\mdorsi.tier2.admin\\OneDrive - Corporativo",OneDriveConsumer:"C:\\Users\\mdorsi.tier2.admin\\OneDrive",OS:"Windows_NT",Path:"C:\\Users\\mdorsi.tier2.admin\\charlotemichelpage\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\node_modules\\.bin;C:\\Users\\node_modules\\.bin;C:\\node_modules\\.bin;C:\\Program Files\\nodejs\\node_modules\\npm\\node_modules\\@npmcli\\run-script\\lib\\node-gyp-bin;C:\\Users\\mdorsi.tier2.admin\\charlotemichelpage\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\node_modules\\.bin;C:\\Users\\node_modules\\.bin;C:\\node_modules\\.bin;C:\\Program Files\\nodejs\\node_modules\\npm\\node_modules\\@npmcli\\run-script\\lib\\node-gyp-bin;C:\\Program Files (x86)\\Common Files\\Oracle\\Java\\javapath;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\WINDOWS\\System32\\OpenSSH\\;C:\\Program Files\\dotnet\\;C:\\Program Files (x86)\\Windows Kits\\10\\Windows Performance Toolkit\\;C:\\Program Files\\nodejs\\;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin;C:\\Program Files\\PostgreSQL\\16\\bin;C:\\Program Files\\vtex\\client\\bin;C:\\Program Files\\Git\\cmd;C:\\Users\\mdorsi.tier2.admin\\.fly\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm\\node_modules\\yarn;C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm\\node_modules\\yarn\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Launcher\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python311\\Scripts\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python311\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Microsoft\\WindowsApps;C:\\Program Files\\JetBrains\\IntelliJ IDEA 2024.1.4\\bin;;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python312\\Scripts;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Git\\cmd;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\PyCharm 2023.2.5\\bin;;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\GoLand 2023.2.5\\bin;;C:\\go;C:\\go\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\WebStorm 2023.3\\bin;;C:\\java\\jdk-17.0.10\\bin;C:\\java\\jdk-17.0.10\\lib;C:\\java\\jdk-17.0.10;C:\\java\\jdk-17.0.10\\bin;C:\\Program Files (x86)\\Common Files\\Oracle\\Java\\javapath;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\WINDOWS\\System32\\OpenSSH\\;C:\\Program Files\\dotnet\\;C:\\Program Files (x86)\\Windows Kits\\10\\Windows Performance Toolkit\\;C:\\Program Files\\nodejs\\;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin;C:\\Program Files\\PostgreSQL\\16\\bin;C:\\Program Files\\vtex\\client\\bin;C:\\Program Files\\Git\\cmd;C:\\Program Files\\Docker\\Docker\\resources\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Launcher\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python311\\Scripts\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python311\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Microsoft\\WindowsApps;C:\\Program Files\\JetBrains\\IntelliJ IDEA 2024.1.4\\bin;;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python312\\Scripts;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Git\\cmd;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\PyCharm 2023.2.5\\bin;;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\GoLand 2023.2.5\\bin;;C:\\go;C:\\go\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\WebStorm 2023.3\\bin;;C:\\java\\jdk-17.0.10\\bin;C:\\java\\jdk-17.0.10\\lib;C:\\java\\jdk-17.0.10;C:\\java\\jdk-17.0.10\\bin;C:\\Program Files (x86)\\Common Files\\Oracle\\Java\\javapath;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\WINDOWS\\System32\\OpenSSH\\;C:\\Program Files\\dotnet\\;C:\\Program Files (x86)\\Windows Kits\\10\\Windows Performance Toolkit\\;C:\\Program Files\\nodejs\\;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin;C:\\Program Files\\PostgreSQL\\16\\bin;C:\\Program Files\\vtex\\client\\bin;C:\\Program Files\\Git\\cmd;C:\\Program Files\\Docker\\Docker\\resources\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin;C:\\Users\\mdorsi.tier2.admin\\.cargo\\;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin\\rustup.exe;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\pessoal\\Aplicativos\\PdftoImage\\dependences\\poppler-23.08.0;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\pessoal\\Aplicativos\\PdftoImage\\dependences\\poppler-23.08.0\\Library\\bin;C:\\Users\\mdorsi.tier2.admin\\apache-maven-3.9.9;C:\\Users\\mdorsi.tier2.admin\\apache-maven-3.9.9\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Microsoft VS Code\\bin;;C:\\Program Files\\JetBrains\\PhpStorm 2024.3.1\\bin;;C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin;C:\\Users\\mdorsi.tier2.admin\\.cargo\\;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin\\rustup.exe;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\pessoal\\Aplicativos\\PdftoImage\\dependences\\poppler-23.08.0;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\pessoal\\Aplicativos\\PdftoImage\\dependences\\poppler-23.08.0\\Library\\bin;C:\\Users\\mdorsi.tier2.admin\\apache-maven-3.9.9;C:\\Users\\mdorsi.tier2.admin\\apache-maven-3.9.9\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Microsoft VS Code\\bin;;C:\\Program Files\\JetBrains\\PhpStorm 2024.3.1\\bin;;C:\\Users\\mdorsi.tier2.admin\\.fly\\bin;C:\\Users\\mdorsi.tier2.admin\\CharloteRio\\node_modules\\.bin",PATHEXT:".COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC;.CPL",PhpStorm:"C:\\Program Files\\JetBrains\\PhpStorm 2024.3.1\\bin;",PLMVIS_82_LIBPATH:"C:\\Program Files (x86)\\SAP\\FrontEnd\\SAPgui\\Program",PROCESSOR_ARCHITECTURE:"AMD64",PROCESSOR_IDENTIFIER:"Intel64 Family 6 Model 140 Stepping 1, GenuineIntel",PROCESSOR_LEVEL:"6",PROCESSOR_REVISION:"8c01",ProgramData:"C:\\ProgramData",ProgramFiles:"C:\\Program Files","ProgramFiles(x86)":"C:\\Program Files (x86)",ProgramW6432:"C:\\Program Files",PROMPT:"$P$G",PSExecutionPolicyPreference:"Bypass",PSModulePath:"C:\\Users\\mdorsi.tier2.admin\\OneDrive\\Documentos\\WindowsPowerShell\\Modules;C:\\Program Files\\WindowsPowerShell\\Modules;C:\\WINDOWS\\system32\\WindowsPowerShell\\v1.0\\Modules",PT8HOME:"C:\\Program Files\\Cisco Packet Tracer 8.2.2",PUBLIC:"C:\\Users\\Public",PyCharm:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\PyCharm 2023.2.5\\bin;",SESSIONNAME:"Console",SystemDrive:"C:",SystemRoot:"C:\\WINDOWS",TEMP:"C:\\Users\\MDORSI~1.ADM\\AppData\\Local\\Temp",TERMINAL_EMULATOR:"JetBrains-JediTerm",TERM_SESSION_ID:"f1913f5b-8352-4ffb-9a3e-e115e4486275",TMP:"C:\\Users\\MDORSI~1.ADM\\AppData\\Local\\Temp",USERDNSDOMAIN:"EDUC.ACAD",USERDOMAIN:"EDUCACAD",USERDOMAIN_ROAMINGPROFILE:"EDUCACAD",USERNAME:"mdorsi.tier2.admin",USERPROFILE:"C:\\Users\\mdorsi.tier2.admin",WebStorm:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\WebStorm 2023.3\\bin;",windir:"C:\\WINDOWS",ZES_ENABLE_SYSMAN:"1"}.REACT_APP_SC_DISABLE_SPEEDY?"false"!=={ALLUSERSPROFILE:"C:\\ProgramData",APPDATA:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming",ChocolateyInstall:"C:\\ProgramData\\chocolatey",ChocolateyLastPathUpdate:"133739169618057786",COLOR:"1",CommonProgramFiles:"C:\\Program Files\\Common Files","CommonProgramFiles(x86)":"C:\\Program Files (x86)\\Common Files",CommonProgramW6432:"C:\\Program Files\\Common Files",COMPUTERNAME:"IBT-WS-062679",ComSpec:"C:\\WINDOWS\\system32\\cmd.exe",DriverData:"C:\\Windows\\System32\\Drivers\\DriverData",EDITOR:"C:\\WINDOWS\\notepad.exe",EFC_9708:"1",FPS_BROWSER_APP_PROFILE_STRING:"Internet Explorer",FPS_BROWSER_USER_PROFILE_STRING:"Default",GoLand:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\GoLand 2023.2.5\\bin;",HOME:"C:\\Users\\mdorsi.tier2.admin",HOMEDRIVE:"C:",HOMEPATH:"\\Users\\mdorsi.tier2.admin",IDEA_INITIAL_DIRECTORY:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\WebStorm 2023.3\\bin",IGCCSVC_DB:"AQAAANCMnd8BFdERjHoAwE/Cl+sBAAAA7DqY1R3HX0aTSSlswK0VlgQAAAACAAAAAAAQZgAAAAEAACAAAABm65ppy4VnMFDUW4UsfN5HPI3yz9rnIpdfVGhrA4zgigAAAAAOgAAAAAIAACAAAABJpvp9a80y9IV5hP6fnCb1uKjNyrXZjdLmSwVxaoJylWAAAADYv8hOqBVUtjT1Cqsh1Xczhe4/q8hfUQ6SA5kSaemR37Yl+0aOG1FimG6uDSlGjhQDyeDwToU/XF4GyH7pVWO2rOVlfzMJbXLy8LJpGAn+JxZN3K0KK3+xDbw+vPjsczBAAAAA2Pth2w7+5O2/1E0Pt9N37mzbN3Q7/+oMWl+T3/m8hiS7sPgeMlEvoaBrgLXIlEi1j3+1o3rII1AJ3+7b3dSClA==",INIT_CWD:"C:\\Users\\mdorsi.tier2.admin\\charlotemichelpage","IntelliJ IDEA":"C:\\Program Files\\JetBrains\\IntelliJ IDEA 2024.1.4\\bin;",JAVA_HOME:"C:\\java\\jdk-17.0.10",LOCALAPPDATA:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local",LOGONSERVER:"\\\\AWW-W-ACADDC01",NODE:"C:\\Program Files\\nodejs\\node.exe",NODE_EXE:"C:\\Program Files\\nodejs\\\\node.exe",NPM_CLI_JS:"C:\\Program Files\\nodejs\\\\node_modules\\npm\\bin\\npm-cli.js",npm_command:"run-script",npm_config_cache:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\npm-cache",npm_config_globalconfig:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm\\etc\\npmrc",npm_config_global_prefix:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm",npm_config_init_module:"C:\\Users\\mdorsi.tier2.admin\\.npm-init.js",npm_config_local_prefix:"C:\\Users\\mdorsi.tier2.admin\\charlotemichelpage",npm_config_node_gyp:"C:\\Program Files\\nodejs\\node_modules\\npm\\node_modules\\node-gyp\\bin\\node-gyp.js",npm_config_noproxy:"",npm_config_npm_version:"10.5.0",npm_config_prefix:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm",npm_config_userconfig:"C:\\Users\\mdorsi.tier2.admin\\.npmrc",npm_config_user_agent:"npm/10.5.0 node/v20.12.2 win32 x64 workspaces/false",npm_execpath:"C:\\Program Files\\nodejs\\node_modules\\npm\\bin\\npm-cli.js",npm_lifecycle_event:"build",npm_lifecycle_script:"webpack --mode production",npm_node_execpath:"C:\\Program Files\\nodejs\\node.exe",npm_package_json:"C:\\Users\\mdorsi.tier2.admin\\charlotemichelpage\\package.json",npm_package_name:"charloterio",npm_package_version:"1.0.0",NPM_PREFIX_NPM_CLI_JS:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm\\node_modules\\npm\\bin\\npm-cli.js",NUMBER_OF_PROCESSORS:"8",OneDrive:"C:\\Users\\mdorsi.tier2.admin\\OneDrive - Corporativo",OneDriveCommercial:"C:\\Users\\mdorsi.tier2.admin\\OneDrive - Corporativo",OneDriveConsumer:"C:\\Users\\mdorsi.tier2.admin\\OneDrive",OS:"Windows_NT",Path:"C:\\Users\\mdorsi.tier2.admin\\charlotemichelpage\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\node_modules\\.bin;C:\\Users\\node_modules\\.bin;C:\\node_modules\\.bin;C:\\Program Files\\nodejs\\node_modules\\npm\\node_modules\\@npmcli\\run-script\\lib\\node-gyp-bin;C:\\Users\\mdorsi.tier2.admin\\charlotemichelpage\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\node_modules\\.bin;C:\\Users\\node_modules\\.bin;C:\\node_modules\\.bin;C:\\Program Files\\nodejs\\node_modules\\npm\\node_modules\\@npmcli\\run-script\\lib\\node-gyp-bin;C:\\Program Files (x86)\\Common Files\\Oracle\\Java\\javapath;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\WINDOWS\\System32\\OpenSSH\\;C:\\Program Files\\dotnet\\;C:\\Program Files (x86)\\Windows Kits\\10\\Windows Performance Toolkit\\;C:\\Program Files\\nodejs\\;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin;C:\\Program Files\\PostgreSQL\\16\\bin;C:\\Program Files\\vtex\\client\\bin;C:\\Program Files\\Git\\cmd;C:\\Users\\mdorsi.tier2.admin\\.fly\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm\\node_modules\\yarn;C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm\\node_modules\\yarn\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Launcher\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python311\\Scripts\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python311\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Microsoft\\WindowsApps;C:\\Program Files\\JetBrains\\IntelliJ IDEA 2024.1.4\\bin;;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python312\\Scripts;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Git\\cmd;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\PyCharm 2023.2.5\\bin;;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\GoLand 2023.2.5\\bin;;C:\\go;C:\\go\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\WebStorm 2023.3\\bin;;C:\\java\\jdk-17.0.10\\bin;C:\\java\\jdk-17.0.10\\lib;C:\\java\\jdk-17.0.10;C:\\java\\jdk-17.0.10\\bin;C:\\Program Files (x86)\\Common Files\\Oracle\\Java\\javapath;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\WINDOWS\\System32\\OpenSSH\\;C:\\Program Files\\dotnet\\;C:\\Program Files (x86)\\Windows Kits\\10\\Windows Performance Toolkit\\;C:\\Program Files\\nodejs\\;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin;C:\\Program Files\\PostgreSQL\\16\\bin;C:\\Program Files\\vtex\\client\\bin;C:\\Program Files\\Git\\cmd;C:\\Program Files\\Docker\\Docker\\resources\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Launcher\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python311\\Scripts\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python311\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Microsoft\\WindowsApps;C:\\Program Files\\JetBrains\\IntelliJ IDEA 2024.1.4\\bin;;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python312\\Scripts;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Git\\cmd;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\PyCharm 2023.2.5\\bin;;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\GoLand 2023.2.5\\bin;;C:\\go;C:\\go\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\WebStorm 2023.3\\bin;;C:\\java\\jdk-17.0.10\\bin;C:\\java\\jdk-17.0.10\\lib;C:\\java\\jdk-17.0.10;C:\\java\\jdk-17.0.10\\bin;C:\\Program Files (x86)\\Common Files\\Oracle\\Java\\javapath;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\WINDOWS\\System32\\OpenSSH\\;C:\\Program Files\\dotnet\\;C:\\Program Files (x86)\\Windows Kits\\10\\Windows Performance Toolkit\\;C:\\Program Files\\nodejs\\;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin;C:\\Program Files\\PostgreSQL\\16\\bin;C:\\Program Files\\vtex\\client\\bin;C:\\Program Files\\Git\\cmd;C:\\Program Files\\Docker\\Docker\\resources\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin;C:\\Users\\mdorsi.tier2.admin\\.cargo\\;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin\\rustup.exe;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\pessoal\\Aplicativos\\PdftoImage\\dependences\\poppler-23.08.0;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\pessoal\\Aplicativos\\PdftoImage\\dependences\\poppler-23.08.0\\Library\\bin;C:\\Users\\mdorsi.tier2.admin\\apache-maven-3.9.9;C:\\Users\\mdorsi.tier2.admin\\apache-maven-3.9.9\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Microsoft VS Code\\bin;;C:\\Program Files\\JetBrains\\PhpStorm 2024.3.1\\bin;;C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin;C:\\Users\\mdorsi.tier2.admin\\.cargo\\;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin\\rustup.exe;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\pessoal\\Aplicativos\\PdftoImage\\dependences\\poppler-23.08.0;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\pessoal\\Aplicativos\\PdftoImage\\dependences\\poppler-23.08.0\\Library\\bin;C:\\Users\\mdorsi.tier2.admin\\apache-maven-3.9.9;C:\\Users\\mdorsi.tier2.admin\\apache-maven-3.9.9\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Microsoft VS Code\\bin;;C:\\Program Files\\JetBrains\\PhpStorm 2024.3.1\\bin;;C:\\Users\\mdorsi.tier2.admin\\.fly\\bin;C:\\Users\\mdorsi.tier2.admin\\CharloteRio\\node_modules\\.bin",PATHEXT:".COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC;.CPL",PhpStorm:"C:\\Program Files\\JetBrains\\PhpStorm 2024.3.1\\bin;",PLMVIS_82_LIBPATH:"C:\\Program Files (x86)\\SAP\\FrontEnd\\SAPgui\\Program",PROCESSOR_ARCHITECTURE:"AMD64",PROCESSOR_IDENTIFIER:"Intel64 Family 6 Model 140 Stepping 1, GenuineIntel",PROCESSOR_LEVEL:"6",PROCESSOR_REVISION:"8c01",ProgramData:"C:\\ProgramData",ProgramFiles:"C:\\Program Files","ProgramFiles(x86)":"C:\\Program Files (x86)",ProgramW6432:"C:\\Program Files",PROMPT:"$P$G",PSExecutionPolicyPreference:"Bypass",PSModulePath:"C:\\Users\\mdorsi.tier2.admin\\OneDrive\\Documentos\\WindowsPowerShell\\Modules;C:\\Program Files\\WindowsPowerShell\\Modules;C:\\WINDOWS\\system32\\WindowsPowerShell\\v1.0\\Modules",PT8HOME:"C:\\Program Files\\Cisco Packet Tracer 8.2.2",PUBLIC:"C:\\Users\\Public",PyCharm:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\PyCharm 2023.2.5\\bin;",SESSIONNAME:"Console",SystemDrive:"C:",SystemRoot:"C:\\WINDOWS",TEMP:"C:\\Users\\MDORSI~1.ADM\\AppData\\Local\\Temp",TERMINAL_EMULATOR:"JetBrains-JediTerm",TERM_SESSION_ID:"f1913f5b-8352-4ffb-9a3e-e115e4486275",TMP:"C:\\Users\\MDORSI~1.ADM\\AppData\\Local\\Temp",USERDNSDOMAIN:"EDUC.ACAD",USERDOMAIN:"EDUCACAD",USERDOMAIN_ROAMINGPROFILE:"EDUCACAD",USERNAME:"mdorsi.tier2.admin",USERPROFILE:"C:\\Users\\mdorsi.tier2.admin",WebStorm:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\WebStorm 2023.3\\bin;",windir:"C:\\WINDOWS",ZES_ENABLE_SYSMAN:"1"}.REACT_APP_SC_DISABLE_SPEEDY&&{ALLUSERSPROFILE:"C:\\ProgramData",APPDATA:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming",ChocolateyInstall:"C:\\ProgramData\\chocolatey",ChocolateyLastPathUpdate:"133739169618057786",COLOR:"1",CommonProgramFiles:"C:\\Program Files\\Common Files","CommonProgramFiles(x86)":"C:\\Program Files (x86)\\Common Files",CommonProgramW6432:"C:\\Program Files\\Common Files",COMPUTERNAME:"IBT-WS-062679",ComSpec:"C:\\WINDOWS\\system32\\cmd.exe",DriverData:"C:\\Windows\\System32\\Drivers\\DriverData",EDITOR:"C:\\WINDOWS\\notepad.exe",EFC_9708:"1",FPS_BROWSER_APP_PROFILE_STRING:"Internet Explorer",FPS_BROWSER_USER_PROFILE_STRING:"Default",GoLand:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\GoLand 2023.2.5\\bin;",HOME:"C:\\Users\\mdorsi.tier2.admin",HOMEDRIVE:"C:",HOMEPATH:"\\Users\\mdorsi.tier2.admin",IDEA_INITIAL_DIRECTORY:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\WebStorm 2023.3\\bin",IGCCSVC_DB:"AQAAANCMnd8BFdERjHoAwE/Cl+sBAAAA7DqY1R3HX0aTSSlswK0VlgQAAAACAAAAAAAQZgAAAAEAACAAAABm65ppy4VnMFDUW4UsfN5HPI3yz9rnIpdfVGhrA4zgigAAAAAOgAAAAAIAACAAAABJpvp9a80y9IV5hP6fnCb1uKjNyrXZjdLmSwVxaoJylWAAAADYv8hOqBVUtjT1Cqsh1Xczhe4/q8hfUQ6SA5kSaemR37Yl+0aOG1FimG6uDSlGjhQDyeDwToU/XF4GyH7pVWO2rOVlfzMJbXLy8LJpGAn+JxZN3K0KK3+xDbw+vPjsczBAAAAA2Pth2w7+5O2/1E0Pt9N37mzbN3Q7/+oMWl+T3/m8hiS7sPgeMlEvoaBrgLXIlEi1j3+1o3rII1AJ3+7b3dSClA==",INIT_CWD:"C:\\Users\\mdorsi.tier2.admin\\charlotemichelpage","IntelliJ IDEA":"C:\\Program Files\\JetBrains\\IntelliJ IDEA 2024.1.4\\bin;",JAVA_HOME:"C:\\java\\jdk-17.0.10",LOCALAPPDATA:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local",LOGONSERVER:"\\\\AWW-W-ACADDC01",NODE:"C:\\Program Files\\nodejs\\node.exe",NODE_EXE:"C:\\Program Files\\nodejs\\\\node.exe",NPM_CLI_JS:"C:\\Program Files\\nodejs\\\\node_modules\\npm\\bin\\npm-cli.js",npm_command:"run-script",npm_config_cache:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\npm-cache",npm_config_globalconfig:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm\\etc\\npmrc",npm_config_global_prefix:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm",npm_config_init_module:"C:\\Users\\mdorsi.tier2.admin\\.npm-init.js",npm_config_local_prefix:"C:\\Users\\mdorsi.tier2.admin\\charlotemichelpage",npm_config_node_gyp:"C:\\Program Files\\nodejs\\node_modules\\npm\\node_modules\\node-gyp\\bin\\node-gyp.js",npm_config_noproxy:"",npm_config_npm_version:"10.5.0",npm_config_prefix:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm",npm_config_userconfig:"C:\\Users\\mdorsi.tier2.admin\\.npmrc",npm_config_user_agent:"npm/10.5.0 node/v20.12.2 win32 x64 workspaces/false",npm_execpath:"C:\\Program Files\\nodejs\\node_modules\\npm\\bin\\npm-cli.js",npm_lifecycle_event:"build",npm_lifecycle_script:"webpack --mode production",npm_node_execpath:"C:\\Program Files\\nodejs\\node.exe",npm_package_json:"C:\\Users\\mdorsi.tier2.admin\\charlotemichelpage\\package.json",npm_package_name:"charloterio",npm_package_version:"1.0.0",NPM_PREFIX_NPM_CLI_JS:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm\\node_modules\\npm\\bin\\npm-cli.js",NUMBER_OF_PROCESSORS:"8",OneDrive:"C:\\Users\\mdorsi.tier2.admin\\OneDrive - Corporativo",OneDriveCommercial:"C:\\Users\\mdorsi.tier2.admin\\OneDrive - Corporativo",OneDriveConsumer:"C:\\Users\\mdorsi.tier2.admin\\OneDrive",OS:"Windows_NT",Path:"C:\\Users\\mdorsi.tier2.admin\\charlotemichelpage\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\node_modules\\.bin;C:\\Users\\node_modules\\.bin;C:\\node_modules\\.bin;C:\\Program Files\\nodejs\\node_modules\\npm\\node_modules\\@npmcli\\run-script\\lib\\node-gyp-bin;C:\\Users\\mdorsi.tier2.admin\\charlotemichelpage\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\node_modules\\.bin;C:\\Users\\node_modules\\.bin;C:\\node_modules\\.bin;C:\\Program Files\\nodejs\\node_modules\\npm\\node_modules\\@npmcli\\run-script\\lib\\node-gyp-bin;C:\\Program Files (x86)\\Common Files\\Oracle\\Java\\javapath;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\WINDOWS\\System32\\OpenSSH\\;C:\\Program Files\\dotnet\\;C:\\Program Files (x86)\\Windows Kits\\10\\Windows Performance Toolkit\\;C:\\Program Files\\nodejs\\;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin;C:\\Program Files\\PostgreSQL\\16\\bin;C:\\Program Files\\vtex\\client\\bin;C:\\Program Files\\Git\\cmd;C:\\Users\\mdorsi.tier2.admin\\.fly\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm\\node_modules\\yarn;C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm\\node_modules\\yarn\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Launcher\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python311\\Scripts\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python311\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Microsoft\\WindowsApps;C:\\Program Files\\JetBrains\\IntelliJ IDEA 2024.1.4\\bin;;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python312\\Scripts;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Git\\cmd;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\PyCharm 2023.2.5\\bin;;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\GoLand 2023.2.5\\bin;;C:\\go;C:\\go\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\WebStorm 2023.3\\bin;;C:\\java\\jdk-17.0.10\\bin;C:\\java\\jdk-17.0.10\\lib;C:\\java\\jdk-17.0.10;C:\\java\\jdk-17.0.10\\bin;C:\\Program Files (x86)\\Common Files\\Oracle\\Java\\javapath;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\WINDOWS\\System32\\OpenSSH\\;C:\\Program Files\\dotnet\\;C:\\Program Files (x86)\\Windows Kits\\10\\Windows Performance Toolkit\\;C:\\Program Files\\nodejs\\;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin;C:\\Program Files\\PostgreSQL\\16\\bin;C:\\Program Files\\vtex\\client\\bin;C:\\Program Files\\Git\\cmd;C:\\Program Files\\Docker\\Docker\\resources\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Launcher\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python311\\Scripts\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python311\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Microsoft\\WindowsApps;C:\\Program Files\\JetBrains\\IntelliJ IDEA 2024.1.4\\bin;;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python312\\Scripts;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Git\\cmd;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\PyCharm 2023.2.5\\bin;;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\GoLand 2023.2.5\\bin;;C:\\go;C:\\go\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\WebStorm 2023.3\\bin;;C:\\java\\jdk-17.0.10\\bin;C:\\java\\jdk-17.0.10\\lib;C:\\java\\jdk-17.0.10;C:\\java\\jdk-17.0.10\\bin;C:\\Program Files (x86)\\Common Files\\Oracle\\Java\\javapath;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\WINDOWS\\System32\\OpenSSH\\;C:\\Program Files\\dotnet\\;C:\\Program Files (x86)\\Windows Kits\\10\\Windows Performance Toolkit\\;C:\\Program Files\\nodejs\\;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin;C:\\Program Files\\PostgreSQL\\16\\bin;C:\\Program Files\\vtex\\client\\bin;C:\\Program Files\\Git\\cmd;C:\\Program Files\\Docker\\Docker\\resources\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin;C:\\Users\\mdorsi.tier2.admin\\.cargo\\;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin\\rustup.exe;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\pessoal\\Aplicativos\\PdftoImage\\dependences\\poppler-23.08.0;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\pessoal\\Aplicativos\\PdftoImage\\dependences\\poppler-23.08.0\\Library\\bin;C:\\Users\\mdorsi.tier2.admin\\apache-maven-3.9.9;C:\\Users\\mdorsi.tier2.admin\\apache-maven-3.9.9\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Microsoft VS Code\\bin;;C:\\Program Files\\JetBrains\\PhpStorm 2024.3.1\\bin;;C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin;C:\\Users\\mdorsi.tier2.admin\\.cargo\\;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin\\rustup.exe;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\pessoal\\Aplicativos\\PdftoImage\\dependences\\poppler-23.08.0;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\pessoal\\Aplicativos\\PdftoImage\\dependences\\poppler-23.08.0\\Library\\bin;C:\\Users\\mdorsi.tier2.admin\\apache-maven-3.9.9;C:\\Users\\mdorsi.tier2.admin\\apache-maven-3.9.9\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Microsoft VS Code\\bin;;C:\\Program Files\\JetBrains\\PhpStorm 2024.3.1\\bin;;C:\\Users\\mdorsi.tier2.admin\\.fly\\bin;C:\\Users\\mdorsi.tier2.admin\\CharloteRio\\node_modules\\.bin",PATHEXT:".COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC;.CPL",PhpStorm:"C:\\Program Files\\JetBrains\\PhpStorm 2024.3.1\\bin;",PLMVIS_82_LIBPATH:"C:\\Program Files (x86)\\SAP\\FrontEnd\\SAPgui\\Program",PROCESSOR_ARCHITECTURE:"AMD64",PROCESSOR_IDENTIFIER:"Intel64 Family 6 Model 140 Stepping 1, GenuineIntel",PROCESSOR_LEVEL:"6",PROCESSOR_REVISION:"8c01",ProgramData:"C:\\ProgramData",ProgramFiles:"C:\\Program Files","ProgramFiles(x86)":"C:\\Program Files (x86)",ProgramW6432:"C:\\Program Files",PROMPT:"$P$G",PSExecutionPolicyPreference:"Bypass",PSModulePath:"C:\\Users\\mdorsi.tier2.admin\\OneDrive\\Documentos\\WindowsPowerShell\\Modules;C:\\Program Files\\WindowsPowerShell\\Modules;C:\\WINDOWS\\system32\\WindowsPowerShell\\v1.0\\Modules",PT8HOME:"C:\\Program Files\\Cisco Packet Tracer 8.2.2",PUBLIC:"C:\\Users\\Public",PyCharm:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\PyCharm 2023.2.5\\bin;",SESSIONNAME:"Console",SystemDrive:"C:",SystemRoot:"C:\\WINDOWS",TEMP:"C:\\Users\\MDORSI~1.ADM\\AppData\\Local\\Temp",TERMINAL_EMULATOR:"JetBrains-JediTerm",TERM_SESSION_ID:"f1913f5b-8352-4ffb-9a3e-e115e4486275",TMP:"C:\\Users\\MDORSI~1.ADM\\AppData\\Local\\Temp",USERDNSDOMAIN:"EDUC.ACAD",USERDOMAIN:"EDUCACAD",USERDOMAIN_ROAMINGPROFILE:"EDUCACAD",USERNAME:"mdorsi.tier2.admin",USERPROFILE:"C:\\Users\\mdorsi.tier2.admin",WebStorm:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\WebStorm 2023.3\\bin;",windir:"C:\\WINDOWS",ZES_ENABLE_SYSMAN:"1"}.REACT_APP_SC_DISABLE_SPEEDY:"undefined"!=typeof process&&void 0!=={ALLUSERSPROFILE:"C:\\ProgramData",APPDATA:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming",ChocolateyInstall:"C:\\ProgramData\\chocolatey",ChocolateyLastPathUpdate:"133739169618057786",COLOR:"1",CommonProgramFiles:"C:\\Program Files\\Common Files","CommonProgramFiles(x86)":"C:\\Program Files (x86)\\Common Files",CommonProgramW6432:"C:\\Program Files\\Common Files",COMPUTERNAME:"IBT-WS-062679",ComSpec:"C:\\WINDOWS\\system32\\cmd.exe",DriverData:"C:\\Windows\\System32\\Drivers\\DriverData",EDITOR:"C:\\WINDOWS\\notepad.exe",EFC_9708:"1",FPS_BROWSER_APP_PROFILE_STRING:"Internet Explorer",FPS_BROWSER_USER_PROFILE_STRING:"Default",GoLand:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\GoLand 2023.2.5\\bin;",HOME:"C:\\Users\\mdorsi.tier2.admin",HOMEDRIVE:"C:",HOMEPATH:"\\Users\\mdorsi.tier2.admin",IDEA_INITIAL_DIRECTORY:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\WebStorm 2023.3\\bin",IGCCSVC_DB:"AQAAANCMnd8BFdERjHoAwE/Cl+sBAAAA7DqY1R3HX0aTSSlswK0VlgQAAAACAAAAAAAQZgAAAAEAACAAAABm65ppy4VnMFDUW4UsfN5HPI3yz9rnIpdfVGhrA4zgigAAAAAOgAAAAAIAACAAAABJpvp9a80y9IV5hP6fnCb1uKjNyrXZjdLmSwVxaoJylWAAAADYv8hOqBVUtjT1Cqsh1Xczhe4/q8hfUQ6SA5kSaemR37Yl+0aOG1FimG6uDSlGjhQDyeDwToU/XF4GyH7pVWO2rOVlfzMJbXLy8LJpGAn+JxZN3K0KK3+xDbw+vPjsczBAAAAA2Pth2w7+5O2/1E0Pt9N37mzbN3Q7/+oMWl+T3/m8hiS7sPgeMlEvoaBrgLXIlEi1j3+1o3rII1AJ3+7b3dSClA==",INIT_CWD:"C:\\Users\\mdorsi.tier2.admin\\charlotemichelpage","IntelliJ IDEA":"C:\\Program Files\\JetBrains\\IntelliJ IDEA 2024.1.4\\bin;",JAVA_HOME:"C:\\java\\jdk-17.0.10",LOCALAPPDATA:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local",LOGONSERVER:"\\\\AWW-W-ACADDC01",NODE:"C:\\Program Files\\nodejs\\node.exe",NODE_EXE:"C:\\Program Files\\nodejs\\\\node.exe",NPM_CLI_JS:"C:\\Program Files\\nodejs\\\\node_modules\\npm\\bin\\npm-cli.js",npm_command:"run-script",npm_config_cache:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\npm-cache",npm_config_globalconfig:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm\\etc\\npmrc",npm_config_global_prefix:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm",npm_config_init_module:"C:\\Users\\mdorsi.tier2.admin\\.npm-init.js",npm_config_local_prefix:"C:\\Users\\mdorsi.tier2.admin\\charlotemichelpage",npm_config_node_gyp:"C:\\Program Files\\nodejs\\node_modules\\npm\\node_modules\\node-gyp\\bin\\node-gyp.js",npm_config_noproxy:"",npm_config_npm_version:"10.5.0",npm_config_prefix:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm",npm_config_userconfig:"C:\\Users\\mdorsi.tier2.admin\\.npmrc",npm_config_user_agent:"npm/10.5.0 node/v20.12.2 win32 x64 workspaces/false",npm_execpath:"C:\\Program Files\\nodejs\\node_modules\\npm\\bin\\npm-cli.js",npm_lifecycle_event:"build",npm_lifecycle_script:"webpack --mode production",npm_node_execpath:"C:\\Program Files\\nodejs\\node.exe",npm_package_json:"C:\\Users\\mdorsi.tier2.admin\\charlotemichelpage\\package.json",npm_package_name:"charloterio",npm_package_version:"1.0.0",NPM_PREFIX_NPM_CLI_JS:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm\\node_modules\\npm\\bin\\npm-cli.js",NUMBER_OF_PROCESSORS:"8",OneDrive:"C:\\Users\\mdorsi.tier2.admin\\OneDrive - Corporativo",OneDriveCommercial:"C:\\Users\\mdorsi.tier2.admin\\OneDrive - Corporativo",OneDriveConsumer:"C:\\Users\\mdorsi.tier2.admin\\OneDrive",OS:"Windows_NT",Path:"C:\\Users\\mdorsi.tier2.admin\\charlotemichelpage\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\node_modules\\.bin;C:\\Users\\node_modules\\.bin;C:\\node_modules\\.bin;C:\\Program Files\\nodejs\\node_modules\\npm\\node_modules\\@npmcli\\run-script\\lib\\node-gyp-bin;C:\\Users\\mdorsi.tier2.admin\\charlotemichelpage\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\node_modules\\.bin;C:\\Users\\node_modules\\.bin;C:\\node_modules\\.bin;C:\\Program Files\\nodejs\\node_modules\\npm\\node_modules\\@npmcli\\run-script\\lib\\node-gyp-bin;C:\\Program Files (x86)\\Common Files\\Oracle\\Java\\javapath;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\WINDOWS\\System32\\OpenSSH\\;C:\\Program Files\\dotnet\\;C:\\Program Files (x86)\\Windows Kits\\10\\Windows Performance Toolkit\\;C:\\Program Files\\nodejs\\;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin;C:\\Program Files\\PostgreSQL\\16\\bin;C:\\Program Files\\vtex\\client\\bin;C:\\Program Files\\Git\\cmd;C:\\Users\\mdorsi.tier2.admin\\.fly\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm\\node_modules\\yarn;C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm\\node_modules\\yarn\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Launcher\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python311\\Scripts\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python311\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Microsoft\\WindowsApps;C:\\Program Files\\JetBrains\\IntelliJ IDEA 2024.1.4\\bin;;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python312\\Scripts;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Git\\cmd;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\PyCharm 2023.2.5\\bin;;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\GoLand 2023.2.5\\bin;;C:\\go;C:\\go\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\WebStorm 2023.3\\bin;;C:\\java\\jdk-17.0.10\\bin;C:\\java\\jdk-17.0.10\\lib;C:\\java\\jdk-17.0.10;C:\\java\\jdk-17.0.10\\bin;C:\\Program Files (x86)\\Common Files\\Oracle\\Java\\javapath;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\WINDOWS\\System32\\OpenSSH\\;C:\\Program Files\\dotnet\\;C:\\Program Files (x86)\\Windows Kits\\10\\Windows Performance Toolkit\\;C:\\Program Files\\nodejs\\;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin;C:\\Program Files\\PostgreSQL\\16\\bin;C:\\Program Files\\vtex\\client\\bin;C:\\Program Files\\Git\\cmd;C:\\Program Files\\Docker\\Docker\\resources\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Launcher\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python311\\Scripts\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python311\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Microsoft\\WindowsApps;C:\\Program Files\\JetBrains\\IntelliJ IDEA 2024.1.4\\bin;;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python312\\Scripts;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Git\\cmd;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\PyCharm 2023.2.5\\bin;;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\GoLand 2023.2.5\\bin;;C:\\go;C:\\go\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\WebStorm 2023.3\\bin;;C:\\java\\jdk-17.0.10\\bin;C:\\java\\jdk-17.0.10\\lib;C:\\java\\jdk-17.0.10;C:\\java\\jdk-17.0.10\\bin;C:\\Program Files (x86)\\Common Files\\Oracle\\Java\\javapath;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\WINDOWS\\System32\\OpenSSH\\;C:\\Program Files\\dotnet\\;C:\\Program Files (x86)\\Windows Kits\\10\\Windows Performance Toolkit\\;C:\\Program Files\\nodejs\\;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin;C:\\Program Files\\PostgreSQL\\16\\bin;C:\\Program Files\\vtex\\client\\bin;C:\\Program Files\\Git\\cmd;C:\\Program Files\\Docker\\Docker\\resources\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin;C:\\Users\\mdorsi.tier2.admin\\.cargo\\;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin\\rustup.exe;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\pessoal\\Aplicativos\\PdftoImage\\dependences\\poppler-23.08.0;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\pessoal\\Aplicativos\\PdftoImage\\dependences\\poppler-23.08.0\\Library\\bin;C:\\Users\\mdorsi.tier2.admin\\apache-maven-3.9.9;C:\\Users\\mdorsi.tier2.admin\\apache-maven-3.9.9\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Microsoft VS Code\\bin;;C:\\Program Files\\JetBrains\\PhpStorm 2024.3.1\\bin;;C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin;C:\\Users\\mdorsi.tier2.admin\\.cargo\\;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin\\rustup.exe;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\pessoal\\Aplicativos\\PdftoImage\\dependences\\poppler-23.08.0;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\pessoal\\Aplicativos\\PdftoImage\\dependences\\poppler-23.08.0\\Library\\bin;C:\\Users\\mdorsi.tier2.admin\\apache-maven-3.9.9;C:\\Users\\mdorsi.tier2.admin\\apache-maven-3.9.9\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Microsoft VS Code\\bin;;C:\\Program Files\\JetBrains\\PhpStorm 2024.3.1\\bin;;C:\\Users\\mdorsi.tier2.admin\\.fly\\bin;C:\\Users\\mdorsi.tier2.admin\\CharloteRio\\node_modules\\.bin",PATHEXT:".COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC;.CPL",PhpStorm:"C:\\Program Files\\JetBrains\\PhpStorm 2024.3.1\\bin;",PLMVIS_82_LIBPATH:"C:\\Program Files (x86)\\SAP\\FrontEnd\\SAPgui\\Program",PROCESSOR_ARCHITECTURE:"AMD64",PROCESSOR_IDENTIFIER:"Intel64 Family 6 Model 140 Stepping 1, GenuineIntel",PROCESSOR_LEVEL:"6",PROCESSOR_REVISION:"8c01",ProgramData:"C:\\ProgramData",ProgramFiles:"C:\\Program Files","ProgramFiles(x86)":"C:\\Program Files (x86)",ProgramW6432:"C:\\Program Files",PROMPT:"$P$G",PSExecutionPolicyPreference:"Bypass",PSModulePath:"C:\\Users\\mdorsi.tier2.admin\\OneDrive\\Documentos\\WindowsPowerShell\\Modules;C:\\Program Files\\WindowsPowerShell\\Modules;C:\\WINDOWS\\system32\\WindowsPowerShell\\v1.0\\Modules",PT8HOME:"C:\\Program Files\\Cisco Packet Tracer 8.2.2",PUBLIC:"C:\\Users\\Public",PyCharm:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\PyCharm 2023.2.5\\bin;",SESSIONNAME:"Console",SystemDrive:"C:",SystemRoot:"C:\\WINDOWS",TEMP:"C:\\Users\\MDORSI~1.ADM\\AppData\\Local\\Temp",TERMINAL_EMULATOR:"JetBrains-JediTerm",TERM_SESSION_ID:"f1913f5b-8352-4ffb-9a3e-e115e4486275",TMP:"C:\\Users\\MDORSI~1.ADM\\AppData\\Local\\Temp",USERDNSDOMAIN:"EDUC.ACAD",USERDOMAIN:"EDUCACAD",USERDOMAIN_ROAMINGPROFILE:"EDUCACAD",USERNAME:"mdorsi.tier2.admin",USERPROFILE:"C:\\Users\\mdorsi.tier2.admin",WebStorm:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\WebStorm 2023.3\\bin;",windir:"C:\\WINDOWS",ZES_ENABLE_SYSMAN:"1"}&&void 0!=={ALLUSERSPROFILE:"C:\\ProgramData",APPDATA:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming",ChocolateyInstall:"C:\\ProgramData\\chocolatey",ChocolateyLastPathUpdate:"133739169618057786",COLOR:"1",CommonProgramFiles:"C:\\Program Files\\Common Files","CommonProgramFiles(x86)":"C:\\Program Files (x86)\\Common Files",CommonProgramW6432:"C:\\Program Files\\Common Files",COMPUTERNAME:"IBT-WS-062679",ComSpec:"C:\\WINDOWS\\system32\\cmd.exe",DriverData:"C:\\Windows\\System32\\Drivers\\DriverData",EDITOR:"C:\\WINDOWS\\notepad.exe",EFC_9708:"1",FPS_BROWSER_APP_PROFILE_STRING:"Internet Explorer",FPS_BROWSER_USER_PROFILE_STRING:"Default",GoLand:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\GoLand 2023.2.5\\bin;",HOME:"C:\\Users\\mdorsi.tier2.admin",HOMEDRIVE:"C:",HOMEPATH:"\\Users\\mdorsi.tier2.admin",IDEA_INITIAL_DIRECTORY:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\WebStorm 2023.3\\bin",IGCCSVC_DB:"AQAAANCMnd8BFdERjHoAwE/Cl+sBAAAA7DqY1R3HX0aTSSlswK0VlgQAAAACAAAAAAAQZgAAAAEAACAAAABm65ppy4VnMFDUW4UsfN5HPI3yz9rnIpdfVGhrA4zgigAAAAAOgAAAAAIAACAAAABJpvp9a80y9IV5hP6fnCb1uKjNyrXZjdLmSwVxaoJylWAAAADYv8hOqBVUtjT1Cqsh1Xczhe4/q8hfUQ6SA5kSaemR37Yl+0aOG1FimG6uDSlGjhQDyeDwToU/XF4GyH7pVWO2rOVlfzMJbXLy8LJpGAn+JxZN3K0KK3+xDbw+vPjsczBAAAAA2Pth2w7+5O2/1E0Pt9N37mzbN3Q7/+oMWl+T3/m8hiS7sPgeMlEvoaBrgLXIlEi1j3+1o3rII1AJ3+7b3dSClA==",INIT_CWD:"C:\\Users\\mdorsi.tier2.admin\\charlotemichelpage","IntelliJ IDEA":"C:\\Program Files\\JetBrains\\IntelliJ IDEA 2024.1.4\\bin;",JAVA_HOME:"C:\\java\\jdk-17.0.10",LOCALAPPDATA:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local",LOGONSERVER:"\\\\AWW-W-ACADDC01",NODE:"C:\\Program Files\\nodejs\\node.exe",NODE_EXE:"C:\\Program Files\\nodejs\\\\node.exe",NPM_CLI_JS:"C:\\Program Files\\nodejs\\\\node_modules\\npm\\bin\\npm-cli.js",npm_command:"run-script",npm_config_cache:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\npm-cache",npm_config_globalconfig:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm\\etc\\npmrc",npm_config_global_prefix:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm",npm_config_init_module:"C:\\Users\\mdorsi.tier2.admin\\.npm-init.js",npm_config_local_prefix:"C:\\Users\\mdorsi.tier2.admin\\charlotemichelpage",npm_config_node_gyp:"C:\\Program Files\\nodejs\\node_modules\\npm\\node_modules\\node-gyp\\bin\\node-gyp.js",npm_config_noproxy:"",npm_config_npm_version:"10.5.0",npm_config_prefix:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm",npm_config_userconfig:"C:\\Users\\mdorsi.tier2.admin\\.npmrc",npm_config_user_agent:"npm/10.5.0 node/v20.12.2 win32 x64 workspaces/false",npm_execpath:"C:\\Program Files\\nodejs\\node_modules\\npm\\bin\\npm-cli.js",npm_lifecycle_event:"build",npm_lifecycle_script:"webpack --mode production",npm_node_execpath:"C:\\Program Files\\nodejs\\node.exe",npm_package_json:"C:\\Users\\mdorsi.tier2.admin\\charlotemichelpage\\package.json",npm_package_name:"charloterio",npm_package_version:"1.0.0",NPM_PREFIX_NPM_CLI_JS:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm\\node_modules\\npm\\bin\\npm-cli.js",NUMBER_OF_PROCESSORS:"8",OneDrive:"C:\\Users\\mdorsi.tier2.admin\\OneDrive - Corporativo",OneDriveCommercial:"C:\\Users\\mdorsi.tier2.admin\\OneDrive - Corporativo",OneDriveConsumer:"C:\\Users\\mdorsi.tier2.admin\\OneDrive",OS:"Windows_NT",Path:"C:\\Users\\mdorsi.tier2.admin\\charlotemichelpage\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\node_modules\\.bin;C:\\Users\\node_modules\\.bin;C:\\node_modules\\.bin;C:\\Program Files\\nodejs\\node_modules\\npm\\node_modules\\@npmcli\\run-script\\lib\\node-gyp-bin;C:\\Users\\mdorsi.tier2.admin\\charlotemichelpage\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\node_modules\\.bin;C:\\Users\\node_modules\\.bin;C:\\node_modules\\.bin;C:\\Program Files\\nodejs\\node_modules\\npm\\node_modules\\@npmcli\\run-script\\lib\\node-gyp-bin;C:\\Program Files (x86)\\Common Files\\Oracle\\Java\\javapath;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\WINDOWS\\System32\\OpenSSH\\;C:\\Program Files\\dotnet\\;C:\\Program Files (x86)\\Windows Kits\\10\\Windows Performance Toolkit\\;C:\\Program Files\\nodejs\\;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin;C:\\Program Files\\PostgreSQL\\16\\bin;C:\\Program Files\\vtex\\client\\bin;C:\\Program Files\\Git\\cmd;C:\\Users\\mdorsi.tier2.admin\\.fly\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm\\node_modules\\yarn;C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm\\node_modules\\yarn\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Launcher\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python311\\Scripts\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python311\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Microsoft\\WindowsApps;C:\\Program Files\\JetBrains\\IntelliJ IDEA 2024.1.4\\bin;;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python312\\Scripts;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Git\\cmd;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\PyCharm 2023.2.5\\bin;;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\GoLand 2023.2.5\\bin;;C:\\go;C:\\go\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\WebStorm 2023.3\\bin;;C:\\java\\jdk-17.0.10\\bin;C:\\java\\jdk-17.0.10\\lib;C:\\java\\jdk-17.0.10;C:\\java\\jdk-17.0.10\\bin;C:\\Program Files (x86)\\Common Files\\Oracle\\Java\\javapath;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\WINDOWS\\System32\\OpenSSH\\;C:\\Program Files\\dotnet\\;C:\\Program Files (x86)\\Windows Kits\\10\\Windows Performance Toolkit\\;C:\\Program Files\\nodejs\\;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin;C:\\Program Files\\PostgreSQL\\16\\bin;C:\\Program Files\\vtex\\client\\bin;C:\\Program Files\\Git\\cmd;C:\\Program Files\\Docker\\Docker\\resources\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Launcher\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python311\\Scripts\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python311\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Microsoft\\WindowsApps;C:\\Program Files\\JetBrains\\IntelliJ IDEA 2024.1.4\\bin;;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python312\\Scripts;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Git\\cmd;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\PyCharm 2023.2.5\\bin;;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\GoLand 2023.2.5\\bin;;C:\\go;C:\\go\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\WebStorm 2023.3\\bin;;C:\\java\\jdk-17.0.10\\bin;C:\\java\\jdk-17.0.10\\lib;C:\\java\\jdk-17.0.10;C:\\java\\jdk-17.0.10\\bin;C:\\Program Files (x86)\\Common Files\\Oracle\\Java\\javapath;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\WINDOWS\\System32\\OpenSSH\\;C:\\Program Files\\dotnet\\;C:\\Program Files (x86)\\Windows Kits\\10\\Windows Performance Toolkit\\;C:\\Program Files\\nodejs\\;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin;C:\\Program Files\\PostgreSQL\\16\\bin;C:\\Program Files\\vtex\\client\\bin;C:\\Program Files\\Git\\cmd;C:\\Program Files\\Docker\\Docker\\resources\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin;C:\\Users\\mdorsi.tier2.admin\\.cargo\\;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin\\rustup.exe;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\pessoal\\Aplicativos\\PdftoImage\\dependences\\poppler-23.08.0;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\pessoal\\Aplicativos\\PdftoImage\\dependences\\poppler-23.08.0\\Library\\bin;C:\\Users\\mdorsi.tier2.admin\\apache-maven-3.9.9;C:\\Users\\mdorsi.tier2.admin\\apache-maven-3.9.9\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Microsoft VS Code\\bin;;C:\\Program Files\\JetBrains\\PhpStorm 2024.3.1\\bin;;C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin;C:\\Users\\mdorsi.tier2.admin\\.cargo\\;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin\\rustup.exe;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\pessoal\\Aplicativos\\PdftoImage\\dependences\\poppler-23.08.0;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\pessoal\\Aplicativos\\PdftoImage\\dependences\\poppler-23.08.0\\Library\\bin;C:\\Users\\mdorsi.tier2.admin\\apache-maven-3.9.9;C:\\Users\\mdorsi.tier2.admin\\apache-maven-3.9.9\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Microsoft VS Code\\bin;;C:\\Program Files\\JetBrains\\PhpStorm 2024.3.1\\bin;;C:\\Users\\mdorsi.tier2.admin\\.fly\\bin;C:\\Users\\mdorsi.tier2.admin\\CharloteRio\\node_modules\\.bin",PATHEXT:".COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC;.CPL",PhpStorm:"C:\\Program Files\\JetBrains\\PhpStorm 2024.3.1\\bin;",PLMVIS_82_LIBPATH:"C:\\Program Files (x86)\\SAP\\FrontEnd\\SAPgui\\Program",PROCESSOR_ARCHITECTURE:"AMD64",PROCESSOR_IDENTIFIER:"Intel64 Family 6 Model 140 Stepping 1, GenuineIntel",PROCESSOR_LEVEL:"6",PROCESSOR_REVISION:"8c01",ProgramData:"C:\\ProgramData",ProgramFiles:"C:\\Program Files","ProgramFiles(x86)":"C:\\Program Files (x86)",ProgramW6432:"C:\\Program Files",PROMPT:"$P$G",PSExecutionPolicyPreference:"Bypass",PSModulePath:"C:\\Users\\mdorsi.tier2.admin\\OneDrive\\Documentos\\WindowsPowerShell\\Modules;C:\\Program Files\\WindowsPowerShell\\Modules;C:\\WINDOWS\\system32\\WindowsPowerShell\\v1.0\\Modules",PT8HOME:"C:\\Program Files\\Cisco Packet Tracer 8.2.2",PUBLIC:"C:\\Users\\Public",PyCharm:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\PyCharm 2023.2.5\\bin;",SESSIONNAME:"Console",SystemDrive:"C:",SystemRoot:"C:\\WINDOWS",TEMP:"C:\\Users\\MDORSI~1.ADM\\AppData\\Local\\Temp",TERMINAL_EMULATOR:"JetBrains-JediTerm",TERM_SESSION_ID:"f1913f5b-8352-4ffb-9a3e-e115e4486275",TMP:"C:\\Users\\MDORSI~1.ADM\\AppData\\Local\\Temp",USERDNSDOMAIN:"EDUC.ACAD",USERDOMAIN:"EDUCACAD",USERDOMAIN_ROAMINGPROFILE:"EDUCACAD",USERNAME:"mdorsi.tier2.admin",USERPROFILE:"C:\\Users\\mdorsi.tier2.admin",WebStorm:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\WebStorm 2023.3\\bin;",windir:"C:\\WINDOWS",ZES_ENABLE_SYSMAN:"1"}.SC_DISABLE_SPEEDY&&""!=={ALLUSERSPROFILE:"C:\\ProgramData",APPDATA:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming",ChocolateyInstall:"C:\\ProgramData\\chocolatey",ChocolateyLastPathUpdate:"133739169618057786",COLOR:"1",CommonProgramFiles:"C:\\Program Files\\Common Files","CommonProgramFiles(x86)":"C:\\Program Files (x86)\\Common Files",CommonProgramW6432:"C:\\Program Files\\Common Files",COMPUTERNAME:"IBT-WS-062679",ComSpec:"C:\\WINDOWS\\system32\\cmd.exe",DriverData:"C:\\Windows\\System32\\Drivers\\DriverData",EDITOR:"C:\\WINDOWS\\notepad.exe",EFC_9708:"1",FPS_BROWSER_APP_PROFILE_STRING:"Internet Explorer",FPS_BROWSER_USER_PROFILE_STRING:"Default",GoLand:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\GoLand 2023.2.5\\bin;",HOME:"C:\\Users\\mdorsi.tier2.admin",HOMEDRIVE:"C:",HOMEPATH:"\\Users\\mdorsi.tier2.admin",IDEA_INITIAL_DIRECTORY:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\WebStorm 2023.3\\bin",IGCCSVC_DB:"AQAAANCMnd8BFdERjHoAwE/Cl+sBAAAA7DqY1R3HX0aTSSlswK0VlgQAAAACAAAAAAAQZgAAAAEAACAAAABm65ppy4VnMFDUW4UsfN5HPI3yz9rnIpdfVGhrA4zgigAAAAAOgAAAAAIAACAAAABJpvp9a80y9IV5hP6fnCb1uKjNyrXZjdLmSwVxaoJylWAAAADYv8hOqBVUtjT1Cqsh1Xczhe4/q8hfUQ6SA5kSaemR37Yl+0aOG1FimG6uDSlGjhQDyeDwToU/XF4GyH7pVWO2rOVlfzMJbXLy8LJpGAn+JxZN3K0KK3+xDbw+vPjsczBAAAAA2Pth2w7+5O2/1E0Pt9N37mzbN3Q7/+oMWl+T3/m8hiS7sPgeMlEvoaBrgLXIlEi1j3+1o3rII1AJ3+7b3dSClA==",INIT_CWD:"C:\\Users\\mdorsi.tier2.admin\\charlotemichelpage","IntelliJ IDEA":"C:\\Program Files\\JetBrains\\IntelliJ IDEA 2024.1.4\\bin;",JAVA_HOME:"C:\\java\\jdk-17.0.10",LOCALAPPDATA:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local",LOGONSERVER:"\\\\AWW-W-ACADDC01",NODE:"C:\\Program Files\\nodejs\\node.exe",NODE_EXE:"C:\\Program Files\\nodejs\\\\node.exe",NPM_CLI_JS:"C:\\Program Files\\nodejs\\\\node_modules\\npm\\bin\\npm-cli.js",npm_command:"run-script",npm_config_cache:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\npm-cache",npm_config_globalconfig:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm\\etc\\npmrc",npm_config_global_prefix:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm",npm_config_init_module:"C:\\Users\\mdorsi.tier2.admin\\.npm-init.js",npm_config_local_prefix:"C:\\Users\\mdorsi.tier2.admin\\charlotemichelpage",npm_config_node_gyp:"C:\\Program Files\\nodejs\\node_modules\\npm\\node_modules\\node-gyp\\bin\\node-gyp.js",npm_config_noproxy:"",npm_config_npm_version:"10.5.0",npm_config_prefix:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm",npm_config_userconfig:"C:\\Users\\mdorsi.tier2.admin\\.npmrc",npm_config_user_agent:"npm/10.5.0 node/v20.12.2 win32 x64 workspaces/false",npm_execpath:"C:\\Program Files\\nodejs\\node_modules\\npm\\bin\\npm-cli.js",npm_lifecycle_event:"build",npm_lifecycle_script:"webpack --mode production",npm_node_execpath:"C:\\Program Files\\nodejs\\node.exe",npm_package_json:"C:\\Users\\mdorsi.tier2.admin\\charlotemichelpage\\package.json",npm_package_name:"charloterio",npm_package_version:"1.0.0",NPM_PREFIX_NPM_CLI_JS:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm\\node_modules\\npm\\bin\\npm-cli.js",NUMBER_OF_PROCESSORS:"8",OneDrive:"C:\\Users\\mdorsi.tier2.admin\\OneDrive - Corporativo",OneDriveCommercial:"C:\\Users\\mdorsi.tier2.admin\\OneDrive - Corporativo",OneDriveConsumer:"C:\\Users\\mdorsi.tier2.admin\\OneDrive",OS:"Windows_NT",Path:"C:\\Users\\mdorsi.tier2.admin\\charlotemichelpage\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\node_modules\\.bin;C:\\Users\\node_modules\\.bin;C:\\node_modules\\.bin;C:\\Program Files\\nodejs\\node_modules\\npm\\node_modules\\@npmcli\\run-script\\lib\\node-gyp-bin;C:\\Users\\mdorsi.tier2.admin\\charlotemichelpage\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\node_modules\\.bin;C:\\Users\\node_modules\\.bin;C:\\node_modules\\.bin;C:\\Program Files\\nodejs\\node_modules\\npm\\node_modules\\@npmcli\\run-script\\lib\\node-gyp-bin;C:\\Program Files (x86)\\Common Files\\Oracle\\Java\\javapath;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\WINDOWS\\System32\\OpenSSH\\;C:\\Program Files\\dotnet\\;C:\\Program Files (x86)\\Windows Kits\\10\\Windows Performance Toolkit\\;C:\\Program Files\\nodejs\\;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin;C:\\Program Files\\PostgreSQL\\16\\bin;C:\\Program Files\\vtex\\client\\bin;C:\\Program Files\\Git\\cmd;C:\\Users\\mdorsi.tier2.admin\\.fly\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm\\node_modules\\yarn;C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm\\node_modules\\yarn\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Launcher\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python311\\Scripts\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python311\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Microsoft\\WindowsApps;C:\\Program Files\\JetBrains\\IntelliJ IDEA 2024.1.4\\bin;;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python312\\Scripts;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Git\\cmd;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\PyCharm 2023.2.5\\bin;;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\GoLand 2023.2.5\\bin;;C:\\go;C:\\go\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\WebStorm 2023.3\\bin;;C:\\java\\jdk-17.0.10\\bin;C:\\java\\jdk-17.0.10\\lib;C:\\java\\jdk-17.0.10;C:\\java\\jdk-17.0.10\\bin;C:\\Program Files (x86)\\Common Files\\Oracle\\Java\\javapath;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\WINDOWS\\System32\\OpenSSH\\;C:\\Program Files\\dotnet\\;C:\\Program Files (x86)\\Windows Kits\\10\\Windows Performance Toolkit\\;C:\\Program Files\\nodejs\\;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin;C:\\Program Files\\PostgreSQL\\16\\bin;C:\\Program Files\\vtex\\client\\bin;C:\\Program Files\\Git\\cmd;C:\\Program Files\\Docker\\Docker\\resources\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Launcher\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python311\\Scripts\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python311\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Microsoft\\WindowsApps;C:\\Program Files\\JetBrains\\IntelliJ IDEA 2024.1.4\\bin;;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python312\\Scripts;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Git\\cmd;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\PyCharm 2023.2.5\\bin;;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\GoLand 2023.2.5\\bin;;C:\\go;C:\\go\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\WebStorm 2023.3\\bin;;C:\\java\\jdk-17.0.10\\bin;C:\\java\\jdk-17.0.10\\lib;C:\\java\\jdk-17.0.10;C:\\java\\jdk-17.0.10\\bin;C:\\Program Files (x86)\\Common Files\\Oracle\\Java\\javapath;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\WINDOWS\\System32\\OpenSSH\\;C:\\Program Files\\dotnet\\;C:\\Program Files (x86)\\Windows Kits\\10\\Windows Performance Toolkit\\;C:\\Program Files\\nodejs\\;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin;C:\\Program Files\\PostgreSQL\\16\\bin;C:\\Program Files\\vtex\\client\\bin;C:\\Program Files\\Git\\cmd;C:\\Program Files\\Docker\\Docker\\resources\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin;C:\\Users\\mdorsi.tier2.admin\\.cargo\\;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin\\rustup.exe;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\pessoal\\Aplicativos\\PdftoImage\\dependences\\poppler-23.08.0;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\pessoal\\Aplicativos\\PdftoImage\\dependences\\poppler-23.08.0\\Library\\bin;C:\\Users\\mdorsi.tier2.admin\\apache-maven-3.9.9;C:\\Users\\mdorsi.tier2.admin\\apache-maven-3.9.9\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Microsoft VS Code\\bin;;C:\\Program Files\\JetBrains\\PhpStorm 2024.3.1\\bin;;C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin;C:\\Users\\mdorsi.tier2.admin\\.cargo\\;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin\\rustup.exe;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\pessoal\\Aplicativos\\PdftoImage\\dependences\\poppler-23.08.0;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\pessoal\\Aplicativos\\PdftoImage\\dependences\\poppler-23.08.0\\Library\\bin;C:\\Users\\mdorsi.tier2.admin\\apache-maven-3.9.9;C:\\Users\\mdorsi.tier2.admin\\apache-maven-3.9.9\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Microsoft VS Code\\bin;;C:\\Program Files\\JetBrains\\PhpStorm 2024.3.1\\bin;;C:\\Users\\mdorsi.tier2.admin\\.fly\\bin;C:\\Users\\mdorsi.tier2.admin\\CharloteRio\\node_modules\\.bin",PATHEXT:".COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC;.CPL",PhpStorm:"C:\\Program Files\\JetBrains\\PhpStorm 2024.3.1\\bin;",PLMVIS_82_LIBPATH:"C:\\Program Files (x86)\\SAP\\FrontEnd\\SAPgui\\Program",PROCESSOR_ARCHITECTURE:"AMD64",PROCESSOR_IDENTIFIER:"Intel64 Family 6 Model 140 Stepping 1, GenuineIntel",PROCESSOR_LEVEL:"6",PROCESSOR_REVISION:"8c01",ProgramData:"C:\\ProgramData",ProgramFiles:"C:\\Program Files","ProgramFiles(x86)":"C:\\Program Files (x86)",ProgramW6432:"C:\\Program Files",PROMPT:"$P$G",PSExecutionPolicyPreference:"Bypass",PSModulePath:"C:\\Users\\mdorsi.tier2.admin\\OneDrive\\Documentos\\WindowsPowerShell\\Modules;C:\\Program Files\\WindowsPowerShell\\Modules;C:\\WINDOWS\\system32\\WindowsPowerShell\\v1.0\\Modules",PT8HOME:"C:\\Program Files\\Cisco Packet Tracer 8.2.2",PUBLIC:"C:\\Users\\Public",PyCharm:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\PyCharm 2023.2.5\\bin;",SESSIONNAME:"Console",SystemDrive:"C:",SystemRoot:"C:\\WINDOWS",TEMP:"C:\\Users\\MDORSI~1.ADM\\AppData\\Local\\Temp",TERMINAL_EMULATOR:"JetBrains-JediTerm",TERM_SESSION_ID:"f1913f5b-8352-4ffb-9a3e-e115e4486275",TMP:"C:\\Users\\MDORSI~1.ADM\\AppData\\Local\\Temp",USERDNSDOMAIN:"EDUC.ACAD",USERDOMAIN:"EDUCACAD",USERDOMAIN_ROAMINGPROFILE:"EDUCACAD",USERNAME:"mdorsi.tier2.admin",USERPROFILE:"C:\\Users\\mdorsi.tier2.admin",WebStorm:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\WebStorm 2023.3\\bin;",windir:"C:\\WINDOWS",ZES_ENABLE_SYSMAN:"1"}.SC_DISABLE_SPEEDY&&"false"!=={ALLUSERSPROFILE:"C:\\ProgramData",APPDATA:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming",ChocolateyInstall:"C:\\ProgramData\\chocolatey",ChocolateyLastPathUpdate:"133739169618057786",COLOR:"1",CommonProgramFiles:"C:\\Program Files\\Common Files","CommonProgramFiles(x86)":"C:\\Program Files (x86)\\Common Files",CommonProgramW6432:"C:\\Program Files\\Common Files",COMPUTERNAME:"IBT-WS-062679",ComSpec:"C:\\WINDOWS\\system32\\cmd.exe",DriverData:"C:\\Windows\\System32\\Drivers\\DriverData",EDITOR:"C:\\WINDOWS\\notepad.exe",EFC_9708:"1",FPS_BROWSER_APP_PROFILE_STRING:"Internet Explorer",FPS_BROWSER_USER_PROFILE_STRING:"Default",GoLand:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\GoLand 2023.2.5\\bin;",HOME:"C:\\Users\\mdorsi.tier2.admin",HOMEDRIVE:"C:",HOMEPATH:"\\Users\\mdorsi.tier2.admin",IDEA_INITIAL_DIRECTORY:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\WebStorm 2023.3\\bin",IGCCSVC_DB:"AQAAANCMnd8BFdERjHoAwE/Cl+sBAAAA7DqY1R3HX0aTSSlswK0VlgQAAAACAAAAAAAQZgAAAAEAACAAAABm65ppy4VnMFDUW4UsfN5HPI3yz9rnIpdfVGhrA4zgigAAAAAOgAAAAAIAACAAAABJpvp9a80y9IV5hP6fnCb1uKjNyrXZjdLmSwVxaoJylWAAAADYv8hOqBVUtjT1Cqsh1Xczhe4/q8hfUQ6SA5kSaemR37Yl+0aOG1FimG6uDSlGjhQDyeDwToU/XF4GyH7pVWO2rOVlfzMJbXLy8LJpGAn+JxZN3K0KK3+xDbw+vPjsczBAAAAA2Pth2w7+5O2/1E0Pt9N37mzbN3Q7/+oMWl+T3/m8hiS7sPgeMlEvoaBrgLXIlEi1j3+1o3rII1AJ3+7b3dSClA==",INIT_CWD:"C:\\Users\\mdorsi.tier2.admin\\charlotemichelpage","IntelliJ IDEA":"C:\\Program Files\\JetBrains\\IntelliJ IDEA 2024.1.4\\bin;",JAVA_HOME:"C:\\java\\jdk-17.0.10",LOCALAPPDATA:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local",LOGONSERVER:"\\\\AWW-W-ACADDC01",NODE:"C:\\Program Files\\nodejs\\node.exe",NODE_EXE:"C:\\Program Files\\nodejs\\\\node.exe",NPM_CLI_JS:"C:\\Program Files\\nodejs\\\\node_modules\\npm\\bin\\npm-cli.js",npm_command:"run-script",npm_config_cache:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\npm-cache",npm_config_globalconfig:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm\\etc\\npmrc",npm_config_global_prefix:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm",npm_config_init_module:"C:\\Users\\mdorsi.tier2.admin\\.npm-init.js",npm_config_local_prefix:"C:\\Users\\mdorsi.tier2.admin\\charlotemichelpage",npm_config_node_gyp:"C:\\Program Files\\nodejs\\node_modules\\npm\\node_modules\\node-gyp\\bin\\node-gyp.js",npm_config_noproxy:"",npm_config_npm_version:"10.5.0",npm_config_prefix:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm",npm_config_userconfig:"C:\\Users\\mdorsi.tier2.admin\\.npmrc",npm_config_user_agent:"npm/10.5.0 node/v20.12.2 win32 x64 workspaces/false",npm_execpath:"C:\\Program Files\\nodejs\\node_modules\\npm\\bin\\npm-cli.js",npm_lifecycle_event:"build",npm_lifecycle_script:"webpack --mode production",npm_node_execpath:"C:\\Program Files\\nodejs\\node.exe",npm_package_json:"C:\\Users\\mdorsi.tier2.admin\\charlotemichelpage\\package.json",npm_package_name:"charloterio",npm_package_version:"1.0.0",NPM_PREFIX_NPM_CLI_JS:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm\\node_modules\\npm\\bin\\npm-cli.js",NUMBER_OF_PROCESSORS:"8",OneDrive:"C:\\Users\\mdorsi.tier2.admin\\OneDrive - Corporativo",OneDriveCommercial:"C:\\Users\\mdorsi.tier2.admin\\OneDrive - Corporativo",OneDriveConsumer:"C:\\Users\\mdorsi.tier2.admin\\OneDrive",OS:"Windows_NT",Path:"C:\\Users\\mdorsi.tier2.admin\\charlotemichelpage\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\node_modules\\.bin;C:\\Users\\node_modules\\.bin;C:\\node_modules\\.bin;C:\\Program Files\\nodejs\\node_modules\\npm\\node_modules\\@npmcli\\run-script\\lib\\node-gyp-bin;C:\\Users\\mdorsi.tier2.admin\\charlotemichelpage\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\node_modules\\.bin;C:\\Users\\node_modules\\.bin;C:\\node_modules\\.bin;C:\\Program Files\\nodejs\\node_modules\\npm\\node_modules\\@npmcli\\run-script\\lib\\node-gyp-bin;C:\\Program Files (x86)\\Common Files\\Oracle\\Java\\javapath;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\WINDOWS\\System32\\OpenSSH\\;C:\\Program Files\\dotnet\\;C:\\Program Files (x86)\\Windows Kits\\10\\Windows Performance Toolkit\\;C:\\Program Files\\nodejs\\;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin;C:\\Program Files\\PostgreSQL\\16\\bin;C:\\Program Files\\vtex\\client\\bin;C:\\Program Files\\Git\\cmd;C:\\Users\\mdorsi.tier2.admin\\.fly\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm\\node_modules\\yarn;C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm\\node_modules\\yarn\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Launcher\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python311\\Scripts\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python311\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Microsoft\\WindowsApps;C:\\Program Files\\JetBrains\\IntelliJ IDEA 2024.1.4\\bin;;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python312\\Scripts;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Git\\cmd;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\PyCharm 2023.2.5\\bin;;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\GoLand 2023.2.5\\bin;;C:\\go;C:\\go\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\WebStorm 2023.3\\bin;;C:\\java\\jdk-17.0.10\\bin;C:\\java\\jdk-17.0.10\\lib;C:\\java\\jdk-17.0.10;C:\\java\\jdk-17.0.10\\bin;C:\\Program Files (x86)\\Common Files\\Oracle\\Java\\javapath;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\WINDOWS\\System32\\OpenSSH\\;C:\\Program Files\\dotnet\\;C:\\Program Files (x86)\\Windows Kits\\10\\Windows Performance Toolkit\\;C:\\Program Files\\nodejs\\;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin;C:\\Program Files\\PostgreSQL\\16\\bin;C:\\Program Files\\vtex\\client\\bin;C:\\Program Files\\Git\\cmd;C:\\Program Files\\Docker\\Docker\\resources\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Launcher\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python311\\Scripts\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python311\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Microsoft\\WindowsApps;C:\\Program Files\\JetBrains\\IntelliJ IDEA 2024.1.4\\bin;;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python312\\Scripts;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Git\\cmd;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\PyCharm 2023.2.5\\bin;;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\GoLand 2023.2.5\\bin;;C:\\go;C:\\go\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\WebStorm 2023.3\\bin;;C:\\java\\jdk-17.0.10\\bin;C:\\java\\jdk-17.0.10\\lib;C:\\java\\jdk-17.0.10;C:\\java\\jdk-17.0.10\\bin;C:\\Program Files (x86)\\Common Files\\Oracle\\Java\\javapath;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\WINDOWS\\System32\\OpenSSH\\;C:\\Program Files\\dotnet\\;C:\\Program Files (x86)\\Windows Kits\\10\\Windows Performance Toolkit\\;C:\\Program Files\\nodejs\\;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin;C:\\Program Files\\PostgreSQL\\16\\bin;C:\\Program Files\\vtex\\client\\bin;C:\\Program Files\\Git\\cmd;C:\\Program Files\\Docker\\Docker\\resources\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin;C:\\Users\\mdorsi.tier2.admin\\.cargo\\;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin\\rustup.exe;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\pessoal\\Aplicativos\\PdftoImage\\dependences\\poppler-23.08.0;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\pessoal\\Aplicativos\\PdftoImage\\dependences\\poppler-23.08.0\\Library\\bin;C:\\Users\\mdorsi.tier2.admin\\apache-maven-3.9.9;C:\\Users\\mdorsi.tier2.admin\\apache-maven-3.9.9\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Microsoft VS Code\\bin;;C:\\Program Files\\JetBrains\\PhpStorm 2024.3.1\\bin;;C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin;C:\\Users\\mdorsi.tier2.admin\\.cargo\\;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin\\rustup.exe;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\pessoal\\Aplicativos\\PdftoImage\\dependences\\poppler-23.08.0;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\pessoal\\Aplicativos\\PdftoImage\\dependences\\poppler-23.08.0\\Library\\bin;C:\\Users\\mdorsi.tier2.admin\\apache-maven-3.9.9;C:\\Users\\mdorsi.tier2.admin\\apache-maven-3.9.9\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Microsoft VS Code\\bin;;C:\\Program Files\\JetBrains\\PhpStorm 2024.3.1\\bin;;C:\\Users\\mdorsi.tier2.admin\\.fly\\bin;C:\\Users\\mdorsi.tier2.admin\\CharloteRio\\node_modules\\.bin",PATHEXT:".COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC;.CPL",PhpStorm:"C:\\Program Files\\JetBrains\\PhpStorm 2024.3.1\\bin;",PLMVIS_82_LIBPATH:"C:\\Program Files (x86)\\SAP\\FrontEnd\\SAPgui\\Program",PROCESSOR_ARCHITECTURE:"AMD64",PROCESSOR_IDENTIFIER:"Intel64 Family 6 Model 140 Stepping 1, GenuineIntel",PROCESSOR_LEVEL:"6",PROCESSOR_REVISION:"8c01",ProgramData:"C:\\ProgramData",ProgramFiles:"C:\\Program Files","ProgramFiles(x86)":"C:\\Program Files (x86)",ProgramW6432:"C:\\Program Files",PROMPT:"$P$G",PSExecutionPolicyPreference:"Bypass",PSModulePath:"C:\\Users\\mdorsi.tier2.admin\\OneDrive\\Documentos\\WindowsPowerShell\\Modules;C:\\Program Files\\WindowsPowerShell\\Modules;C:\\WINDOWS\\system32\\WindowsPowerShell\\v1.0\\Modules",PT8HOME:"C:\\Program Files\\Cisco Packet Tracer 8.2.2",PUBLIC:"C:\\Users\\Public",PyCharm:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\PyCharm 2023.2.5\\bin;",SESSIONNAME:"Console",SystemDrive:"C:",SystemRoot:"C:\\WINDOWS",TEMP:"C:\\Users\\MDORSI~1.ADM\\AppData\\Local\\Temp",TERMINAL_EMULATOR:"JetBrains-JediTerm",TERM_SESSION_ID:"f1913f5b-8352-4ffb-9a3e-e115e4486275",TMP:"C:\\Users\\MDORSI~1.ADM\\AppData\\Local\\Temp",USERDNSDOMAIN:"EDUC.ACAD",USERDOMAIN:"EDUCACAD",USERDOMAIN_ROAMINGPROFILE:"EDUCACAD",USERNAME:"mdorsi.tier2.admin",USERPROFILE:"C:\\Users\\mdorsi.tier2.admin",WebStorm:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\WebStorm 2023.3\\bin;",windir:"C:\\WINDOWS",ZES_ENABLE_SYSMAN:"1"}.SC_DISABLE_SPEEDY&&{ALLUSERSPROFILE:"C:\\ProgramData",APPDATA:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming",ChocolateyInstall:"C:\\ProgramData\\chocolatey",ChocolateyLastPathUpdate:"133739169618057786",COLOR:"1",CommonProgramFiles:"C:\\Program Files\\Common Files","CommonProgramFiles(x86)":"C:\\Program Files (x86)\\Common Files",CommonProgramW6432:"C:\\Program Files\\Common Files",COMPUTERNAME:"IBT-WS-062679",ComSpec:"C:\\WINDOWS\\system32\\cmd.exe",DriverData:"C:\\Windows\\System32\\Drivers\\DriverData",EDITOR:"C:\\WINDOWS\\notepad.exe",EFC_9708:"1",FPS_BROWSER_APP_PROFILE_STRING:"Internet Explorer",FPS_BROWSER_USER_PROFILE_STRING:"Default",GoLand:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\GoLand 2023.2.5\\bin;",HOME:"C:\\Users\\mdorsi.tier2.admin",HOMEDRIVE:"C:",HOMEPATH:"\\Users\\mdorsi.tier2.admin",IDEA_INITIAL_DIRECTORY:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\WebStorm 2023.3\\bin",IGCCSVC_DB:"AQAAANCMnd8BFdERjHoAwE/Cl+sBAAAA7DqY1R3HX0aTSSlswK0VlgQAAAACAAAAAAAQZgAAAAEAACAAAABm65ppy4VnMFDUW4UsfN5HPI3yz9rnIpdfVGhrA4zgigAAAAAOgAAAAAIAACAAAABJpvp9a80y9IV5hP6fnCb1uKjNyrXZjdLmSwVxaoJylWAAAADYv8hOqBVUtjT1Cqsh1Xczhe4/q8hfUQ6SA5kSaemR37Yl+0aOG1FimG6uDSlGjhQDyeDwToU/XF4GyH7pVWO2rOVlfzMJbXLy8LJpGAn+JxZN3K0KK3+xDbw+vPjsczBAAAAA2Pth2w7+5O2/1E0Pt9N37mzbN3Q7/+oMWl+T3/m8hiS7sPgeMlEvoaBrgLXIlEi1j3+1o3rII1AJ3+7b3dSClA==",INIT_CWD:"C:\\Users\\mdorsi.tier2.admin\\charlotemichelpage","IntelliJ IDEA":"C:\\Program Files\\JetBrains\\IntelliJ IDEA 2024.1.4\\bin;",JAVA_HOME:"C:\\java\\jdk-17.0.10",LOCALAPPDATA:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local",LOGONSERVER:"\\\\AWW-W-ACADDC01",NODE:"C:\\Program Files\\nodejs\\node.exe",NODE_EXE:"C:\\Program Files\\nodejs\\\\node.exe",NPM_CLI_JS:"C:\\Program Files\\nodejs\\\\node_modules\\npm\\bin\\npm-cli.js",npm_command:"run-script",npm_config_cache:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\npm-cache",npm_config_globalconfig:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm\\etc\\npmrc",npm_config_global_prefix:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm",npm_config_init_module:"C:\\Users\\mdorsi.tier2.admin\\.npm-init.js",npm_config_local_prefix:"C:\\Users\\mdorsi.tier2.admin\\charlotemichelpage",npm_config_node_gyp:"C:\\Program Files\\nodejs\\node_modules\\npm\\node_modules\\node-gyp\\bin\\node-gyp.js",npm_config_noproxy:"",npm_config_npm_version:"10.5.0",npm_config_prefix:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm",npm_config_userconfig:"C:\\Users\\mdorsi.tier2.admin\\.npmrc",npm_config_user_agent:"npm/10.5.0 node/v20.12.2 win32 x64 workspaces/false",npm_execpath:"C:\\Program Files\\nodejs\\node_modules\\npm\\bin\\npm-cli.js",npm_lifecycle_event:"build",npm_lifecycle_script:"webpack --mode production",npm_node_execpath:"C:\\Program Files\\nodejs\\node.exe",npm_package_json:"C:\\Users\\mdorsi.tier2.admin\\charlotemichelpage\\package.json",npm_package_name:"charloterio",npm_package_version:"1.0.0",NPM_PREFIX_NPM_CLI_JS:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm\\node_modules\\npm\\bin\\npm-cli.js",NUMBER_OF_PROCESSORS:"8",OneDrive:"C:\\Users\\mdorsi.tier2.admin\\OneDrive - Corporativo",OneDriveCommercial:"C:\\Users\\mdorsi.tier2.admin\\OneDrive - Corporativo",OneDriveConsumer:"C:\\Users\\mdorsi.tier2.admin\\OneDrive",OS:"Windows_NT",Path:"C:\\Users\\mdorsi.tier2.admin\\charlotemichelpage\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\node_modules\\.bin;C:\\Users\\node_modules\\.bin;C:\\node_modules\\.bin;C:\\Program Files\\nodejs\\node_modules\\npm\\node_modules\\@npmcli\\run-script\\lib\\node-gyp-bin;C:\\Users\\mdorsi.tier2.admin\\charlotemichelpage\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\node_modules\\.bin;C:\\Users\\node_modules\\.bin;C:\\node_modules\\.bin;C:\\Program Files\\nodejs\\node_modules\\npm\\node_modules\\@npmcli\\run-script\\lib\\node-gyp-bin;C:\\Program Files (x86)\\Common Files\\Oracle\\Java\\javapath;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\WINDOWS\\System32\\OpenSSH\\;C:\\Program Files\\dotnet\\;C:\\Program Files (x86)\\Windows Kits\\10\\Windows Performance Toolkit\\;C:\\Program Files\\nodejs\\;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin;C:\\Program Files\\PostgreSQL\\16\\bin;C:\\Program Files\\vtex\\client\\bin;C:\\Program Files\\Git\\cmd;C:\\Users\\mdorsi.tier2.admin\\.fly\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm\\node_modules\\yarn;C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm\\node_modules\\yarn\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Launcher\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python311\\Scripts\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python311\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Microsoft\\WindowsApps;C:\\Program Files\\JetBrains\\IntelliJ IDEA 2024.1.4\\bin;;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python312\\Scripts;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Git\\cmd;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\PyCharm 2023.2.5\\bin;;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\GoLand 2023.2.5\\bin;;C:\\go;C:\\go\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\WebStorm 2023.3\\bin;;C:\\java\\jdk-17.0.10\\bin;C:\\java\\jdk-17.0.10\\lib;C:\\java\\jdk-17.0.10;C:\\java\\jdk-17.0.10\\bin;C:\\Program Files (x86)\\Common Files\\Oracle\\Java\\javapath;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\WINDOWS\\System32\\OpenSSH\\;C:\\Program Files\\dotnet\\;C:\\Program Files (x86)\\Windows Kits\\10\\Windows Performance Toolkit\\;C:\\Program Files\\nodejs\\;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin;C:\\Program Files\\PostgreSQL\\16\\bin;C:\\Program Files\\vtex\\client\\bin;C:\\Program Files\\Git\\cmd;C:\\Program Files\\Docker\\Docker\\resources\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Launcher\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python311\\Scripts\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python311\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Microsoft\\WindowsApps;C:\\Program Files\\JetBrains\\IntelliJ IDEA 2024.1.4\\bin;;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python312\\Scripts;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Git\\cmd;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\PyCharm 2023.2.5\\bin;;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\GoLand 2023.2.5\\bin;;C:\\go;C:\\go\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\WebStorm 2023.3\\bin;;C:\\java\\jdk-17.0.10\\bin;C:\\java\\jdk-17.0.10\\lib;C:\\java\\jdk-17.0.10;C:\\java\\jdk-17.0.10\\bin;C:\\Program Files (x86)\\Common Files\\Oracle\\Java\\javapath;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\WINDOWS\\System32\\OpenSSH\\;C:\\Program Files\\dotnet\\;C:\\Program Files (x86)\\Windows Kits\\10\\Windows Performance Toolkit\\;C:\\Program Files\\nodejs\\;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin;C:\\Program Files\\PostgreSQL\\16\\bin;C:\\Program Files\\vtex\\client\\bin;C:\\Program Files\\Git\\cmd;C:\\Program Files\\Docker\\Docker\\resources\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin;C:\\Users\\mdorsi.tier2.admin\\.cargo\\;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin\\rustup.exe;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\pessoal\\Aplicativos\\PdftoImage\\dependences\\poppler-23.08.0;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\pessoal\\Aplicativos\\PdftoImage\\dependences\\poppler-23.08.0\\Library\\bin;C:\\Users\\mdorsi.tier2.admin\\apache-maven-3.9.9;C:\\Users\\mdorsi.tier2.admin\\apache-maven-3.9.9\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Microsoft VS Code\\bin;;C:\\Program Files\\JetBrains\\PhpStorm 2024.3.1\\bin;;C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin;C:\\Users\\mdorsi.tier2.admin\\.cargo\\;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin\\rustup.exe;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\pessoal\\Aplicativos\\PdftoImage\\dependences\\poppler-23.08.0;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\pessoal\\Aplicativos\\PdftoImage\\dependences\\poppler-23.08.0\\Library\\bin;C:\\Users\\mdorsi.tier2.admin\\apache-maven-3.9.9;C:\\Users\\mdorsi.tier2.admin\\apache-maven-3.9.9\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Microsoft VS Code\\bin;;C:\\Program Files\\JetBrains\\PhpStorm 2024.3.1\\bin;;C:\\Users\\mdorsi.tier2.admin\\.fly\\bin;C:\\Users\\mdorsi.tier2.admin\\CharloteRio\\node_modules\\.bin",PATHEXT:".COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC;.CPL",PhpStorm:"C:\\Program Files\\JetBrains\\PhpStorm 2024.3.1\\bin;",PLMVIS_82_LIBPATH:"C:\\Program Files (x86)\\SAP\\FrontEnd\\SAPgui\\Program",PROCESSOR_ARCHITECTURE:"AMD64",PROCESSOR_IDENTIFIER:"Intel64 Family 6 Model 140 Stepping 1, GenuineIntel",PROCESSOR_LEVEL:"6",PROCESSOR_REVISION:"8c01",ProgramData:"C:\\ProgramData",ProgramFiles:"C:\\Program Files","ProgramFiles(x86)":"C:\\Program Files (x86)",ProgramW6432:"C:\\Program Files",PROMPT:"$P$G",PSExecutionPolicyPreference:"Bypass",PSModulePath:"C:\\Users\\mdorsi.tier2.admin\\OneDrive\\Documentos\\WindowsPowerShell\\Modules;C:\\Program Files\\WindowsPowerShell\\Modules;C:\\WINDOWS\\system32\\WindowsPowerShell\\v1.0\\Modules",PT8HOME:"C:\\Program Files\\Cisco Packet Tracer 8.2.2",PUBLIC:"C:\\Users\\Public",PyCharm:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\PyCharm 2023.2.5\\bin;",SESSIONNAME:"Console",SystemDrive:"C:",SystemRoot:"C:\\WINDOWS",TEMP:"C:\\Users\\MDORSI~1.ADM\\AppData\\Local\\Temp",TERMINAL_EMULATOR:"JetBrains-JediTerm",TERM_SESSION_ID:"f1913f5b-8352-4ffb-9a3e-e115e4486275",TMP:"C:\\Users\\MDORSI~1.ADM\\AppData\\Local\\Temp",USERDNSDOMAIN:"EDUC.ACAD",USERDOMAIN:"EDUCACAD",USERDOMAIN_ROAMINGPROFILE:"EDUCACAD",USERNAME:"mdorsi.tier2.admin",USERPROFILE:"C:\\Users\\mdorsi.tier2.admin",WebStorm:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\WebStorm 2023.3\\bin;",windir:"C:\\WINDOWS",ZES_ENABLE_SYSMAN:"1"}.SC_DISABLE_SPEEDY),Dn=(new Set,Object.freeze([])),In=Object.freeze({});var xn=new Set(["a","abbr","address","area","article","aside","audio","b","base","bdi","bdo","big","blockquote","body","br","button","canvas","caption","cite","code","col","colgroup","data","datalist","dd","del","details","dfn","dialog","div","dl","dt","em","embed","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","header","hgroup","hr","html","i","iframe","img","input","ins","kbd","keygen","label","legend","li","link","main","map","mark","menu","menuitem","meta","meter","nav","noscript","object","ol","optgroup","option","output","p","param","picture","pre","progress","q","rp","rt","ruby","s","samp","script","section","select","small","source","span","strong","style","sub","summary","sup","table","tbody","td","textarea","tfoot","th","thead","time","tr","track","u","ul","use","var","video","wbr","circle","clipPath","defs","ellipse","foreignObject","g","image","line","linearGradient","marker","mask","path","pattern","polygon","polyline","radialGradient","rect","stop","svg","text","tspan"]),On=/[!"#$%&'()*+,./:;<=>?@[\\\]^`{|}~-]+/g,kn=/(^-|-$)/g;function Ln(e){return e.replace(On,"-").replace(kn,"")}var Un=/(a)(d)/gi,Tn=function(e){return String.fromCharCode(e+(e>25?39:97))};function Rn(e){var n,t="";for(n=Math.abs(e);n>52;n=n/52|0)t=Tn(n%52)+t;return(Tn(n%52)+t).replace(Un,"$1-$2")}var Fn,Mn=function(e,n){for(var t=n.length;t;)e=33*e^n.charCodeAt(--t);return e},Nn=function(e){return Mn(5381,e)};function Wn(e){return"string"==typeof e&&!0}var jn="function"==typeof Symbol&&Symbol.for,Bn=jn?Symbol.for("react.memo"):60115,zn=jn?Symbol.for("react.forward_ref"):60112,Vn={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},Hn={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},Jn={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},Gn=((Fn={})[zn]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},Fn[Bn]=Jn,Fn);function $n(e){return("type"in(n=e)&&n.type.$$typeof)===Bn?Jn:"$$typeof"in e?Gn[e.$$typeof]:Vn;var n}var Yn=Object.defineProperty,qn=Object.getOwnPropertyNames,Zn=Object.getOwnPropertySymbols,Qn=Object.getOwnPropertyDescriptor,Kn=Object.getPrototypeOf,Xn=Object.prototype;function et(e,n,t){if("string"!=typeof n){if(Xn){var r=Kn(n);r&&r!==Xn&&et(e,r,t)}var i=qn(n);Zn&&(i=i.concat(Zn(n)));for(var a=$n(e),s=$n(n),o=0;o<i.length;++o){var l=i[o];if(!(l in Hn||t&&t[l]||s&&l in s||a&&l in a)){var d=Qn(n,l);try{Yn(e,l,d)}catch(e){}}}}return e}function nt(e){return"function"==typeof e}function tt(e){return"object"==typeof e&&"styledComponentId"in e}function rt(e,n){return e&&n?"".concat(e," ").concat(n):e||n||""}function it(e,n){if(0===e.length)return"";for(var t=e[0],r=1;r<e.length;r++)t+=n?n+e[r]:e[r];return t}function at(e){return null!==e&&"object"==typeof e&&e.constructor.name===Object.name&&!("props"in e&&e.$$typeof)}function st(e,n,t){if(void 0===t&&(t=!1),!t&&!at(e)&&!Array.isArray(e))return n;if(Array.isArray(n))for(var r=0;r<n.length;r++)e[r]=st(e[r],n[r]);else if(at(n))for(var r in n)e[r]=st(e[r],n[r]);return e}function ot(e,n){Object.defineProperty(e,"toString",{value:n})}function lt(e){for(var n=[],t=1;t<arguments.length;t++)n[t-1]=arguments[t];return new Error("An error occurred. See https://github.com/styled-components/styled-components/blob/main/packages/styled-components/src/utils/errors.md#".concat(e," for more information.").concat(n.length>0?" Args: ".concat(n.join(", ")):""))}var dt=function(){function e(e){this.groupSizes=new Uint32Array(512),this.length=512,this.tag=e}return e.prototype.indexOfGroup=function(e){for(var n=0,t=0;t<e;t++)n+=this.groupSizes[t];return n},e.prototype.insertRules=function(e,n){if(e>=this.groupSizes.length){for(var t=this.groupSizes,r=t.length,i=r;e>=i;)if((i<<=1)<0)throw lt(16,"".concat(e));this.groupSizes=new Uint32Array(i),this.groupSizes.set(t),this.length=i;for(var a=r;a<i;a++)this.groupSizes[a]=0}for(var s=this.indexOfGroup(e+1),o=(a=0,n.length);a<o;a++)this.tag.insertRule(s,n[a])&&(this.groupSizes[e]++,s++)},e.prototype.clearGroup=function(e){if(e<this.length){var n=this.groupSizes[e],t=this.indexOfGroup(e),r=t+n;this.groupSizes[e]=0;for(var i=t;i<r;i++)this.tag.deleteRule(t)}},e.prototype.getGroup=function(e){var n="";if(e>=this.length||0===this.groupSizes[e])return n;for(var t=this.groupSizes[e],r=this.indexOfGroup(e),i=r+t,a=r;a<i;a++)n+="".concat(this.tag.getRule(a)).concat("/*!sc*/\n");return n},e}(),ct=new Map,ut=new Map,pt=1,mt=function(e){if(ct.has(e))return ct.get(e);for(;ut.has(pt);)pt++;var n=pt++;return ct.set(e,n),ut.set(n,e),n},ht=function(e,n){pt=n+1,ct.set(e,n),ut.set(n,e)},ft="style[".concat(Pn,"][").concat("data-styled-version",'="').concat("6.1.1",'"]'),gt=new RegExp("^".concat(Pn,'\\.g(\\d+)\\[id="([\\w\\d-]+)"\\].*?"([^"]*)')),Ct=function(e,n,t){for(var r,i=t.split(","),a=0,s=i.length;a<s;a++)(r=i[a])&&e.registerName(n,r)},At=function(e,n){for(var t,r=(null!==(t=n.textContent)&&void 0!==t?t:"").split("/*!sc*/\n"),i=[],a=0,s=r.length;a<s;a++){var o=r[a].trim();if(o){var l=o.match(gt);if(l){var d=0|parseInt(l[1],10),c=l[2];0!==d&&(ht(c,d),Ct(e,c,l[3]),e.getTag().insertRules(d,i)),i.length=0}else i.push(o)}}};function vt(){return i.nc}var bt=function(e){var n=document.head,t=e||n,r=document.createElement("style"),i=function(e){var n=Array.from(e.querySelectorAll("style[".concat(Pn,"]")));return n[n.length-1]}(t),a=void 0!==i?i.nextSibling:null;r.setAttribute(Pn,"active"),r.setAttribute("data-styled-version","6.1.1");var s=vt();return s&&r.setAttribute("nonce",s),t.insertBefore(r,a),r},yt=function(){function e(e){this.element=bt(e),this.element.appendChild(document.createTextNode("")),this.sheet=function(e){if(e.sheet)return e.sheet;for(var n=document.styleSheets,t=0,r=n.length;t<r;t++){var i=n[t];if(i.ownerNode===e)return i}throw lt(17)}(this.element),this.length=0}return e.prototype.insertRule=function(e,n){try{return this.sheet.insertRule(n,e),this.length++,!0}catch(e){return!1}},e.prototype.deleteRule=function(e){this.sheet.deleteRule(e),this.length--},e.prototype.getRule=function(e){var n=this.sheet.cssRules[e];return n&&n.cssText?n.cssText:""},e}(),wt=function(){function e(e){this.element=bt(e),this.nodes=this.element.childNodes,this.length=0}return e.prototype.insertRule=function(e,n){if(e<=this.length&&e>=0){var t=document.createTextNode(n);return this.element.insertBefore(t,this.nodes[e]||null),this.length++,!0}return!1},e.prototype.deleteRule=function(e){this.element.removeChild(this.nodes[e]),this.length--},e.prototype.getRule=function(e){return e<this.length?this.nodes[e].textContent:""},e}(),St=function(){function e(e){this.rules=[],this.length=0}return e.prototype.insertRule=function(e,n){return e<=this.length&&(this.rules.splice(e,0,n),this.length++,!0)},e.prototype.deleteRule=function(e){this.rules.splice(e,1),this.length--},e.prototype.getRule=function(e){return e<this.length?this.rules[e]:""},e}(),Pt=En,Et={isServer:!En,useCSSOMInjection:!_n},_t=function(){function e(e,n,t){void 0===e&&(e=In),void 0===n&&(n={});var r=this;this.options=ve(ve({},Et),e),this.gs=n,this.names=new Map(t),this.server=!!e.isServer,!this.server&&En&&Pt&&(Pt=!1,function(e){for(var n=document.querySelectorAll(ft),t=0,r=n.length;t<r;t++){var i=n[t];i&&"active"!==i.getAttribute(Pn)&&(At(e,i),i.parentNode&&i.parentNode.removeChild(i))}}(this)),ot(this,(function(){return function(e){for(var n=e.getTag(),t=n.length,r="",i=function(t){var i=function(e){return ut.get(e)}(t);if(void 0===i)return"continue";var a=e.names.get(i),s=n.getGroup(t);if(void 0===a||0===s.length)return"continue";var o="".concat(Pn,".g").concat(t,'[id="').concat(i,'"]'),l="";void 0!==a&&a.forEach((function(e){e.length>0&&(l+="".concat(e,","))})),r+="".concat(s).concat(o,'{content:"').concat(l,'"}').concat("/*!sc*/\n")},a=0;a<t;a++)i(a);return r}(r)}))}return e.registerId=function(e){return mt(e)},e.prototype.reconstructWithOptions=function(n,t){return void 0===t&&(t=!0),new e(ve(ve({},this.options),n),this.gs,t&&this.names||void 0)},e.prototype.allocateGSInstance=function(e){return this.gs[e]=(this.gs[e]||0)+1},e.prototype.getTag=function(){return this.tag||(this.tag=(e=function(e){var n=e.useCSSOMInjection,t=e.target;return e.isServer?new St(t):n?new yt(t):new wt(t)}(this.options),new dt(e)));var e},e.prototype.hasNameForId=function(e,n){return this.names.has(e)&&this.names.get(e).has(n)},e.prototype.registerName=function(e,n){if(mt(e),this.names.has(e))this.names.get(e).add(n);else{var t=new Set;t.add(n),this.names.set(e,t)}},e.prototype.insertRules=function(e,n,t){this.registerName(e,n),this.getTag().insertRules(mt(e),t)},e.prototype.clearNames=function(e){this.names.has(e)&&this.names.get(e).clear()},e.prototype.clearRules=function(e){this.getTag().clearGroup(mt(e)),this.clearNames(e)},e.prototype.clearTag=function(){this.tag=void 0},e}(),Dt=/&/g,It=/^\s*\/\/.*$/gm;function xt(e,n){return e.map((function(e){return"rule"===e.type&&(e.value="".concat(n," ").concat(e.value),e.value=e.value.replaceAll(",",",".concat(n," ")),e.props=e.props.map((function(e){return"".concat(n," ").concat(e)}))),Array.isArray(e.children)&&"@keyframes"!==e.type&&(e.children=xt(e.children,n)),e}))}function Ot(e){var n,t,r,i=void 0===e?In:e,a=i.options,s=void 0===a?In:a,o=i.plugins,l=void 0===o?Dn:o,d=function(e,r,i){return i===t||i.startsWith(t)&&i.endsWith(t)&&i.replaceAll(t,"").length>0?".".concat(n):e},c=l.slice();c.push((function(e){e.type===Ie&&e.value.includes("&")&&(e.props[0]=e.props[0].replace(Dt,t).replace(r,d))})),s.prefix&&c.push(Cn),c.push(fn);var u=function(e,i,a,o){void 0===i&&(i=""),void 0===a&&(a=""),void 0===o&&(o="&"),n=o,t=i,r=new RegExp("\\".concat(t,"\\b"),"g");var l=e.replace(It,""),d=An(a||i?"".concat(a," ").concat(i," { ").concat(l," }"):l);s.namespace&&(d=xt(d,s.namespace));var u,p,m,h=[];return hn(d,(u=c.concat((m=function(e){return h.push(e)},function(e){e.root||(e=e.return)&&m(e)})),p=Ve(u),function(e,n,t,r){for(var i="",a=0;a<p;a++)i+=u[a](e,n,t,r)||"";return i})),h};return u.hash=l.length?l.reduce((function(e,n){return n.name||lt(15),Mn(e,n.name)}),5381).toString():"",u}var kt=new _t,Lt=Ot(),Ut=n.createContext({shouldForwardProp:void 0,styleSheet:kt,stylis:Lt}),Tt=(Ut.Consumer,n.createContext(void 0));function Rt(){return(0,n.useContext)(Ut)}function Ft(e){var t=(0,n.useState)(e.stylisPlugins),r=t[0],i=t[1],a=Rt().styleSheet,s=(0,n.useMemo)((function(){var n=a;return e.sheet?n=e.sheet:e.target&&(n=n.reconstructWithOptions({target:e.target},!1)),e.disableCSSOMInjection&&(n=n.reconstructWithOptions({useCSSOMInjection:!1})),n}),[e.disableCSSOMInjection,e.sheet,e.target,a]),o=(0,n.useMemo)((function(){return Ot({options:{namespace:e.namespace,prefix:e.enableVendorPrefixes},plugins:r})}),[e.enableVendorPrefixes,e.namespace,r]);(0,n.useEffect)((function(){Se()(r,e.stylisPlugins)||i(e.stylisPlugins)}),[e.stylisPlugins]);var l=(0,n.useMemo)((function(){return{shouldForwardProp:e.shouldForwardProp,styleSheet:s,stylis:o}}),[e.shouldForwardProp,s,o]);return n.createElement(Ut.Provider,{value:l},n.createElement(Tt.Provider,{value:o},e.children))}var Mt=function(){function e(e,n){var t=this;this.inject=function(e,n){void 0===n&&(n=Lt);var r=t.name+n.hash;e.hasNameForId(t.id,r)||e.insertRules(t.id,r,n(t.rules,r,"@keyframes"))},this.name=e,this.id="sc-keyframes-".concat(e),this.rules=n,ot(this,(function(){throw lt(12,String(t.name))}))}return e.prototype.getName=function(e){return void 0===e&&(e=Lt),this.name+e.hash},e}(),Nt=function(e){return e>="A"&&e<="Z"};function Wt(e){for(var n="",t=0;t<e.length;t++){var r=e[t];if(1===t&&"-"===r&&"-"===e[0])return e;Nt(r)?n+="-"+r.toLowerCase():n+=r}return n.startsWith("ms-")?"-"+n:n}var jt=function(e){return null==e||!1===e||""===e},Bt=function(e){var n,t,r=[];for(var i in e){var a=e[i];e.hasOwnProperty(i)&&!jt(a)&&(Array.isArray(a)&&a.isCss||nt(a)?r.push("".concat(Wt(i),":"),a,";"):at(a)?r.push.apply(r,ye(ye(["".concat(i," {")],Bt(a),!1),["}"],!1)):r.push("".concat(Wt(i),": ").concat((n=i,null==(t=a)||"boolean"==typeof t||""===t?"":"number"!=typeof t||0===t||n in Sn||n.startsWith("--")?String(t).trim():"".concat(t,"px")),";")))}return r};function zt(e,n,t,r){return jt(e)?[]:tt(e)?[".".concat(e.styledComponentId)]:nt(e)?!nt(i=e)||i.prototype&&i.prototype.isReactComponent||!n?[e]:zt(e(n),n,t,r):e instanceof Mt?t?(e.inject(t,r),[e.getName(r)]):[e]:at(e)?Bt(e):Array.isArray(e)?Array.prototype.concat.apply(Dn,e.map((function(e){return zt(e,n,t,r)}))):[e.toString()];var i}function Vt(e){for(var n=0;n<e.length;n+=1){var t=e[n];if(nt(t)&&!tt(t))return!1}return!0}var Ht=Nn("6.1.1"),Jt=function(){function e(e,n,t){this.rules=e,this.staticRulesId="",this.isStatic=(void 0===t||t.isStatic)&&Vt(e),this.componentId=n,this.baseHash=Mn(Ht,n),this.baseStyle=t,_t.registerId(n)}return e.prototype.generateAndInjectStyles=function(e,n,t){var r=this.baseStyle?this.baseStyle.generateAndInjectStyles(e,n,t):"";if(this.isStatic&&!t.hash)if(this.staticRulesId&&n.hasNameForId(this.componentId,this.staticRulesId))r=rt(r,this.staticRulesId);else{var i=it(zt(this.rules,e,n,t)),a=Rn(Mn(this.baseHash,i)>>>0);if(!n.hasNameForId(this.componentId,a)){var s=t(i,".".concat(a),void 0,this.componentId);n.insertRules(this.componentId,a,s)}r=rt(r,a),this.staticRulesId=a}else{for(var o=Mn(this.baseHash,t.hash),l="",d=0;d<this.rules.length;d++){var c=this.rules[d];if("string"==typeof c)l+=c;else if(c){var u=it(zt(c,e,n,t));o=Mn(o,u+d),l+=u}}if(l){var p=Rn(o>>>0);n.hasNameForId(this.componentId,p)||n.insertRules(this.componentId,p,t(l,".".concat(p),void 0,this.componentId)),r=rt(r,p)}}return r},e}(),Gt=n.createContext(void 0);Gt.Consumer;var $t={};function Yt(e,t,r){var i=tt(e),a=e,s=!Wn(e),o=t.attrs,l=void 0===o?Dn:o,d=t.componentId,c=void 0===d?function(e,n){var t="string"!=typeof e?"sc":Ln(e);$t[t]=($t[t]||0)+1;var r="".concat(t,"-").concat(function(e){return Rn(Nn(e)>>>0)}("6.1.1"+t+$t[t]));return n?"".concat(n,"-").concat(r):r}(t.displayName,t.parentComponentId):d,u=t.displayName,p=void 0===u?function(e){return Wn(e)?"styled.".concat(e):"Styled(".concat(function(e){return e.displayName||e.name||"Component"}(e),")")}(e):u,m=t.displayName&&t.componentId?"".concat(Ln(t.displayName),"-").concat(t.componentId):t.componentId||c,h=i&&a.attrs?a.attrs.concat(l).filter(Boolean):l,f=t.shouldForwardProp;if(i&&a.shouldForwardProp){var g=a.shouldForwardProp;if(t.shouldForwardProp){var C=t.shouldForwardProp;f=function(e,n){return g(e,n)&&C(e,n)}}else f=g}var A=new Jt(r,m,i?a.componentStyle:void 0);function v(e,t){return function(e,t,r){var i=e.attrs,a=e.componentStyle,s=e.defaultProps,o=e.foldedComponentIds,l=e.styledComponentId,d=e.target,c=n.useContext(Gt),u=Rt(),p=e.shouldForwardProp||u.shouldForwardProp,m=function(e,n,t){for(var r,i=ve(ve({},n),{className:void 0,theme:t}),a=0;a<e.length;a+=1){var s=nt(r=e[a])?r(i):r;for(var o in s)i[o]="className"===o?rt(i[o],s[o]):"style"===o?ve(ve({},i[o]),s[o]):s[o]}return n.className&&(i.className=rt(i.className,n.className)),i}(i,t,function(e,n,t){return void 0===t&&(t=In),e.theme!==t.theme&&e.theme||n||t.theme}(t,c,s)||In),h=m.as||d,f={};for(var g in m)void 0===m[g]||"$"===g[0]||"as"===g||"theme"===g||("forwardedAs"===g?f.as=m.forwardedAs:p&&!p(g,h)||(f[g]=m[g]));var C=function(e,n){var t=Rt();return e.generateAndInjectStyles(n,t.styleSheet,t.stylis)}(a,m),A=rt(o,l);return C&&(A+=" "+C),m.className&&(A+=" "+m.className),f[Wn(h)&&!xn.has(h)?"class":"className"]=A,f.ref=r,(0,n.createElement)(h,f)}(b,e,t)}v.displayName=p;var b=n.forwardRef(v);return b.attrs=h,b.componentStyle=A,b.displayName=p,b.shouldForwardProp=f,b.foldedComponentIds=i?rt(a.foldedComponentIds,a.styledComponentId):"",b.styledComponentId=m,b.target=i?a.target:e,Object.defineProperty(b,"defaultProps",{get:function(){return this._foldedDefaultProps},set:function(e){this._foldedDefaultProps=i?function(e){for(var n=[],t=1;t<arguments.length;t++)n[t-1]=arguments[t];for(var r=0,i=n;r<i.length;r++)st(e,i[r],!0);return e}({},a.defaultProps,e):e}}),ot(b,(function(){return".".concat(b.styledComponentId)})),s&&et(b,e,{attrs:!0,componentStyle:!0,displayName:!0,foldedComponentIds:!0,shouldForwardProp:!0,styledComponentId:!0,target:!0}),b}function qt(e,n){for(var t=[e[0]],r=0,i=n.length;r<i;r+=1)t.push(n[r],e[r+1]);return t}new Set;var Zt=function(e){return Object.assign(e,{isCss:!0})};function Qt(e){for(var n=[],t=1;t<arguments.length;t++)n[t-1]=arguments[t];if(nt(e)||at(e))return Zt(zt(qt(Dn,ye([e],n,!0))));var r=e;return 0===n.length&&1===r.length&&"string"==typeof r[0]?zt(r):Zt(zt(qt(r,n)))}function Kt(e,n,t){if(void 0===t&&(t=In),!n)throw lt(1,n);var r=function(r){for(var i=[],a=1;a<arguments.length;a++)i[a-1]=arguments[a];return e(n,t,Qt.apply(void 0,ye([r],i,!1)))};return r.attrs=function(r){return Kt(e,n,ve(ve({},t),{attrs:Array.prototype.concat(t.attrs,r).filter(Boolean)}))},r.withConfig=function(r){return Kt(e,n,ve(ve({},t),r))},r}var Xt,er,nr=function(e){return Kt(Yt,e)},tr=nr;function rr(e,n){return n||(n=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(n)}}))}xn.forEach((function(e){tr[e]=nr(e)})),function(){function e(e,n){this.rules=e,this.componentId=n,this.isStatic=Vt(e),_t.registerId(this.componentId+1)}e.prototype.createStyles=function(e,n,t,r){var i=r(it(zt(this.rules,n,t,r)),""),a=this.componentId+e;t.insertRules(a,a,i)},e.prototype.removeStyles=function(e,n){n.clearRules(this.componentId+e)},e.prototype.renderStyles=function(e,n,t,r){e>2&&_t.registerId(this.componentId+e),this.removeStyles(e,t),this.createStyles(e,n,t,r)}}(),function(){function e(){var e=this;this._emitSheetCSS=function(){var n=e.instance.toString(),t=vt(),r=it([t&&'nonce="'.concat(t,'"'),"".concat(Pn,'="true"'),"".concat("data-styled-version",'="').concat("6.1.1",'"')].filter(Boolean)," ");return"<style ".concat(r,">").concat(n,"</style>")},this.getStyleTags=function(){if(e.sealed)throw lt(2);return e._emitSheetCSS()},this.getStyleElement=function(){var t;if(e.sealed)throw lt(2);var r=((t={})[Pn]="",t["data-styled-version"]="6.1.1",t.dangerouslySetInnerHTML={__html:e.instance.toString()},t),i=vt();return i&&(r.nonce=i),[n.createElement("style",ve({},r,{key:"sc-0-0"}))]},this.seal=function(){e.sealed=!0},this.instance=new _t({isServer:!0}),this.sealed=!1}e.prototype.collectStyles=function(e){if(this.sealed)throw lt(2);return n.createElement(Ft,{sheet:this.instance},e)},e.prototype.interleaveWithNodeStream=function(e){throw lt(3)}}(),"__sc-".concat(Pn,"__");var ir,ar,sr,or=tr.header(Xt||(Xt=rr(["\n    padding: 15px 200px;\n    max-width: 1440px;\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    margin: auto;\n    max-height: 70px;\n    \n    @media (max-width: 768px) {\n        padding: 25px 20px;\n    }\n"]))),lr=tr.div(er||(er=rr(["\n    background-color: white;\n"]))),dr=i(893),cr=function(){return(0,dr.jsxs)("svg",{xmlns:"http://www.w3.org/2000/svg",width:"165",height:"43",viewBox:"0 0 165 43",fill:"none",children:[(0,dr.jsxs)("g",{clipPath:"url(#clip0_75_148)",children:[(0,dr.jsx)("path",{d:"M0.962726 9.53889C1.56003 8.38736 2.47803 7.43271 3.6062 6.78986C4.9232 6.09503 6.40091 5.76037 7.88935 5.81986C9.37779 5.87935 10.824 6.33085 12.0811 7.12856C13.3199 8.05055 14.1898 9.38236 14.5352 10.8858H11.1263C10.881 10.169 10.4141 9.5484 9.79271 9.11353C9.10927 8.66805 8.30422 8.44514 7.48854 8.4755C6.90334 8.45196 6.32057 8.56338 5.78549 8.80108C5.2504 9.03877 4.77739 9.39636 4.40317 9.8461C3.57234 10.9463 3.16365 12.3071 3.2511 13.6821C3.1675 15.0616 3.57561 16.426 4.40317 17.5339C4.7758 17.986 5.24833 18.3458 5.78366 18.585C6.31898 18.8241 6.90253 18.9362 7.48854 18.9124C8.27843 18.9795 9.06783 18.7779 9.72832 18.3402C10.3888 17.9026 10.8815 17.2547 11.1263 16.5021H14.5352C14.1449 17.981 13.2664 19.2853 12.0416 20.2042C10.7171 21.1502 9.11618 21.6321 7.48854 21.5748C6.12945 21.5995 4.78867 21.2594 3.6062 20.5902C2.47691 19.9381 1.55928 18.9757 0.962726 17.8175C0.329486 16.5292 0.000244141 15.1132 0.000244141 13.6782C0.000244141 12.2432 0.329486 10.8272 0.962726 9.53889Z",fill:"#FF0000"}),(0,dr.jsx)("path",{d:"M29.4175 6.56147C30.3463 7.06969 31.1019 7.84316 31.5875 8.78276C32.139 9.88138 32.4101 11.099 32.3766 12.3274V21.3228H29.2202V12.7921C29.2956 11.6494 28.9284 10.5215 28.1944 9.64134C27.4267 8.9417 26.4247 8.5538 25.3852 8.5538C24.3457 8.5538 23.3437 8.9417 22.576 9.64134C21.8298 10.5154 21.4559 11.6463 21.5344 12.7921V21.3228H18.3781V0.842834H21.5344V7.84541C22.0837 7.19156 22.7818 6.67841 23.5703 6.3488C24.4277 5.99279 25.3483 5.81327 26.2769 5.82104C27.3699 5.7967 28.4509 6.05158 29.4175 6.56147Z",fill:"#FF0000"}),(0,dr.jsx)("path",{d:"M36.9928 9.55468C37.5898 8.41651 38.4899 7.46491 39.5941 6.80474C40.6982 6.14457 41.9634 5.80144 43.2504 5.81315C44.3448 5.78722 45.4289 6.03069 46.4067 6.52207C47.2427 6.94315 47.9755 7.54286 48.5531 8.2786V6.09671H51.7489V21.3543H48.5452V19.0857C47.9622 19.8418 47.2148 20.4559 46.3594 20.8816C45.2966 21.4012 44.1205 21.6474 42.9381 21.5979C41.7557 21.5484 40.6045 21.2047 39.589 20.5981C38.4854 19.9048 37.5887 18.9281 36.9928 17.7703C36.3399 16.4992 36.0119 15.0867 36.038 13.6585C36.0031 12.232 36.3317 10.8199 36.9928 9.55468ZM47.8982 10.941C47.5054 10.204 46.9154 9.59045 46.1937 9.1687C45.5021 8.76535 44.7142 8.55582 43.9132 8.56218C43.117 8.55772 42.3335 8.76139 41.6406 9.15295C40.9216 9.56762 40.3317 10.1729 39.9362 10.9016C39.4829 11.7373 39.2571 12.677 39.2812 13.627C39.261 14.5892 39.4864 15.5406 39.9362 16.3918C40.3308 17.1449 40.9261 17.7745 41.6564 18.2114C42.3437 18.616 43.1271 18.8294 43.9251 18.8294C44.723 18.8294 45.5064 18.616 46.1937 18.2114C46.9156 17.7865 47.5056 17.1703 47.8982 16.4312C48.3452 15.5821 48.5679 14.6332 48.5452 13.6743C48.5695 12.7227 48.3466 11.7811 47.8982 10.941Z",fill:"#FF0000"}),(0,dr.jsx)("path",{d:"M61.5969 6.46693C62.4377 6.01657 63.3811 5.79133 64.335 5.81315V9.08206H63.5459C63.0371 9.04548 62.526 9.11018 62.0424 9.27245C61.5588 9.43471 61.1123 9.69129 60.7289 10.0273C60.0897 10.6496 59.7741 11.7445 59.7741 13.2962V21.3227H56.6177V6.09671H59.7741V8.31012C60.2066 7.54479 60.8358 6.90852 61.5969 6.46693Z",fill:"#FF0000"}),(0,dr.jsx)("path",{d:"M71.0975 0.834961V21.3149H67.9412V0.834961H71.0975Z",fill:"#FF0000"}),(0,dr.jsx)("path",{d:"M78.6729 20.5902C77.516 19.9404 76.5646 18.9798 75.9269 17.8176C75.2441 16.5476 74.9016 15.1231 74.9326 13.6822C74.9035 12.2401 75.2574 10.816 75.9584 9.55471C76.6102 8.38628 77.5819 7.42728 78.7597 6.78991C79.9826 6.14826 81.3434 5.81299 82.7249 5.81299C84.1064 5.81299 85.4673 6.14826 86.6901 6.78991C87.8664 7.42938 88.8375 8.38786 89.4914 9.55471C90.1924 10.816 90.5464 12.2401 90.5172 13.6822C90.5453 15.1272 90.1828 16.553 89.4678 17.8097C88.7875 18.9847 87.7929 19.9475 86.5954 20.5902C85.3635 21.2498 83.9847 21.5885 82.5868 21.5748C81.2187 21.5909 79.87 21.2516 78.6729 20.5902ZM84.8752 18.2272C85.6068 17.8185 86.2085 17.2125 86.6112 16.4785C87.0764 15.6129 87.305 14.6403 87.2741 13.6586C87.3055 12.6821 87.0854 11.7138 86.6349 10.8465C86.2471 10.1214 85.6616 9.5206 84.9462 9.11358C84.2506 8.73054 83.468 8.53255 82.6736 8.53858C81.8815 8.53068 81.101 8.72884 80.4089 9.11358C79.7015 9.51806 79.1281 10.1205 78.7597 10.8465C78.3248 11.7186 78.1133 12.6848 78.1442 13.6586C78.0568 15.0419 78.5093 16.4054 79.4068 17.4631C79.8072 17.8981 80.2957 18.2432 80.8399 18.4754C81.384 18.7076 81.9715 18.8217 82.5632 18.8101C83.369 18.8231 84.1648 18.6306 84.8752 18.2508V18.2272Z",fill:"#FF0000"}),(0,dr.jsx)("path",{d:"M98.0215 8.64097V17.1244C98 17.347 98.0247 17.5717 98.0939 17.7845C98.1631 17.9973 98.2755 18.1935 98.4239 18.3611C98.8218 18.6459 99.3095 18.7774 99.797 18.7313H101.738V21.3622H99.2446C98.0682 21.4422 96.9031 21.0891 95.9699 20.3697C95.5636 19.9393 95.2547 19.4268 95.0641 18.8669C94.8735 18.307 94.8056 17.7127 94.8651 17.1244V8.64097H93.0581V6.09672H94.8651V2.30005H98.0215V6.09672H101.738V8.67246L98.0215 8.64097Z",fill:"#FF0000"}),(0,dr.jsx)("path",{d:"M119.256 14.8716H107.578C107.621 15.9832 108.103 17.0325 108.92 17.7898C109.736 18.5471 110.82 18.9508 111.933 18.9124C112.679 18.963 113.423 18.7869 114.067 18.4073C114.711 18.0277 115.224 17.4623 115.54 16.7857H118.956C118.505 18.1689 117.627 19.3739 116.447 20.2279C115.131 21.1582 113.545 21.6314 111.933 21.5748C110.554 21.6005 109.193 21.2607 107.988 20.5902C106.836 19.942 105.892 18.9805 105.266 17.8175C104.592 16.5449 104.255 15.1214 104.287 13.6822C104.256 12.2434 104.584 10.8194 105.242 9.53892C105.85 8.37948 106.786 7.42366 107.933 6.78988C109.142 6.13103 110.501 5.79463 111.878 5.81316C113.225 5.78885 114.554 6.11458 115.737 6.75837C116.849 7.37342 117.763 8.2913 118.372 9.40502C119.024 10.6139 119.35 11.971 119.319 13.3435C119.34 13.8537 119.319 14.3648 119.256 14.8716ZM116.1 12.3273C116.112 11.7982 116.007 11.2729 115.791 10.7893C115.576 10.3058 115.255 9.87598 114.853 9.53103C114.011 8.81844 112.934 8.44242 111.831 8.47553C110.798 8.45355 109.797 8.8254 109.03 9.51529C108.231 10.2467 107.736 11.2498 107.641 12.3273H116.1Z",fill:"#FF0000"}),(0,dr.jsx)("path",{d:"M136.087 6.46692C136.925 6.01447 137.866 5.78906 138.818 5.81315V9.08206H138.029C137.52 9.04547 137.009 9.11017 136.525 9.27244C136.041 9.43471 135.595 9.69129 135.212 10.0273C134.572 10.6495 134.257 11.7445 134.257 13.2962V21.3227H131.1V6.0967H134.257V8.31011C134.69 7.5426 135.322 6.90586 136.087 6.46692Z",fill:"#FF0000"}),(0,dr.jsx)("path",{d:"M142.59 3.46585C142.302 3.18268 142.105 2.82017 142.025 2.42482C141.946 2.02946 141.986 1.61929 142.141 1.24689C142.296 0.874483 142.559 0.556835 142.896 0.334679C143.234 0.112523 143.63 -0.00401559 144.034 1.63446e-05C144.296 -0.00375429 144.557 0.0459739 144.8 0.146194C145.043 0.246414 145.263 0.395014 145.446 0.582899C145.821 0.969349 146.031 1.48629 146.031 2.02436C146.031 2.56243 145.821 3.0794 145.446 3.46585C145.263 3.65373 145.043 3.80233 144.8 3.90255C144.557 4.00277 144.296 4.0525 144.034 4.04873C143.766 4.05496 143.5 4.00647 143.251 3.90623C143.003 3.80599 142.778 3.65613 142.59 3.46585ZM145.588 6.06522V21.3228H142.432V6.09673L145.588 6.06522Z",fill:"#FF0000"}),(0,dr.jsx)("path",{d:"M153.156 20.5902C151.999 19.9404 151.047 18.9798 150.41 17.8175C149.727 16.5476 149.384 15.1231 149.415 13.6822C149.386 12.2401 149.74 10.816 150.441 9.55469C151.093 8.38626 152.065 7.42726 153.242 6.78989C154.46 6.15491 155.814 5.8233 157.188 5.8233C158.562 5.8233 159.915 6.15491 161.133 6.78989C162.311 7.42726 163.283 8.38626 163.935 9.55469C164.636 10.816 164.99 12.2401 164.96 13.6822C164.989 15.1271 164.626 16.553 163.911 17.8097C163.231 18.9847 162.236 19.9475 161.039 20.5902C159.807 21.2498 158.428 21.5885 157.03 21.5748C155.675 21.5841 154.341 21.245 153.156 20.5902ZM159.358 18.2271C160.091 17.8209 160.694 17.2143 161.094 16.4785C161.559 15.6129 161.788 14.6403 161.757 13.6585C161.788 12.682 161.568 11.7138 161.118 10.8465C160.73 10.1214 160.144 9.52058 159.429 9.11356C158.733 8.73052 157.951 8.53252 157.156 8.53856C156.364 8.53066 155.584 8.72882 154.892 9.11356C154.184 9.51803 153.611 10.1205 153.242 10.8465C152.81 11.7193 152.601 12.6855 152.635 13.6585C152.544 15.0424 152.997 16.407 153.897 17.4631C154.296 17.8997 154.785 18.2459 155.329 18.4782C155.874 18.7106 156.462 18.8238 157.054 18.81C157.857 18.8217 158.65 18.6293 159.358 18.2508V18.2271Z",fill:"#FF0000"}),(0,dr.jsx)("path",{d:"M55.497 40.2903C56.3966 39.4974 57.1384 38.7964 57.7223 38.1872C58.3159 37.5705 58.8229 36.8763 59.2295 36.1235C59.6357 35.4013 59.8528 34.5885 59.8608 33.7604C59.8839 33.2511 59.8012 32.7426 59.6179 32.2667C59.4346 31.7909 59.1546 31.3581 58.7955 30.9956C58.2124 30.4132 57.4675 30.019 56.6574 29.864C55.8473 29.709 55.0093 29.8003 54.2518 30.1262C53.4943 30.4521 52.8522 30.9975 52.4088 31.6918C51.9653 32.3861 51.7409 33.1973 51.7646 34.0203H53.6742C53.6632 33.3878 53.8755 32.7715 54.274 32.2795C54.4729 32.0622 54.7176 31.8915 54.9905 31.7799C55.2634 31.6682 55.5576 31.6182 55.8522 31.6336C56.143 31.6038 56.4369 31.6416 56.7107 31.7441C56.9845 31.8466 57.2308 32.011 57.4303 32.2244C57.7857 32.6882 57.9621 33.2641 57.9275 33.847C57.913 34.5641 57.691 35.2617 57.2883 35.8557C56.8404 36.5589 56.3107 37.2066 55.7101 37.7855C55.0631 38.3999 54.1872 39.1876 53.0824 40.1485L51.8357 41.2198V42.6534H60.2553V41.015H54.7316L55.497 40.2903Z",fill:"#FF0000"}),(0,dr.jsx)("path",{d:"M60.2553 42.6692H51.741V41.1647L52.9877 40.0856C54.0846 39.1403 54.9684 38.3448 55.6076 37.7225C56.2061 37.1447 56.7356 36.4997 57.1857 35.8005C57.5821 35.2128 57.8012 34.5239 57.817 33.8155C57.851 33.2498 57.6802 32.6907 57.3357 32.2401C57.1432 32.0361 56.9069 31.8783 56.6444 31.7787C56.382 31.6791 56.1003 31.6402 55.8206 31.6652C55.5271 31.6455 55.2329 31.692 54.9597 31.8011C54.6866 31.9101 54.4414 32.079 54.2424 32.2953C53.8571 32.7813 53.651 33.3848 53.6585 34.0046V34.0518H51.6542V34.0046C51.6852 33.1975 51.9444 32.4158 52.4019 31.7497C52.8595 31.0836 53.4966 30.5604 54.2395 30.2407C54.9825 29.921 55.801 29.8177 56.6002 29.943C57.3995 30.0682 58.1469 30.4168 58.756 30.9483C59.12 31.3146 59.404 31.7522 59.59 32.2335C59.7761 32.7147 59.8602 33.2293 59.8371 33.7446C59.8347 34.592 59.6146 35.4246 59.1979 36.1628C58.7867 36.9171 58.2773 37.6137 57.6829 38.2345C57.0989 38.841 56.3493 39.542 55.4576 40.3376L54.7632 40.952H60.1843L60.2553 42.6692ZM51.8278 42.5746H60.1449V40.9993H54.6212L55.4971 40.2116C56.3887 39.4239 57.1384 38.715 57.7223 38.1163C58.3072 37.5 58.811 36.8118 59.2216 36.0683C59.627 35.3462 59.8415 34.533 59.845 33.7052C59.8672 33.2022 59.7856 32.6999 59.605 32.2297C59.4244 31.7594 59.1489 31.3313 58.7955 30.972C58.2218 30.3986 57.4895 30.0095 56.6927 29.8547C55.8958 29.6998 55.0708 29.7863 54.3235 30.103C53.5763 30.4196 52.9409 30.952 52.499 31.6318C52.0571 32.3116 51.8289 33.1077 51.8436 33.9179H53.6585C53.6591 33.2931 53.8734 32.6873 54.2661 32.2008C54.4704 31.9759 54.7222 31.7991 55.0034 31.6833C55.2845 31.5675 55.5879 31.5156 55.8916 31.5312C56.1833 31.5086 56.4764 31.5514 56.7494 31.6563C57.0225 31.7612 57.2686 31.9257 57.4698 32.1377C57.8277 32.6127 58.0065 33.1984 57.9748 33.7919C57.9585 34.5172 57.7339 35.2225 57.3278 35.8241C56.8797 36.5296 56.35 37.18 55.7496 37.7619C55.1025 38.3763 54.2187 39.1718 53.1219 40.1249L51.883 41.1883L51.8278 42.5746Z",fill:"#FF0000"}),(0,dr.jsx)("path",{d:"M65.6686 29.9559C64.9864 29.8914 64.2996 30.0153 63.6832 30.314C63.0667 30.6126 62.5443 31.0746 62.1729 31.6494C61.4254 33.0916 61.0767 34.7067 61.1629 36.3283C61.08 37.9647 61.4282 39.5942 62.1729 41.0544C62.5876 41.5848 63.118 42.0137 63.7237 42.3088C64.3295 42.6039 64.9946 42.7572 65.6686 42.7572C66.3426 42.7572 67.0077 42.6039 67.6135 42.3088C68.2192 42.0137 68.7495 41.5848 69.1643 41.0544C69.909 39.5942 70.2572 37.9647 70.1743 36.3283C70.2605 34.7067 69.9118 33.0916 69.1643 31.6494C68.7923 31.0752 68.2697 30.6137 67.6535 30.3152C67.0372 30.0166 66.3507 29.8923 65.6686 29.9559ZM68.0359 38.7622C67.944 39.3456 67.6897 39.8915 67.302 40.3376C66.8369 40.7246 66.2505 40.9366 65.6449 40.9366C65.0394 40.9366 64.453 40.7246 63.9878 40.3376C63.5968 39.8937 63.3421 39.3468 63.254 38.7622C63.1255 37.9575 63.0674 37.1431 63.0804 36.3283C63.0668 35.5367 63.1276 34.7455 63.2619 33.9652C63.3537 33.3818 63.608 32.8359 63.9957 32.3898C64.4535 31.9936 65.039 31.7754 65.6449 31.7754C66.2508 31.7754 66.8364 31.9936 67.2941 32.3898C67.679 32.8377 67.9329 33.3828 68.028 33.9652C68.1583 34.746 68.2191 35.5368 68.2095 36.3283C68.2224 37.1431 68.1643 37.9575 68.0359 38.7622Z",fill:"#FF0000"}),(0,dr.jsx)("path",{d:"M65.6686 42.811C64.9768 42.8735 64.2812 42.7449 63.6577 42.4392C63.0342 42.1336 62.5069 41.6627 62.1335 41.078C61.3843 39.6192 61.0332 37.9892 61.1156 36.3519C61.0275 34.7142 61.3789 33.0827 62.1335 31.6258C62.5567 31.0899 63.0961 30.6568 63.7111 30.359C64.3262 30.0612 65.0008 29.9064 65.6844 29.9064C66.368 29.9064 67.0427 30.0612 67.6577 30.359C68.2728 30.6568 68.8122 31.0899 69.2353 31.6258C69.9874 33.0836 70.3386 34.7144 70.2533 36.3519C70.3301 37.9887 69.9793 39.6174 69.2353 41.078C68.8594 41.6678 68.327 42.142 67.6974 42.4479C67.0678 42.7538 66.3655 42.8795 65.6686 42.811ZM65.6686 30.0031C64.9947 29.9402 64.3164 30.0625 63.7072 30.3568C63.0979 30.6512 62.581 31.1063 62.2124 31.673C61.4731 33.1095 61.1274 34.7155 61.2102 36.3283C61.1245 37.964 61.4701 39.5936 62.2124 41.0544C62.6229 41.5769 63.147 41.9993 63.745 42.2898C64.3431 42.5803 64.9995 42.7313 65.6647 42.7313C66.3298 42.7313 66.9863 42.5803 67.5843 42.2898C68.1824 41.9993 68.7065 41.5769 69.117 41.0544C69.8659 39.5958 70.2144 37.9651 70.127 36.3283C70.2116 34.7144 69.8629 33.1073 69.117 31.673C68.7503 31.1064 68.2349 30.651 67.6268 30.3566C67.0188 30.0621 66.3415 29.9399 65.6686 30.0031ZM65.6686 41.0308C65.3597 41.0532 65.0494 41.01 64.7584 40.9041C64.4673 40.7982 64.202 40.632 63.98 40.4164C63.5784 39.9591 63.3181 39.3955 63.2303 38.7938C63.102 37.9863 63.044 37.1693 63.0567 36.3519C63.0476 35.5604 63.1083 34.7697 63.2382 33.9888C63.3492 33.4006 63.6225 32.855 64.0273 32.4134C64.493 32.0079 65.0901 31.7845 65.7081 31.7845C66.3261 31.7845 66.9232 32.0079 67.3889 32.4134C67.7764 32.8615 68.0354 33.4059 68.1385 33.9888C68.2684 34.7697 68.3291 35.5604 68.32 36.3519C68.329 37.1692 68.271 37.9859 68.1464 38.7938C68.0586 39.3955 67.7983 39.9591 67.3968 40.4164C67.1673 40.6317 66.8944 40.7958 66.5965 40.8977C66.2985 40.9995 65.9822 41.0369 65.6686 41.0072V41.0308ZM65.6686 31.8306C65.378 31.8124 65.0869 31.8564 64.8147 31.9596C64.5425 32.0628 64.2956 32.223 64.0904 32.4292C63.7056 32.8762 63.4541 33.422 63.3645 34.0046C63.2297 34.7848 63.169 35.576 63.183 36.3677C63.17 37.1799 63.2281 37.9917 63.3566 38.7938C63.4397 39.3767 63.689 39.9236 64.0747 40.3691C64.2903 40.574 64.546 40.7322 64.8257 40.8339C65.1054 40.9355 65.4031 40.9784 65.7002 40.9599C65.9897 40.9738 66.2789 40.9285 66.5503 40.8269C66.8217 40.7254 67.0694 40.5696 67.2784 40.3691C67.6696 39.9263 67.922 39.3785 68.0043 38.7938C68.1328 37.9917 68.1909 37.1799 68.178 36.3677C68.1881 35.5762 68.1274 34.7853 67.9965 34.0046C67.9069 33.422 67.6553 32.8762 67.2705 32.4292C67.0648 32.2156 66.8149 32.0493 66.5383 31.9418C66.2616 31.8343 65.9649 31.7883 65.6686 31.807V31.8306Z",fill:"#FF0000"}),(0,dr.jsx)("path",{d:"M82.5868 34.6505C82.2264 34.1888 81.7683 33.8123 81.2453 33.5477C80.6335 33.2427 79.9563 33.0913 79.2726 33.1066C78.4664 33.1018 77.6746 33.3201 76.9851 33.7372C76.2956 34.1544 75.7354 34.754 75.3666 35.4696C74.9571 36.2545 74.7509 37.1292 74.7669 38.0139C74.7558 38.9057 74.9616 39.7869 75.3666 40.5818C75.7274 41.2987 76.2719 41.9074 76.9448 42.3462C77.6231 42.7631 78.405 42.9814 79.2016 42.9764C79.886 42.9892 80.5631 42.835 81.1743 42.5274C81.7135 42.2637 82.1837 41.878 82.5474 41.401V42.8188H84.6069V33.2878H82.6105L82.5868 34.6505ZM82.1765 39.7468C82.0012 40.0826 81.759 40.3792 81.4648 40.6183C81.1706 40.8574 80.8306 41.034 80.4656 41.1373C80.1006 41.2405 79.7183 41.2683 79.3422 41.2188C78.9661 41.1693 78.6041 41.0437 78.2783 40.8496C77.8225 40.5778 77.451 40.1852 77.2052 39.7153C76.9255 39.1838 76.7844 38.5905 76.7948 37.9903C76.7815 37.3947 76.9228 36.8058 77.2052 36.281C77.4494 35.8248 77.819 35.4477 78.2704 35.194C78.7027 34.9471 79.1928 34.8193 79.6908 34.8237C80.2021 34.8203 80.7045 34.9573 81.1429 35.2199C81.5814 35.4825 81.9389 35.8605 82.1765 36.3125C82.4615 36.8363 82.6031 37.4259 82.5868 38.0218C82.6011 38.6225 82.4598 39.2166 82.1765 39.7468Z",fill:"#FF0000"}),(0,dr.jsx)("path",{d:"M79.241 43C78.4357 43.0071 77.6448 42.7859 76.9605 42.362C76.266 41.9255 75.7018 41.3107 75.3271 40.5818C74.9156 39.7805 74.707 38.8907 74.7195 37.9903C74.7033 37.0971 74.9123 36.2141 75.3271 35.4224C75.7032 34.7043 76.2706 34.1036 76.9667 33.6867C77.6629 33.2698 78.4608 33.0527 79.2726 33.0594C79.8916 33.0431 80.5064 33.1656 81.0717 33.4178C81.6371 33.6699 82.1386 34.0454 82.5394 34.5166V33.2169H84.6069V42.8425H82.5236V41.5428C82.1668 41.974 81.7232 42.3255 81.2216 42.5747C80.6045 42.871 79.9257 43.0168 79.241 43ZM79.241 33.1539C78.4463 33.1467 77.665 33.3584 76.9829 33.7655C76.3007 34.1727 75.7442 34.7596 75.3744 35.4618C74.9693 36.2423 74.7659 37.1114 74.7826 37.9903C74.7679 38.874 74.9711 39.7477 75.3744 40.5345C75.7328 41.2489 76.2781 41.8532 76.9526 42.2832C77.6216 42.694 78.3925 42.9095 79.1779 42.9055C79.8561 42.9163 80.5271 42.7651 81.1349 42.4644C81.6633 42.2012 82.1247 41.8214 82.4842 41.3538L82.571 41.2356V42.748H84.4727V33.2957H82.6341V34.7687L82.5473 34.6584C82.1907 34.2034 81.7381 33.8323 81.2216 33.5714C80.6147 33.2789 79.9463 33.1357 79.2726 33.1539H79.241ZM79.6592 41.2828C79.1534 41.2857 78.6565 41.1495 78.2231 40.889C77.7584 40.6162 77.3808 40.2175 77.1341 39.739C76.8475 39.2013 76.7035 38.5993 76.7159 37.9903C76.7016 37.3861 76.8458 36.7887 77.1341 36.2574C77.3813 35.8055 77.7467 35.429 78.1914 35.1682C78.6362 34.9074 79.1435 34.772 79.6592 34.7765C80.1667 34.7726 80.6657 34.906 81.1033 35.1625C81.5616 35.4328 81.938 35.8221 82.1922 36.2889C82.4618 36.8284 82.6021 37.4229 82.6021 38.0257C82.6021 38.6286 82.4618 39.2232 82.1922 39.7626C81.9428 40.235 81.5655 40.628 81.1033 40.8969C80.6749 41.1479 80.1875 41.2811 79.6908 41.2828H79.6592ZM79.6592 34.8632C79.1593 34.8615 78.6681 34.9944 78.2376 35.2481C77.807 35.5019 77.4531 35.8668 77.213 36.3046C76.9344 36.822 76.7957 37.403 76.8106 37.9903C76.7965 38.5825 76.9351 39.1684 77.213 39.6917C77.4559 40.1545 77.8217 40.5414 78.2704 40.8102C78.6908 41.0597 79.1702 41.1929 79.6592 41.1962C80.1626 41.1957 80.6563 41.0584 81.0873 40.7989C81.5183 40.5393 81.8702 40.1675 82.1054 39.7232C82.3699 39.1963 82.5077 38.6151 82.5077 38.0257C82.5077 37.4364 82.3699 36.8552 82.1054 36.3283C81.8624 35.8765 81.4992 35.5004 81.0559 35.2413C80.6424 34.9968 80.1713 34.8664 79.6908 34.8632H79.6592Z",fill:"#FF0000"}),(0,dr.jsx)("path",{d:"M93.2238 33.5713C92.5977 33.2564 91.9047 33.0969 91.2037 33.1066C90.6604 33.1072 90.1231 33.2199 89.6255 33.4374C89.1443 33.6409 88.7173 33.9537 88.3787 34.3511V33.2641H86.406V42.7952H88.3787V37.4704C88.331 36.7538 88.5661 36.047 89.0337 35.5012C89.5143 35.0656 90.1402 34.8242 90.7894 34.8242C91.4386 34.8242 92.0645 35.0656 92.5452 35.5012C93.0042 36.051 93.2331 36.7563 93.1843 37.4704V42.7952H95.1413V37.1711C95.1639 36.4024 94.9901 35.6407 94.6363 34.9577C94.3157 34.3644 93.8234 33.8813 93.2238 33.5713Z",fill:"#FF0000"}),(0,dr.jsx)("path",{d:"M95.1649 42.8425H93.1133V37.4705C93.1601 36.7676 92.934 36.0737 92.482 35.5327C92.26 35.307 91.9926 35.1307 91.6975 35.0153C91.4024 34.8999 91.0862 34.8481 90.7697 34.8632C90.4508 34.8488 90.1325 34.9009 89.8349 35.0161C89.5374 35.1314 89.2672 35.3074 89.0416 35.5327C88.5838 36.0708 88.3544 36.7661 88.4024 37.4705V42.8425H86.335V33.2169H88.4024V34.2252C88.7313 33.8676 89.1318 33.5831 89.5781 33.3902C90.0913 33.1691 90.6448 33.0564 91.2037 33.0594C91.9108 33.0483 92.6099 33.2107 93.2396 33.532C93.8418 33.8485 94.3362 34.3365 94.6599 34.9341C95.0097 35.6271 95.1831 36.3954 95.1649 37.1711V42.8425ZM93.208 42.748H95.0703V37.1711C95.0927 36.411 94.9216 35.6576 94.5731 34.9813C94.2659 34.3975 93.7867 33.9219 93.2001 33.6186C92.5825 33.3036 91.8971 33.144 91.2037 33.1539C90.6611 33.1532 90.124 33.2631 89.6255 33.4769C89.1517 33.6779 88.7325 33.9883 88.4024 34.3827L88.3235 34.4851V33.3114H86.4375V42.7637H88.3235V37.4862C88.2746 36.7585 88.5124 36.0406 88.9863 35.4855C89.474 35.0388 90.1118 34.7909 90.7736 34.7909C91.4355 34.7909 92.0733 35.0388 92.5609 35.4855C93.0283 36.0438 93.2628 36.7601 93.2159 37.4862L93.208 42.748Z",fill:"#FF0000"}),(0,dr.jsx)("path",{d:"M103.545 33.7131C102.779 33.3148 101.927 33.1068 101.063 33.1068C100.199 33.1068 99.3482 33.3148 98.5818 33.7131C97.847 34.1132 97.242 34.7144 96.8379 35.446C96.3954 36.2315 96.172 37.1209 96.1908 38.0218C96.1741 38.922 96.3887 39.8115 96.8142 40.6054C97.2137 41.3325 97.8097 41.9329 98.5344 42.3383C99.2817 42.7537 100.125 42.9656 100.981 42.9527C101.853 42.9616 102.713 42.7503 103.482 42.3383C104.231 41.9373 104.852 41.334 105.273 40.5975C105.724 39.8148 105.953 38.9245 105.936 38.0218C105.954 37.1221 105.733 36.2336 105.297 35.446C104.888 34.7157 104.28 34.1152 103.545 33.7131ZM103.49 39.7862C103.242 40.2451 102.867 40.6226 102.409 40.8732C101.972 41.1157 101.48 41.2431 100.981 41.2434C100.608 41.2521 100.238 41.1815 99.8953 41.0362C99.5524 40.8908 99.2444 40.6741 98.9921 40.4006C98.4329 39.7444 98.1501 38.8974 98.203 38.0375C98.1841 37.43 98.3142 36.827 98.5818 36.281C98.8147 35.8292 99.1737 35.4544 99.6155 35.2019C100.05 34.964 100.537 34.8393 101.032 34.8393C101.527 34.8393 102.014 34.964 102.448 35.2019C102.911 35.4403 103.293 35.8104 103.545 36.2652C103.828 36.8065 103.967 37.4115 103.948 38.0218C103.954 38.6399 103.796 39.2486 103.49 39.7862Z",fill:"#FF0000"}),(0,dr.jsx)("path",{d:"M100.981 43C100.117 43.0091 99.2664 42.7948 98.5108 42.3777C97.7792 41.969 97.1776 41.3631 96.7748 40.6291C96.355 39.8253 96.1359 38.9322 96.1359 38.0257C96.1359 37.1193 96.355 36.2262 96.7748 35.4224C97.1879 34.6828 97.8038 34.0762 98.5503 33.6738C99.322 33.2701 100.18 33.0592 101.052 33.0592C101.923 33.0592 102.781 33.2701 103.553 33.6738C104.294 34.0812 104.906 34.6867 105.321 35.4224C105.759 36.2179 105.982 37.1139 105.968 38.0218C105.982 38.9327 105.751 39.8307 105.297 40.6212C104.87 41.3631 104.244 41.9714 103.49 42.3777C102.718 42.7899 101.856 43.0037 100.981 43ZM101.067 33.1539C100.21 33.1444 99.363 33.3503 98.6055 33.7525C97.8795 34.1518 97.2807 34.7468 96.8774 35.4697C96.4422 36.2491 96.2216 37.1297 96.2382 38.0218C96.2213 38.9146 96.4361 39.7965 96.8616 40.5818C97.2529 41.303 97.8412 41.8984 98.5582 42.299C99.2994 42.7073 100.134 42.9163 100.981 42.9055C101.845 42.9142 102.697 42.7056 103.458 42.299C104.2 41.9009 104.815 41.3033 105.234 40.5739C105.659 39.7901 105.881 38.913 105.881 38.0218C105.881 37.1307 105.659 36.2535 105.234 35.4697C104.831 34.7468 104.232 34.1518 103.506 33.7525C102.756 33.3538 101.917 33.148 101.067 33.1539ZM100.981 41.2828C100.603 41.2936 100.227 41.2232 99.8781 41.0764C99.5296 40.9296 99.2167 40.71 98.9606 40.4322C98.3948 39.761 98.112 38.897 98.1715 38.0218C98.1553 37.4061 98.288 36.7954 98.5582 36.2416C98.7962 35.7842 99.1604 35.4043 99.6077 35.1467C100.045 34.8989 100.541 34.7712 101.044 34.7765C101.549 34.7709 102.048 34.8986 102.488 35.1467C102.944 35.4011 103.316 35.7812 103.561 36.2416C103.846 36.791 103.987 37.4034 103.971 38.0218C103.991 38.645 103.844 39.2621 103.545 39.8099C103.29 40.2746 102.91 40.6593 102.448 40.9205C101.998 41.1641 101.493 41.2888 100.981 41.2828ZM101.028 34.8632C100.542 34.8626 100.063 34.9874 99.6392 35.2255C99.2033 35.4708 98.8514 35.8413 98.6292 36.2889C98.3608 36.8262 98.2305 37.4218 98.2504 38.0218C98.1958 38.882 98.4788 39.7295 99.0395 40.3849C99.2929 40.6448 99.5978 40.8491 99.9347 40.9848C100.272 41.1204 100.633 41.1844 100.996 41.1726C101.488 41.172 101.971 41.0474 102.401 40.8102C102.85 40.5604 103.219 40.1891 103.466 39.739C103.751 39.2038 103.893 38.6041 103.877 37.9982C103.894 37.3966 103.758 36.8004 103.482 36.2653C103.247 35.8193 102.888 35.4502 102.448 35.2019C102.011 34.9704 101.523 34.8538 101.028 34.8632Z",fill:"#FF0000"}),(0,dr.jsx)("path",{d:"M113.717 38.6599C113.401 38.2976 113.007 38.012 112.565 37.8249C112.01 37.5979 111.44 37.4084 110.86 37.2577C110.339 37.1081 109.945 36.99 109.677 36.8876C109.427 36.7987 109.199 36.6593 109.006 36.4779C108.912 36.4005 108.838 36.3027 108.789 36.1921C108.74 36.0814 108.717 35.9609 108.722 35.8399C108.719 35.684 108.756 35.53 108.829 35.3922C108.902 35.2545 109.009 35.1375 109.14 35.0522C109.5 34.8349 109.919 34.7332 110.339 34.7608C110.791 34.736 111.238 34.8697 111.602 35.1389C111.756 35.2632 111.882 35.4187 111.972 35.5952C112.062 35.7717 112.113 35.9651 112.123 36.1628H114.095C114.094 35.7335 113.998 35.3098 113.814 34.9218C113.63 34.5338 113.362 34.1911 113.03 33.918C112.277 33.3562 111.349 33.0773 110.41 33.1303C109.748 33.1196 109.09 33.2428 108.477 33.4926C107.961 33.6998 107.513 34.0461 107.183 34.4929C106.89 34.8962 106.733 35.3814 106.733 35.8793C106.709 36.4257 106.883 36.9626 107.222 37.3916C107.542 37.7617 107.945 38.0506 108.398 38.2345C108.97 38.4625 109.555 38.6546 110.15 38.8095C110.692 38.9516 111.22 39.1414 111.728 39.3766C111.882 39.4431 112.012 39.5533 112.103 39.6934C112.195 39.8335 112.243 39.9973 112.241 40.1643C112.233 40.3226 112.188 40.4766 112.108 40.6137C112.028 40.7507 111.917 40.8667 111.783 40.952C111.394 41.1846 110.943 41.2945 110.489 41.2671C110.015 41.2838 109.549 41.1424 109.164 40.8654C109 40.747 108.863 40.5951 108.762 40.42C108.662 40.2448 108.599 40.0502 108.58 39.8492H106.536C106.553 40.4186 106.746 40.9688 107.088 41.4246C107.457 41.9065 107.943 42.2862 108.501 42.5274C109.136 42.8104 109.826 42.9502 110.521 42.937C111.184 42.9527 111.842 42.8292 112.454 42.5747C112.967 42.365 113.41 42.0156 113.732 41.5664C114.032 41.143 114.19 40.6355 114.182 40.1171C114.203 39.5919 114.038 39.0762 113.717 38.6599Z",fill:"#FF0000"}),(0,dr.jsx)("path",{d:"M110.56 43C109.86 43.0083 109.167 42.8687 108.524 42.5904C107.96 42.3431 107.468 41.9552 107.096 41.464C106.75 41.0092 106.552 40.4594 106.528 39.8887V39.8414H108.666V39.8887C108.684 40.0822 108.743 40.2696 108.84 40.4382C108.936 40.6068 109.068 40.7525 109.227 40.8654C109.605 41.1362 110.063 41.2747 110.529 41.2592C110.971 41.2865 111.411 41.1794 111.791 40.952C111.927 40.8702 112.039 40.7545 112.117 40.6164C112.194 40.4784 112.234 40.3226 112.233 40.1643C112.246 39.9983 112.205 39.8326 112.117 39.6911C112.029 39.5495 111.898 39.4395 111.744 39.3766C111.235 39.144 110.707 38.9543 110.166 38.8095C109.569 38.6542 108.981 38.4649 108.406 38.2424C107.949 38.0504 107.543 37.7536 107.222 37.3759C106.863 36.9322 106.683 36.3702 106.717 35.8005C106.718 35.2918 106.878 34.7959 107.175 34.3827C107.513 33.9347 107.965 33.5863 108.485 33.3744C109.105 33.119 109.771 32.993 110.442 33.0042C111.397 32.962 112.336 33.2577 113.093 33.8392C113.428 34.1177 113.698 34.4656 113.885 34.8587C114.071 35.2517 114.17 35.6806 114.174 36.1156V36.1629H112.107V36.1156C112.098 35.9249 112.049 35.7384 111.962 35.5685C111.875 35.3986 111.752 35.2494 111.602 35.131C111.247 34.8693 110.812 34.7385 110.371 34.7608C109.962 34.7343 109.554 34.8333 109.203 35.0443C109.078 35.1234 108.976 35.2329 108.906 35.3625C108.835 35.492 108.799 35.6374 108.801 35.7848C108.798 35.8993 108.821 36.0128 108.868 36.1176C108.914 36.2223 108.983 36.3158 109.069 36.3913C109.256 36.57 109.48 36.7069 109.724 36.793C110 36.8875 110.395 37.0136 110.9 37.1632C111.483 37.3082 112.055 37.4951 112.612 37.7225C113.061 37.9178 113.462 38.2081 113.788 38.5732C114.128 39.0005 114.309 39.5321 114.301 40.0777C114.306 40.6067 114.146 41.1242 113.843 41.5586C113.513 42.0089 113.065 42.3603 112.549 42.5747C111.924 42.8555 111.246 43.0005 110.56 43ZM106.615 39.9201C106.644 40.4595 106.833 40.9779 107.159 41.4089C107.522 41.888 108.004 42.2652 108.556 42.5037C109.815 43.0313 111.23 43.0483 112.501 42.5511C113.002 42.3392 113.435 41.9962 113.756 41.5586C114.049 41.141 114.203 40.6425 114.198 40.1328C114.211 39.6096 114.038 39.0987 113.709 38.6914C113.391 38.3505 113.004 38.0818 112.573 37.9037C112.018 37.6773 111.449 37.4904 110.868 37.3444C110.355 37.1947 109.961 37.0687 109.684 36.9742C109.431 36.8796 109.198 36.7379 108.998 36.5567C108.903 36.4715 108.828 36.3668 108.778 36.2499C108.727 36.133 108.703 36.0065 108.706 35.8793C108.706 35.7222 108.746 35.5677 108.822 35.4301C108.898 35.2925 109.007 35.1761 109.14 35.0916C109.506 34.865 109.933 34.7577 110.363 34.7844C110.827 34.7626 111.284 34.9018 111.657 35.1782C111.81 35.3014 111.935 35.4544 112.026 35.6278C112.117 35.8012 112.171 35.9913 112.186 36.1865H114.072C114.062 35.7735 113.964 35.3674 113.784 34.9953C113.605 34.6231 113.348 34.2934 113.03 34.0282C112.283 33.4712 111.365 33.1925 110.434 33.2406C109.777 33.2271 109.124 33.3505 108.517 33.6029C108.011 33.8048 107.571 34.1429 107.246 34.5796C106.958 34.9755 106.803 35.4528 106.804 35.9423C106.776 36.4783 106.947 37.0058 107.286 37.4232C107.599 37.7876 107.994 38.0735 108.438 38.2581C109.009 38.4774 109.591 38.6666 110.182 38.8252C110.742 38.9674 111.289 39.1599 111.815 39.4003C111.977 39.4706 112.115 39.5875 112.211 39.7362C112.306 39.8849 112.355 40.0586 112.352 40.2352C112.351 40.4075 112.307 40.5768 112.223 40.7271C112.139 40.8774 112.017 41.0036 111.87 41.0938C111.475 41.3356 111.015 41.4511 110.552 41.4246C110.066 41.4401 109.588 41.2932 109.195 41.0072C109.033 40.8898 108.897 40.7405 108.795 40.5684C108.693 40.3963 108.628 40.2051 108.603 40.0068L106.615 39.9201Z",fill:"#FF0000"})]}),(0,dr.jsx)("defs",{children:(0,dr.jsx)("clipPath",{id:"clip0_75_148",children:(0,dr.jsx)("rect",{width:"165",height:"43",fill:"white"})})})]})},ur=function(){return(0,dr.jsxs)("svg",{xmlns:"http://www.w3.org/2000/svg",width:"68",height:"42",viewBox:"0 0 68 42",fill:"none",children:[(0,dr.jsxs)("g",{clipPath:"url(#clip0_80_106)",children:[(0,dr.jsx)("path",{d:"M28.3867 42C26.214 41.9737 23.9207 41.8573 21.6351 41.5733C17.892 41.1078 14.2213 40.3382 10.6723 39.0569C8.34735 38.2173 6.14161 37.1412 4.12359 35.7134C2.70679 34.7111 1.43079 33.5587 0.339964 32.2135C0.206783 32.0496 0.0748693 31.8556 0.0279386 31.6567C-0.157247 30.8809 0.610133 30.1789 1.38512 30.4104C1.58933 30.4717 1.78213 30.5881 1.96351 30.7032C4.69183 32.44 7.56348 33.8978 10.6064 35.0202C13.3207 36.0212 16.1074 36.737 18.9778 37.1487C21.7936 37.5516 24.6221 37.7455 27.4659 37.713C29.47 37.6905 31.469 37.5541 33.4591 37.3001C36.8584 36.8671 40.1752 36.1051 43.3893 34.9263C47.8871 33.2771 51.9244 30.8884 55.4036 27.6112C59.8011 23.4707 62.6715 18.4755 64.0287 12.6319C64.3585 11.2104 64.616 9.77765 64.7961 8.33115C64.8925 7.55534 65.3846 7.0861 66.1609 7.04355C66.8965 7.00351 67.5028 7.46399 67.655 8.19976C67.9252 9.50862 68.0267 10.8325 67.995 12.1676C67.9328 14.7804 67.3557 17.2905 66.398 19.7155C64.3965 24.7833 61.2128 29.0152 57.0119 32.5151C53.2473 35.6521 48.983 37.9157 44.3381 39.5011C41.6631 40.4146 38.9195 41.059 36.1189 41.4694C33.5986 41.8385 31.0605 41.9787 28.3855 41.9975L28.3867 42Z",fill:"#E2261D"}),(0,dr.jsx)("path",{d:"M0.705263 18.1452C0.506125 17.8511 0.521346 17.5858 0.607597 17.3306C0.688774 17.0916 0.799125 16.8613 0.917086 16.6373C1.65022 15.2434 2.71314 14.1235 3.89528 13.0887C5.96784 11.273 8.40443 10.1568 11.0287 9.39355C12.1602 9.06446 13.303 8.77291 14.4521 8.51013C15.3197 8.31118 16.2063 8.26863 17.0879 8.46509C17.5064 8.55768 17.8933 8.72536 18.2218 9.00315C18.6632 9.37478 18.9118 9.84402 18.9473 10.4196C18.9638 10.6786 18.9182 10.9226 18.7875 11.1516C18.4958 11.6584 18.2193 12.1727 17.9136 12.6707C17.6282 13.1362 17.1779 13.4065 16.668 13.5767C15.8778 13.8407 15.0648 13.9045 14.2365 13.8432C13.5592 13.7931 12.8806 13.7343 12.202 13.7218C11.389 13.7068 10.5937 13.8657 9.8022 14.0321C8.65938 14.2711 7.52924 14.5527 6.42193 14.9256C5.17509 15.346 4.0069 15.9178 2.93003 16.6674C2.40491 17.0328 1.8836 17.4019 1.35595 17.7623C1.15808 17.8974 0.942454 18.0075 0.706532 18.1464L0.705263 18.1452Z",fill:"#E2261D"}),(0,dr.jsx)("path",{d:"M58.0773 3.08195C57.6207 3.132 57.1768 3.08571 56.7328 3.05192C55.8881 2.9881 55.0433 2.88675 54.1973 2.87799C52.9479 2.86423 51.7176 3.06443 50.5063 3.36975C49.1871 3.7026 47.882 4.07298 46.6275 4.60229C45.8804 4.91761 45.1892 5.32554 44.5461 5.8173C43.7457 6.42919 42.8693 6.89593 41.8583 7.07486C41.2685 7.17997 40.7117 7.10114 40.1929 6.78331C39.8226 6.55682 39.4484 6.33034 39.059 6.13638C38.1432 5.68216 37.9935 4.60979 38.2472 3.91032C38.4032 3.48237 38.6607 3.127 38.9956 2.82043C39.522 2.33993 40.1409 2.00959 40.8018 1.75057C41.9497 1.3001 43.1496 1.02106 44.3444 0.725748C45.6902 0.392901 47.055 0.152651 48.4401 0.0437876C49.3761 -0.0300393 50.3147 -0.0150237 51.247 0.102599C52.4698 0.256509 53.6849 0.452964 54.8556 0.85213C55.8082 1.17622 56.7075 1.60291 57.5281 2.17976C57.8287 2.38998 58.0685 2.644 58.0761 3.0807L58.0773 3.08195Z",fill:"#E2261D"})]}),(0,dr.jsx)("defs",{children:(0,dr.jsx)("clipPath",{id:"clip0_80_106",children:(0,dr.jsx)("rect",{width:"68",height:"42",fill:"white"})})})]})},pr=function(e){var n=e.active,t=void 0!==n&&n;return(0,dr.jsxs)("svg",{xmlns:"http://www.w3.org/2000/svg",width:"24",height:"24",viewBox:"0 0 24 24",fill:"none",children:[(0,dr.jsx)("path",{d:"M19 3V7M17 5H21M19 17V21M17 19H21M10 5L8.53001 8.72721C8.3421 9.20367 8.24814 9.4419 8.10427 9.64278C7.97675 9.82084 7.82084 9.97675 7.64278 10.1043C7.4419 10.2481 7.20367 10.3421 6.72721 10.53L3 12L6.72721 13.47C7.20367 13.6579 7.4419 13.7519 7.64278 13.8957C7.82084 14.0233 7.97675 14.1792 8.10427 14.3572C8.24814 14.5581 8.3421 14.7963 8.53001 15.2728L10 19L11.47 15.2728C11.6579 14.7963 11.7519 14.5581 11.8957 14.3572C12.0233 14.1792 12.1792 14.0233 12.3572 13.8957C12.5581 13.7519 12.7963 13.6579 13.2728 13.47L17 12L13.2728 10.53C12.7963 10.3421 12.5581 10.2481 12.3572 10.1043C12.1792 9.97675 12.0233 9.82084 11.8957 9.64278C11.7519 9.4419 11.6579 9.20367 11.47 8.72721L10 5Z",stroke:t?"white":"black",strokeWidth:"2",strokeLinecap:"round",strokeLinejoin:"round"}),'strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>']})},mr=function(e){var n=e.active,t=void 0!==n&&n;return(0,dr.jsxs)("svg",{xmlns:"http://www.w3.org/2000/svg",width:"38",height:"27",viewBox:"0 0 38 27",fill:"none",children:[(0,dr.jsx)("path",{d:"M11.4638 8.38019e-05C11.0232 0.009459 10.6701 0.371959 10.6763 0.812584C10.6763 4.63446 9.04194 5.98446 7.36382 7.48446C5.85132 8.83446 4.27632 10.3688 4.27632 13.6126C4.27319 13.9032 4.42319 14.172 4.67319 14.3157C4.92319 14.4626 5.22944 14.4626 5.47944 14.3157C5.72944 14.172 5.87944 13.9032 5.87632 13.6126C5.87632 10.8313 6.91694 10.0282 8.42944 8.67508C10.1076 7.17821 12.2763 5.13133 12.2763 0.812584C12.2794 0.596959 12.1951 0.387584 12.0419 0.234459C11.8888 0.081334 11.6794 -0.003041 11.4638 8.38019e-05ZM16.2763 3.21258C15.8357 3.21258 15.4763 3.57196 15.4763 4.01258C15.4763 6.35008 14.4826 7.24071 13.3294 8.27196C12.0919 9.38133 10.6888 10.6376 10.6888 13.6126C10.6888 14.0532 11.0482 14.4126 11.4888 14.4126C11.9294 14.4126 12.2888 14.0563 12.2888 13.6126C12.2888 11.3532 13.2669 10.4782 14.3982 9.46258C15.6544 8.33758 17.0763 7.06571 17.0763 4.01258C17.0763 3.57196 16.7169 3.21258 16.2763 3.21258ZM20.2763 6.41258C19.8326 6.41258 19.4763 6.77196 19.4763 7.21258C19.4763 8.66571 18.8794 9.20008 18.1232 9.87196C17.2982 10.6063 16.2701 11.522 16.2701 13.6126C16.2701 14.0532 16.6294 14.4126 17.0701 14.4126C17.5107 14.4126 17.8701 14.0532 17.8701 13.6126C17.8701 12.2376 18.4232 11.747 19.1888 11.0657C20.0294 10.3188 21.0763 9.38446 21.0763 7.21258C21.0763 6.77196 20.7201 6.41258 20.2763 6.41258ZM36.2232 15.1595C34.5607 15.122 30.6232 15.3407 25.7294 17.6751L24.4388 22.4001C25.6232 22.3751 26.7826 21.9626 27.6482 21.147C28.6544 20.197 30.6169 18.9876 34.2638 18.5657C35.8669 18.3813 37.0763 17.0095 37.0763 15.3938V15.2126C37.0763 15.2126 36.7763 15.172 36.2232 15.1595ZM0.801316 16.0126C0.551316 16.0126 0.316941 16.1282 0.163816 16.3251C0.013816 16.5251 -0.036184 16.7845 0.026316 17.0251L1.62319 22.8751C2.19194 24.9563 4.09507 26.4126 6.25444 26.4126H18.0232C20.1794 26.4126 22.0826 24.9595 22.6513 22.8751L24.2482 17.0251C24.3138 16.7845 24.2638 16.5251 24.1138 16.3251C23.9607 16.1282 23.7263 16.0126 23.4763 16.0126H0.801316Z",fill:t?"white":"black"}),"/>"]})},hr=function(e){var n=e.active,t=void 0!==n&&n;return(0,dr.jsxs)("svg",{xmlns:"http://www.w3.org/2000/svg",width:"37",height:"37",viewBox:"0 0 37 37",fill:"none",children:[(0,dr.jsx)("path",{d:"M2.22 5.92C1.00305 5.92 0 6.92305 0 8.14V28.86C0 30.077 1.00305 31.08 2.22 31.08H3.7V31.82C3.7 32.6294 4.37063 33.3 5.18 33.3H7.4C8.20938 33.3 8.88 32.6294 8.88 31.82V31.08H28.12V31.82C28.12 32.6294 28.7906 33.3 29.6 33.3H31.82C32.6294 33.3 33.3 32.6294 33.3 31.82V31.08H34.78C35.997 31.08 37 30.077 37 28.86V8.14C37 6.92305 35.997 5.92 34.78 5.92H2.22ZM2.22 7.4H34.78C35.1963 7.4 35.52 7.72375 35.52 8.14V28.86C35.52 29.2762 35.1963 29.6 34.78 29.6H28.9988C28.9005 29.5798 28.7964 29.5798 28.6981 29.6H4.57875C4.48047 29.5798 4.37641 29.5798 4.27813 29.6H2.22C1.80375 29.6 1.48 29.2762 1.48 28.86V8.14C1.48 7.72375 1.80375 7.4 2.22 7.4ZM3.7 9.62V27.38H29.6V9.62H3.7ZM5.18 11.1H28.12V25.9H5.18V11.1ZM32.56 11.84C31.742 11.84 31.08 12.502 31.08 13.32C31.08 14.138 31.742 14.8 32.56 14.8C33.378 14.8 34.04 14.138 34.04 13.32C34.04 12.502 33.378 11.84 32.56 11.84ZM25.2756 14.7537C25.1282 14.7509 24.9837 14.7913 24.8594 14.8694C24.8594 14.8694 21.434 16.28 19.3325 16.28C18.2832 16.28 17.575 15.9794 16.7194 15.6094C15.8638 15.2394 14.8491 14.8 13.4819 14.8C10.7473 14.8 7.81625 16.3494 7.81625 16.3494C7.44625 16.5286 7.29016 16.9737 7.46938 17.3437C7.64859 17.7137 8.09375 17.8698 8.46375 17.6906C8.46375 17.6906 11.3457 16.28 13.4819 16.28C14.5514 16.28 15.2654 16.5806 16.1181 16.9506C16.9709 17.3206 17.9797 17.76 19.3325 17.76C22.041 17.76 25.4606 16.2106 25.4606 16.2106C25.822 16.1181 26.059 15.7712 26.0098 15.4012C25.9636 15.0312 25.6485 14.7537 25.2756 14.7537ZM32.56 17.02C31.742 17.02 31.08 17.682 31.08 18.5C31.08 19.318 31.742 19.98 32.56 19.98C33.378 19.98 34.04 19.318 34.04 18.5C34.04 17.682 33.378 17.02 32.56 17.02ZM25.2756 19.1937C25.1282 19.1909 24.9837 19.2313 24.8594 19.3094C24.8594 19.3094 21.434 20.72 19.3325 20.72C18.2832 20.72 17.575 20.4194 16.7194 20.0494C15.8638 19.6794 14.8491 19.24 13.4819 19.24C10.7473 19.24 7.81625 20.7894 7.81625 20.7894C7.44625 20.9686 7.29016 21.4137 7.46938 21.7837C7.64859 22.1537 8.09375 22.3098 8.46375 22.1306C8.46375 22.1306 11.3457 20.72 13.4819 20.72C14.5514 20.72 15.2654 21.0206 16.1181 21.3906C16.9709 21.7606 17.9797 22.2 19.3325 22.2C22.041 22.2 25.4606 20.6506 25.4606 20.6506C25.822 20.5581 26.059 20.2112 26.0098 19.8412C25.9636 19.4712 25.6485 19.1937 25.2756 19.1937ZM32.56 22.2C31.742 22.2 31.08 22.8619 31.08 23.68C31.08 24.498 31.742 25.16 32.56 25.16C33.378 25.16 34.04 24.498 34.04 23.68C34.04 22.8619 33.378 22.2 32.56 22.2ZM5.18 31.08H7.4V31.82H5.18V31.08ZM29.6 31.08H31.82V31.82H29.6V31.08Z",fill:t?"white":"black"}),"/>"]})},fr=function(e){var n=e.active,t="black";return void 0!==n&&n&&(t="white"),(0,dr.jsxs)("svg",{xmlns:"http://www.w3.org/2000/svg",width:"31",height:"31",viewBox:"0 0 31 31",fill:"none",children:[(0,dr.jsx)("path",{d:"M15.5 30.3541V22.9271V19.7883",stroke:t,strokeWidth:"1.92",strokeMiterlimit:"10"}),(0,dr.jsx)("path",{d:"M15.5 11.2116V8.0729V0.645813",stroke:t,strokeWidth:"1.92",strokeMiterlimit:"10"}),(0,dr.jsx)("path",{d:"M20.4469 3.12581L15.4998 8.07289L10.5527 3.12581",stroke:t,strokeWidth:"1.92",strokeMiterlimit:"10"}),(0,dr.jsx)("path",{d:"M10.5527 27.8741L15.4998 22.9271L20.4469 27.8741",stroke:t,strokeWidth:"1.92",strokeMiterlimit:"10"}),(0,dr.jsx)("path",{d:"M28.365 22.9271L21.9325 19.22L19.22 17.6441",stroke:t,strokeWidth:"1.92",strokeMiterlimit:"10"}),(0,dr.jsx)("path",{d:"M11.7929 13.3558L9.06751 11.7929L2.63501 8.07289",stroke:t,strokeWidth:"1.92",strokeMiterlimit:"10"}),(0,dr.jsx)("path",{d:"M7.25907 5.02457L9.06741 11.7929L2.29907 13.6012",stroke:t,strokeWidth:"1.92",strokeMiterlimit:"10"}),(0,dr.jsx)("path",{d:"M23.7407 25.9754L21.9324 19.22L28.7007 17.3987",stroke:t,strokeWidth:"1.92",strokeMiterlimit:"10"}),(0,dr.jsx)("path",{d:"M2.63501 22.9271L9.06751 19.22L11.7929 17.6441",stroke:t,strokeWidth:"1.92",strokeMiterlimit:"10"}),(0,dr.jsx)("path",{d:"M19.22 13.3558L21.9325 11.7929L28.365 8.07289",stroke:t,strokeWidth:"1.92",strokeMiterlimit:"10"}),(0,dr.jsx)("path",{d:"M23.7407 5.02457L21.9324 11.7929L28.7007 13.6012",stroke:t,strokeWidth:"1.92",strokeMiterlimit:"10"}),(0,dr.jsx)("path",{d:"M7.25907 25.9754L9.06741 19.22L2.29907 17.3987",stroke:t,strokeWidth:"1.92",strokeMiterlimit:"10"}),(0,dr.jsx)("path",{d:"M19.2198 13.3558V17.6441L15.4998 19.7883L11.7927 17.6441V13.3558L15.4998 11.2116L19.2198 13.3558Z",stroke:t,strokeWidth:"1.92",strokeMiterlimit:"10"})]})},gr=function(){return(0,dr.jsxs)("svg",{xmlns:"http://www.w3.org/2000/svg",width:"32",height:"32",viewBox:"0 0 32 32",fill:"none",children:[(0,dr.jsxs)("g",{"clip-path":"url(#clip0_63_186)",children:[(0,dr.jsx)("path",{d:"M8.31796 10.8745C8.4646 9.71474 9.97188 8.13847 11.1681 8.31337L11.1662 8.31146C12.3303 8.53268 13.2518 10.5363 13.7715 11.4373C14.1397 12.091 13.9006 12.7533 13.5572 13.0328C13.0939 13.4062 12.3694 13.9214 12.5214 14.4387C12.7917 15.3583 16 18.5667 17.578 19.4787C18.1752 19.8239 18.6084 18.9134 18.9782 18.4469C19.247 18.0881 19.9098 17.8737 20.562 18.2279C21.536 18.7951 22.4536 19.4543 23.3022 20.1965C23.7259 20.5507 23.8254 21.0742 23.5317 21.6274C23.0146 22.6018 21.5187 23.8868 20.4329 23.6257C18.5364 23.1697 10.8667 20.1965 8.40308 11.5828C8.26453 11.1753 8.29941 11.0212 8.31796 10.8745Z",fill:"white"}),(0,dr.jsx)("path",{"fill-rule":"evenodd","clip-rule":"evenodd",d:"M16 30.1166C14.4297 30.1166 13.5609 29.9481 12.15 29.475L9.44785 30.8261C7.74126 31.6793 5.73333 30.4384 5.73333 28.5303V25.625C2.96974 23.048 1.88333 20.0767 1.88333 16C1.88333 8.20355 8.20358 1.8833 16 1.8833C23.7964 1.8833 30.1167 8.20355 30.1167 16C30.1167 23.7963 23.7964 30.1166 16 30.1166ZM8.3 24.5089L7.48373 23.7477C5.33661 21.7457 4.45 19.5074 4.45 16C4.45 9.62108 9.62111 4.44997 16 4.44997C22.3789 4.44997 27.55 9.62108 27.55 16C27.55 22.3789 22.3789 27.55 16 27.55C14.735 27.55 14.1417 27.4357 12.9661 27.0415L11.9555 26.7026L8.3 28.5303V24.5089Z",fill:"white"})]}),(0,dr.jsx)("defs",{children:(0,dr.jsx)("clipPath",{id:"clip0_63_186",children:(0,dr.jsx)("rect",{width:"30.8",height:"30.8",fill:"white",transform:"translate(0.600006 0.599976)"})})})]})},Cr=tr.header(ir||(ar=["\n    background: #FF3131;\n    color: #fffecd;\n    max-height: 2rem;\n"],sr||(sr=ar.slice(0)),ir=Object.freeze(Object.defineProperties(ar,{raw:{value:Object.freeze(sr)}})))),Ar=i(5);const vr=function(){return(0,dr.jsx)(Cr,{children:(0,dr.jsx)(Ar.Z,{children:"há 20 anos no mercado • desde 2005"})})},br=function(){return(0,dr.jsxs)(lr,{children:[(0,dr.jsx)(vr,{}),(0,dr.jsxs)(or,{children:[(0,dr.jsx)(ge,{to:"/",children:(0,dr.jsx)(cr,{})}),(0,dr.jsx)("div",{className:"svg.container",children:(0,dr.jsx)(ur,{})})]})]})};var yr,wr=tr.header(yr||(yr=function(e,n){return n||(n=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(n)}}))}(["\n    background-color: #EDEADF;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    \n    a {\n        color: #000;\n        text-align: center;\n        font-size: 14px;\n        font-style: normal;\n        font-weight: 300;\n        line-height: normal;\n    }\n    \n    p {\n        color: #000;\n        font-size: 16px;\n        font-style: normal;\n        font-weight: 700;\n        line-height: normal;\n    }\n    \n    .logoFooter {\n        margin-top: 30px;\n        margin-bottom: 20px;\n    }\n    \n    .midiasSociaisIcons {\n        display: flex;\n        flex-direction: row;\n        justify-content: center;\n        align-items: center;\n    }\n    \n    .midiasSociaisIcons svg {\n        padding-left: 10px;\n        padding-right: 10px;\n    }\n    \n    .infoProdutos {\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n    }\n    \n    .endereco {\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        padding-bottom: 30px;\n    }\n    \n    .copyRight {\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        padding-bottom: 20px;\n        max-width: 313px;\n    }\n    \n    @media (max-width: 768px) {\n        .endereco {\n            width: 70%;\n        }\n    }\n"])));const Sr=function(){return(0,dr.jsxs)(wr,{children:[(0,dr.jsx)("div",{className:"logoFooter",children:(0,dr.jsxs)("svg",{xmlns:"http://www.w3.org/2000/svg",width:"165",height:"43",viewBox:"0 0 165 43",fill:"none",children:[(0,dr.jsxs)("g",{clipPath:"url(#clip0_75_148)",children:[(0,dr.jsx)("path",{d:"M0.962726 9.53889C1.56003 8.38736 2.47803 7.43271 3.6062 6.78986C4.9232 6.09503 6.40091 5.76037 7.88935 5.81986C9.37779 5.87935 10.824 6.33085 12.0811 7.12856C13.3199 8.05055 14.1898 9.38236 14.5352 10.8858H11.1263C10.881 10.169 10.4141 9.5484 9.79271 9.11353C9.10927 8.66805 8.30422 8.44514 7.48854 8.4755C6.90334 8.45196 6.32057 8.56338 5.78549 8.80108C5.2504 9.03877 4.77739 9.39636 4.40317 9.8461C3.57234 10.9463 3.16365 12.3071 3.2511 13.6821C3.1675 15.0616 3.57561 16.426 4.40317 17.5339C4.7758 17.986 5.24833 18.3458 5.78366 18.585C6.31898 18.8241 6.90253 18.9362 7.48854 18.9124C8.27843 18.9795 9.06783 18.7779 9.72832 18.3402C10.3888 17.9026 10.8815 17.2547 11.1263 16.5021H14.5352C14.1449 17.981 13.2664 19.2853 12.0416 20.2042C10.7171 21.1502 9.11618 21.6321 7.48854 21.5748C6.12945 21.5995 4.78867 21.2594 3.6062 20.5902C2.47691 19.9381 1.55928 18.9757 0.962726 17.8175C0.329486 16.5292 0.000244141 15.1132 0.000244141 13.6782C0.000244141 12.2432 0.329486 10.8272 0.962726 9.53889Z",fill:"#FF0000"}),(0,dr.jsx)("path",{d:"M29.4175 6.56147C30.3463 7.06969 31.1019 7.84316 31.5875 8.78276C32.139 9.88138 32.4101 11.099 32.3766 12.3274V21.3228H29.2202V12.7921C29.2956 11.6494 28.9284 10.5215 28.1944 9.64134C27.4267 8.9417 26.4247 8.5538 25.3852 8.5538C24.3457 8.5538 23.3437 8.9417 22.576 9.64134C21.8298 10.5154 21.4559 11.6463 21.5344 12.7921V21.3228H18.3781V0.842834H21.5344V7.84541C22.0837 7.19156 22.7818 6.67841 23.5703 6.3488C24.4277 5.99279 25.3483 5.81327 26.2769 5.82104C27.3699 5.7967 28.4509 6.05158 29.4175 6.56147Z",fill:"#FF0000"}),(0,dr.jsx)("path",{d:"M36.9928 9.55468C37.5898 8.41651 38.4899 7.46491 39.5941 6.80474C40.6982 6.14457 41.9634 5.80144 43.2504 5.81315C44.3448 5.78722 45.4289 6.03069 46.4067 6.52207C47.2427 6.94315 47.9755 7.54286 48.5531 8.2786V6.09671H51.7489V21.3543H48.5452V19.0857C47.9622 19.8418 47.2148 20.4559 46.3594 20.8816C45.2966 21.4012 44.1205 21.6474 42.9381 21.5979C41.7557 21.5484 40.6045 21.2047 39.589 20.5981C38.4854 19.9048 37.5887 18.9281 36.9928 17.7703C36.3399 16.4992 36.0119 15.0867 36.038 13.6585C36.0031 12.232 36.3317 10.8199 36.9928 9.55468ZM47.8982 10.941C47.5054 10.204 46.9154 9.59045 46.1937 9.1687C45.5021 8.76535 44.7142 8.55582 43.9132 8.56218C43.117 8.55772 42.3335 8.76139 41.6406 9.15295C40.9216 9.56762 40.3317 10.1729 39.9362 10.9016C39.4829 11.7373 39.2571 12.677 39.2812 13.627C39.261 14.5892 39.4864 15.5406 39.9362 16.3918C40.3308 17.1449 40.9261 17.7745 41.6564 18.2114C42.3437 18.616 43.1271 18.8294 43.9251 18.8294C44.723 18.8294 45.5064 18.616 46.1937 18.2114C46.9156 17.7865 47.5056 17.1703 47.8982 16.4312C48.3452 15.5821 48.5679 14.6332 48.5452 13.6743C48.5695 12.7227 48.3466 11.7811 47.8982 10.941Z",fill:"#FF0000"}),(0,dr.jsx)("path",{d:"M61.5969 6.46693C62.4377 6.01657 63.3811 5.79133 64.335 5.81315V9.08206H63.5459C63.0371 9.04548 62.526 9.11018 62.0424 9.27245C61.5588 9.43471 61.1123 9.69129 60.7289 10.0273C60.0897 10.6496 59.7741 11.7445 59.7741 13.2962V21.3227H56.6177V6.09671H59.7741V8.31012C60.2066 7.54479 60.8358 6.90852 61.5969 6.46693Z",fill:"#FF0000"}),(0,dr.jsx)("path",{d:"M71.0975 0.834961V21.3149H67.9412V0.834961H71.0975Z",fill:"#FF0000"}),(0,dr.jsx)("path",{d:"M78.6729 20.5902C77.516 19.9404 76.5646 18.9798 75.9269 17.8176C75.2441 16.5476 74.9016 15.1231 74.9326 13.6822C74.9035 12.2401 75.2574 10.816 75.9584 9.55471C76.6102 8.38628 77.5819 7.42728 78.7597 6.78991C79.9826 6.14826 81.3434 5.81299 82.7249 5.81299C84.1064 5.81299 85.4673 6.14826 86.6901 6.78991C87.8664 7.42938 88.8375 8.38786 89.4914 9.55471C90.1924 10.816 90.5464 12.2401 90.5172 13.6822C90.5453 15.1272 90.1828 16.553 89.4678 17.8097C88.7875 18.9847 87.7929 19.9475 86.5954 20.5902C85.3635 21.2498 83.9847 21.5885 82.5868 21.5748C81.2187 21.5909 79.87 21.2516 78.6729 20.5902ZM84.8752 18.2272C85.6068 17.8185 86.2085 17.2125 86.6112 16.4785C87.0764 15.6129 87.305 14.6403 87.2741 13.6586C87.3055 12.6821 87.0854 11.7138 86.6349 10.8465C86.2471 10.1214 85.6616 9.5206 84.9462 9.11358C84.2506 8.73054 83.468 8.53255 82.6736 8.53858C81.8815 8.53068 81.101 8.72884 80.4089 9.11358C79.7015 9.51806 79.1281 10.1205 78.7597 10.8465C78.3248 11.7186 78.1133 12.6848 78.1442 13.6586C78.0568 15.0419 78.5093 16.4054 79.4068 17.4631C79.8072 17.8981 80.2957 18.2432 80.8399 18.4754C81.384 18.7076 81.9715 18.8217 82.5632 18.8101C83.369 18.8231 84.1648 18.6306 84.8752 18.2508V18.2272Z",fill:"#FF0000"}),(0,dr.jsx)("path",{d:"M98.0215 8.64097V17.1244C98 17.347 98.0247 17.5717 98.0939 17.7845C98.1631 17.9973 98.2755 18.1935 98.4239 18.3611C98.8218 18.6459 99.3095 18.7774 99.797 18.7313H101.738V21.3622H99.2446C98.0682 21.4422 96.9031 21.0891 95.9699 20.3697C95.5636 19.9393 95.2547 19.4268 95.0641 18.8669C94.8735 18.307 94.8056 17.7127 94.8651 17.1244V8.64097H93.0581V6.09672H94.8651V2.30005H98.0215V6.09672H101.738V8.67246L98.0215 8.64097Z",fill:"#FF0000"}),(0,dr.jsx)("path",{d:"M119.256 14.8716H107.578C107.621 15.9832 108.103 17.0325 108.92 17.7898C109.736 18.5471 110.82 18.9508 111.933 18.9124C112.679 18.963 113.423 18.7869 114.067 18.4073C114.711 18.0277 115.224 17.4623 115.54 16.7857H118.956C118.505 18.1689 117.627 19.3739 116.447 20.2279C115.131 21.1582 113.545 21.6314 111.933 21.5748C110.554 21.6005 109.193 21.2607 107.988 20.5902C106.836 19.942 105.892 18.9805 105.266 17.8175C104.592 16.5449 104.255 15.1214 104.287 13.6822C104.256 12.2434 104.584 10.8194 105.242 9.53892C105.85 8.37948 106.786 7.42366 107.933 6.78988C109.142 6.13103 110.501 5.79463 111.878 5.81316C113.225 5.78885 114.554 6.11458 115.737 6.75837C116.849 7.37342 117.763 8.2913 118.372 9.40502C119.024 10.6139 119.35 11.971 119.319 13.3435C119.34 13.8537 119.319 14.3648 119.256 14.8716ZM116.1 12.3273C116.112 11.7982 116.007 11.2729 115.791 10.7893C115.576 10.3058 115.255 9.87598 114.853 9.53103C114.011 8.81844 112.934 8.44242 111.831 8.47553C110.798 8.45355 109.797 8.8254 109.03 9.51529C108.231 10.2467 107.736 11.2498 107.641 12.3273H116.1Z",fill:"#FF0000"}),(0,dr.jsx)("path",{d:"M136.087 6.46692C136.925 6.01447 137.866 5.78906 138.818 5.81315V9.08206H138.029C137.52 9.04547 137.009 9.11017 136.525 9.27244C136.041 9.43471 135.595 9.69129 135.212 10.0273C134.572 10.6495 134.257 11.7445 134.257 13.2962V21.3227H131.1V6.0967H134.257V8.31011C134.69 7.5426 135.322 6.90586 136.087 6.46692Z",fill:"#FF0000"}),(0,dr.jsx)("path",{d:"M142.59 3.46585C142.302 3.18268 142.105 2.82017 142.025 2.42482C141.946 2.02946 141.986 1.61929 142.141 1.24689C142.296 0.874483 142.559 0.556835 142.896 0.334679C143.234 0.112523 143.63 -0.00401559 144.034 1.63446e-05C144.296 -0.00375429 144.557 0.0459739 144.8 0.146194C145.043 0.246414 145.263 0.395014 145.446 0.582899C145.821 0.969349 146.031 1.48629 146.031 2.02436C146.031 2.56243 145.821 3.0794 145.446 3.46585C145.263 3.65373 145.043 3.80233 144.8 3.90255C144.557 4.00277 144.296 4.0525 144.034 4.04873C143.766 4.05496 143.5 4.00647 143.251 3.90623C143.003 3.80599 142.778 3.65613 142.59 3.46585ZM145.588 6.06522V21.3228H142.432V6.09673L145.588 6.06522Z",fill:"#FF0000"}),(0,dr.jsx)("path",{d:"M153.156 20.5902C151.999 19.9404 151.047 18.9798 150.41 17.8175C149.727 16.5476 149.384 15.1231 149.415 13.6822C149.386 12.2401 149.74 10.816 150.441 9.55469C151.093 8.38626 152.065 7.42726 153.242 6.78989C154.46 6.15491 155.814 5.8233 157.188 5.8233C158.562 5.8233 159.915 6.15491 161.133 6.78989C162.311 7.42726 163.283 8.38626 163.935 9.55469C164.636 10.816 164.99 12.2401 164.96 13.6822C164.989 15.1271 164.626 16.553 163.911 17.8097C163.231 18.9847 162.236 19.9475 161.039 20.5902C159.807 21.2498 158.428 21.5885 157.03 21.5748C155.675 21.5841 154.341 21.245 153.156 20.5902ZM159.358 18.2271C160.091 17.8209 160.694 17.2143 161.094 16.4785C161.559 15.6129 161.788 14.6403 161.757 13.6585C161.788 12.682 161.568 11.7138 161.118 10.8465C160.73 10.1214 160.144 9.52058 159.429 9.11356C158.733 8.73052 157.951 8.53252 157.156 8.53856C156.364 8.53066 155.584 8.72882 154.892 9.11356C154.184 9.51803 153.611 10.1205 153.242 10.8465C152.81 11.7193 152.601 12.6855 152.635 13.6585C152.544 15.0424 152.997 16.407 153.897 17.4631C154.296 17.8997 154.785 18.2459 155.329 18.4782C155.874 18.7106 156.462 18.8238 157.054 18.81C157.857 18.8217 158.65 18.6293 159.358 18.2508V18.2271Z",fill:"#FF0000"}),(0,dr.jsx)("path",{d:"M55.497 40.2903C56.3966 39.4974 57.1384 38.7964 57.7223 38.1872C58.3159 37.5705 58.8229 36.8763 59.2295 36.1235C59.6357 35.4013 59.8528 34.5885 59.8608 33.7604C59.8839 33.2511 59.8012 32.7426 59.6179 32.2667C59.4346 31.7909 59.1546 31.3581 58.7955 30.9956C58.2124 30.4132 57.4675 30.019 56.6574 29.864C55.8473 29.709 55.0093 29.8003 54.2518 30.1262C53.4943 30.4521 52.8522 30.9975 52.4088 31.6918C51.9653 32.3861 51.7409 33.1973 51.7646 34.0203H53.6742C53.6632 33.3878 53.8755 32.7715 54.274 32.2795C54.4729 32.0622 54.7176 31.8915 54.9905 31.7799C55.2634 31.6682 55.5576 31.6182 55.8522 31.6336C56.143 31.6038 56.4369 31.6416 56.7107 31.7441C56.9845 31.8466 57.2308 32.011 57.4303 32.2244C57.7857 32.6882 57.9621 33.2641 57.9275 33.847C57.913 34.5641 57.691 35.2617 57.2883 35.8557C56.8404 36.5589 56.3107 37.2066 55.7101 37.7855C55.0631 38.3999 54.1872 39.1876 53.0824 40.1485L51.8357 41.2198V42.6534H60.2553V41.015H54.7316L55.497 40.2903Z",fill:"#FF0000"}),(0,dr.jsx)("path",{d:"M60.2553 42.6692H51.741V41.1647L52.9877 40.0856C54.0846 39.1403 54.9684 38.3448 55.6076 37.7225C56.2061 37.1447 56.7356 36.4997 57.1857 35.8005C57.5821 35.2128 57.8012 34.5239 57.817 33.8155C57.851 33.2498 57.6802 32.6907 57.3357 32.2401C57.1432 32.0361 56.9069 31.8783 56.6444 31.7787C56.382 31.6791 56.1003 31.6402 55.8206 31.6652C55.5271 31.6455 55.2329 31.692 54.9597 31.8011C54.6866 31.9101 54.4414 32.079 54.2424 32.2953C53.8571 32.7813 53.651 33.3848 53.6585 34.0046V34.0518H51.6542V34.0046C51.6852 33.1975 51.9444 32.4158 52.4019 31.7497C52.8595 31.0836 53.4966 30.5604 54.2395 30.2407C54.9825 29.921 55.801 29.8177 56.6002 29.943C57.3995 30.0682 58.1469 30.4168 58.756 30.9483C59.12 31.3146 59.404 31.7522 59.59 32.2335C59.7761 32.7147 59.8602 33.2293 59.8371 33.7446C59.8347 34.592 59.6146 35.4246 59.1979 36.1628C58.7867 36.9171 58.2773 37.6137 57.6829 38.2345C57.0989 38.841 56.3493 39.542 55.4576 40.3376L54.7632 40.952H60.1843L60.2553 42.6692ZM51.8278 42.5746H60.1449V40.9993H54.6212L55.4971 40.2116C56.3887 39.4239 57.1384 38.715 57.7223 38.1163C58.3072 37.5 58.811 36.8118 59.2216 36.0683C59.627 35.3462 59.8415 34.533 59.845 33.7052C59.8672 33.2022 59.7856 32.6999 59.605 32.2297C59.4244 31.7594 59.1489 31.3313 58.7955 30.972C58.2218 30.3986 57.4895 30.0095 56.6927 29.8547C55.8958 29.6998 55.0708 29.7863 54.3235 30.103C53.5763 30.4196 52.9409 30.952 52.499 31.6318C52.0571 32.3116 51.8289 33.1077 51.8436 33.9179H53.6585C53.6591 33.2931 53.8734 32.6873 54.2661 32.2008C54.4704 31.9759 54.7222 31.7991 55.0034 31.6833C55.2845 31.5675 55.5879 31.5156 55.8916 31.5312C56.1833 31.5086 56.4764 31.5514 56.7494 31.6563C57.0225 31.7612 57.2686 31.9257 57.4698 32.1377C57.8277 32.6127 58.0065 33.1984 57.9748 33.7919C57.9585 34.5172 57.7339 35.2225 57.3278 35.8241C56.8797 36.5296 56.35 37.18 55.7496 37.7619C55.1025 38.3763 54.2187 39.1718 53.1219 40.1249L51.883 41.1883L51.8278 42.5746Z",fill:"#FF0000"}),(0,dr.jsx)("path",{d:"M65.6686 29.9559C64.9864 29.8914 64.2996 30.0153 63.6832 30.314C63.0667 30.6126 62.5443 31.0746 62.1729 31.6494C61.4254 33.0916 61.0767 34.7067 61.1629 36.3283C61.08 37.9647 61.4282 39.5942 62.1729 41.0544C62.5876 41.5848 63.118 42.0137 63.7237 42.3088C64.3295 42.6039 64.9946 42.7572 65.6686 42.7572C66.3426 42.7572 67.0077 42.6039 67.6135 42.3088C68.2192 42.0137 68.7495 41.5848 69.1643 41.0544C69.909 39.5942 70.2572 37.9647 70.1743 36.3283C70.2605 34.7067 69.9118 33.0916 69.1643 31.6494C68.7923 31.0752 68.2697 30.6137 67.6535 30.3152C67.0372 30.0166 66.3507 29.8923 65.6686 29.9559ZM68.0359 38.7622C67.944 39.3456 67.6897 39.8915 67.302 40.3376C66.8369 40.7246 66.2505 40.9366 65.6449 40.9366C65.0394 40.9366 64.453 40.7246 63.9878 40.3376C63.5968 39.8937 63.3421 39.3468 63.254 38.7622C63.1255 37.9575 63.0674 37.1431 63.0804 36.3283C63.0668 35.5367 63.1276 34.7455 63.2619 33.9652C63.3537 33.3818 63.608 32.8359 63.9957 32.3898C64.4535 31.9936 65.039 31.7754 65.6449 31.7754C66.2508 31.7754 66.8364 31.9936 67.2941 32.3898C67.679 32.8377 67.9329 33.3828 68.028 33.9652C68.1583 34.746 68.2191 35.5368 68.2095 36.3283C68.2224 37.1431 68.1643 37.9575 68.0359 38.7622Z",fill:"#FF0000"}),(0,dr.jsx)("path",{d:"M65.6686 42.811C64.9768 42.8735 64.2812 42.7449 63.6577 42.4392C63.0342 42.1336 62.5069 41.6627 62.1335 41.078C61.3843 39.6192 61.0332 37.9892 61.1156 36.3519C61.0275 34.7142 61.3789 33.0827 62.1335 31.6258C62.5567 31.0899 63.0961 30.6568 63.7111 30.359C64.3262 30.0612 65.0008 29.9064 65.6844 29.9064C66.368 29.9064 67.0427 30.0612 67.6577 30.359C68.2728 30.6568 68.8122 31.0899 69.2353 31.6258C69.9874 33.0836 70.3386 34.7144 70.2533 36.3519C70.3301 37.9887 69.9793 39.6174 69.2353 41.078C68.8594 41.6678 68.327 42.142 67.6974 42.4479C67.0678 42.7538 66.3655 42.8795 65.6686 42.811ZM65.6686 30.0031C64.9947 29.9402 64.3164 30.0625 63.7072 30.3568C63.0979 30.6512 62.581 31.1063 62.2124 31.673C61.4731 33.1095 61.1274 34.7155 61.2102 36.3283C61.1245 37.964 61.4701 39.5936 62.2124 41.0544C62.6229 41.5769 63.147 41.9993 63.745 42.2898C64.3431 42.5803 64.9995 42.7313 65.6647 42.7313C66.3298 42.7313 66.9863 42.5803 67.5843 42.2898C68.1824 41.9993 68.7065 41.5769 69.117 41.0544C69.8659 39.5958 70.2144 37.9651 70.127 36.3283C70.2116 34.7144 69.8629 33.1073 69.117 31.673C68.7503 31.1064 68.2349 30.651 67.6268 30.3566C67.0188 30.0621 66.3415 29.9399 65.6686 30.0031ZM65.6686 41.0308C65.3597 41.0532 65.0494 41.01 64.7584 40.9041C64.4673 40.7982 64.202 40.632 63.98 40.4164C63.5784 39.9591 63.3181 39.3955 63.2303 38.7938C63.102 37.9863 63.044 37.1693 63.0567 36.3519C63.0476 35.5604 63.1083 34.7697 63.2382 33.9888C63.3492 33.4006 63.6225 32.855 64.0273 32.4134C64.493 32.0079 65.0901 31.7845 65.7081 31.7845C66.3261 31.7845 66.9232 32.0079 67.3889 32.4134C67.7764 32.8615 68.0354 33.4059 68.1385 33.9888C68.2684 34.7697 68.3291 35.5604 68.32 36.3519C68.329 37.1692 68.271 37.9859 68.1464 38.7938C68.0586 39.3955 67.7983 39.9591 67.3968 40.4164C67.1673 40.6317 66.8944 40.7958 66.5965 40.8977C66.2985 40.9995 65.9822 41.0369 65.6686 41.0072V41.0308ZM65.6686 31.8306C65.378 31.8124 65.0869 31.8564 64.8147 31.9596C64.5425 32.0628 64.2956 32.223 64.0904 32.4292C63.7056 32.8762 63.4541 33.422 63.3645 34.0046C63.2297 34.7848 63.169 35.576 63.183 36.3677C63.17 37.1799 63.2281 37.9917 63.3566 38.7938C63.4397 39.3767 63.689 39.9236 64.0747 40.3691C64.2903 40.574 64.546 40.7322 64.8257 40.8339C65.1054 40.9355 65.4031 40.9784 65.7002 40.9599C65.9897 40.9738 66.2789 40.9285 66.5503 40.8269C66.8217 40.7254 67.0694 40.5696 67.2784 40.3691C67.6696 39.9263 67.922 39.3785 68.0043 38.7938C68.1328 37.9917 68.1909 37.1799 68.178 36.3677C68.1881 35.5762 68.1274 34.7853 67.9965 34.0046C67.9069 33.422 67.6553 32.8762 67.2705 32.4292C67.0648 32.2156 66.8149 32.0493 66.5383 31.9418C66.2616 31.8343 65.9649 31.7883 65.6686 31.807V31.8306Z",fill:"#FF0000"}),(0,dr.jsx)("path",{d:"M82.5868 34.6505C82.2264 34.1888 81.7683 33.8123 81.2453 33.5477C80.6335 33.2427 79.9563 33.0913 79.2726 33.1066C78.4664 33.1018 77.6746 33.3201 76.9851 33.7372C76.2956 34.1544 75.7354 34.754 75.3666 35.4696C74.9571 36.2545 74.7509 37.1292 74.7669 38.0139C74.7558 38.9057 74.9616 39.7869 75.3666 40.5818C75.7274 41.2987 76.2719 41.9074 76.9448 42.3462C77.6231 42.7631 78.405 42.9814 79.2016 42.9764C79.886 42.9892 80.5631 42.835 81.1743 42.5274C81.7135 42.2637 82.1837 41.878 82.5474 41.401V42.8188H84.6069V33.2878H82.6105L82.5868 34.6505ZM82.1765 39.7468C82.0012 40.0826 81.759 40.3792 81.4648 40.6183C81.1706 40.8574 80.8306 41.034 80.4656 41.1373C80.1006 41.2405 79.7183 41.2683 79.3422 41.2188C78.9661 41.1693 78.6041 41.0437 78.2783 40.8496C77.8225 40.5778 77.451 40.1852 77.2052 39.7153C76.9255 39.1838 76.7844 38.5905 76.7948 37.9903C76.7815 37.3947 76.9228 36.8058 77.2052 36.281C77.4494 35.8248 77.819 35.4477 78.2704 35.194C78.7027 34.9471 79.1928 34.8193 79.6908 34.8237C80.2021 34.8203 80.7045 34.9573 81.1429 35.2199C81.5814 35.4825 81.9389 35.8605 82.1765 36.3125C82.4615 36.8363 82.6031 37.4259 82.5868 38.0218C82.6011 38.6225 82.4598 39.2166 82.1765 39.7468Z",fill:"#FF0000"}),(0,dr.jsx)("path",{d:"M79.241 43C78.4357 43.0071 77.6448 42.7859 76.9605 42.362C76.266 41.9255 75.7018 41.3107 75.3271 40.5818C74.9156 39.7805 74.707 38.8907 74.7195 37.9903C74.7033 37.0971 74.9123 36.2141 75.3271 35.4224C75.7032 34.7043 76.2706 34.1036 76.9667 33.6867C77.6629 33.2698 78.4608 33.0527 79.2726 33.0594C79.8916 33.0431 80.5064 33.1656 81.0717 33.4178C81.6371 33.6699 82.1386 34.0454 82.5394 34.5166V33.2169H84.6069V42.8425H82.5236V41.5428C82.1668 41.974 81.7232 42.3255 81.2216 42.5747C80.6045 42.871 79.9257 43.0168 79.241 43ZM79.241 33.1539C78.4463 33.1467 77.665 33.3584 76.9829 33.7655C76.3007 34.1727 75.7442 34.7596 75.3744 35.4618C74.9693 36.2423 74.7659 37.1114 74.7826 37.9903C74.7679 38.874 74.9711 39.7477 75.3744 40.5345C75.7328 41.2489 76.2781 41.8532 76.9526 42.2832C77.6216 42.694 78.3925 42.9095 79.1779 42.9055C79.8561 42.9163 80.5271 42.7651 81.1349 42.4644C81.6633 42.2012 82.1247 41.8214 82.4842 41.3538L82.571 41.2356V42.748H84.4727V33.2957H82.6341V34.7687L82.5473 34.6584C82.1907 34.2034 81.7381 33.8323 81.2216 33.5714C80.6147 33.2789 79.9463 33.1357 79.2726 33.1539H79.241ZM79.6592 41.2828C79.1534 41.2857 78.6565 41.1495 78.2231 40.889C77.7584 40.6162 77.3808 40.2175 77.1341 39.739C76.8475 39.2013 76.7035 38.5993 76.7159 37.9903C76.7016 37.3861 76.8458 36.7887 77.1341 36.2574C77.3813 35.8055 77.7467 35.429 78.1914 35.1682C78.6362 34.9074 79.1435 34.772 79.6592 34.7765C80.1667 34.7726 80.6657 34.906 81.1033 35.1625C81.5616 35.4328 81.938 35.8221 82.1922 36.2889C82.4618 36.8284 82.6021 37.4229 82.6021 38.0257C82.6021 38.6286 82.4618 39.2232 82.1922 39.7626C81.9428 40.235 81.5655 40.628 81.1033 40.8969C80.6749 41.1479 80.1875 41.2811 79.6908 41.2828H79.6592ZM79.6592 34.8632C79.1593 34.8615 78.6681 34.9944 78.2376 35.2481C77.807 35.5019 77.4531 35.8668 77.213 36.3046C76.9344 36.822 76.7957 37.403 76.8106 37.9903C76.7965 38.5825 76.9351 39.1684 77.213 39.6917C77.4559 40.1545 77.8217 40.5414 78.2704 40.8102C78.6908 41.0597 79.1702 41.1929 79.6592 41.1962C80.1626 41.1957 80.6563 41.0584 81.0873 40.7989C81.5183 40.5393 81.8702 40.1675 82.1054 39.7232C82.3699 39.1963 82.5077 38.6151 82.5077 38.0257C82.5077 37.4364 82.3699 36.8552 82.1054 36.3283C81.8624 35.8765 81.4992 35.5004 81.0559 35.2413C80.6424 34.9968 80.1713 34.8664 79.6908 34.8632H79.6592Z",fill:"#FF0000"}),(0,dr.jsx)("path",{d:"M93.2238 33.5713C92.5977 33.2564 91.9047 33.0969 91.2037 33.1066C90.6604 33.1072 90.1231 33.2199 89.6255 33.4374C89.1443 33.6409 88.7173 33.9537 88.3787 34.3511V33.2641H86.406V42.7952H88.3787V37.4704C88.331 36.7538 88.5661 36.047 89.0337 35.5012C89.5143 35.0656 90.1402 34.8242 90.7894 34.8242C91.4386 34.8242 92.0645 35.0656 92.5452 35.5012C93.0042 36.051 93.2331 36.7563 93.1843 37.4704V42.7952H95.1413V37.1711C95.1639 36.4024 94.9901 35.6407 94.6363 34.9577C94.3157 34.3644 93.8234 33.8813 93.2238 33.5713Z",fill:"#FF0000"}),(0,dr.jsx)("path",{d:"M95.1649 42.8425H93.1133V37.4705C93.1601 36.7676 92.934 36.0737 92.482 35.5327C92.26 35.307 91.9926 35.1307 91.6975 35.0153C91.4024 34.8999 91.0862 34.8481 90.7697 34.8632C90.4508 34.8488 90.1325 34.9009 89.8349 35.0161C89.5374 35.1314 89.2672 35.3074 89.0416 35.5327C88.5838 36.0708 88.3544 36.7661 88.4024 37.4705V42.8425H86.335V33.2169H88.4024V34.2252C88.7313 33.8676 89.1318 33.5831 89.5781 33.3902C90.0913 33.1691 90.6448 33.0564 91.2037 33.0594C91.9108 33.0483 92.6099 33.2107 93.2396 33.532C93.8418 33.8485 94.3362 34.3365 94.6599 34.9341C95.0097 35.6271 95.1831 36.3954 95.1649 37.1711V42.8425ZM93.208 42.748H95.0703V37.1711C95.0927 36.411 94.9216 35.6576 94.5731 34.9813C94.2659 34.3975 93.7867 33.9219 93.2001 33.6186C92.5825 33.3036 91.8971 33.144 91.2037 33.1539C90.6611 33.1532 90.124 33.2631 89.6255 33.4769C89.1517 33.6779 88.7325 33.9883 88.4024 34.3827L88.3235 34.4851V33.3114H86.4375V42.7637H88.3235V37.4862C88.2746 36.7585 88.5124 36.0406 88.9863 35.4855C89.474 35.0388 90.1118 34.7909 90.7736 34.7909C91.4355 34.7909 92.0733 35.0388 92.5609 35.4855C93.0283 36.0438 93.2628 36.7601 93.2159 37.4862L93.208 42.748Z",fill:"#FF0000"}),(0,dr.jsx)("path",{d:"M103.545 33.7131C102.779 33.3148 101.927 33.1068 101.063 33.1068C100.199 33.1068 99.3482 33.3148 98.5818 33.7131C97.847 34.1132 97.242 34.7144 96.8379 35.446C96.3954 36.2315 96.172 37.1209 96.1908 38.0218C96.1741 38.922 96.3887 39.8115 96.8142 40.6054C97.2137 41.3325 97.8097 41.9329 98.5344 42.3383C99.2817 42.7537 100.125 42.9656 100.981 42.9527C101.853 42.9616 102.713 42.7503 103.482 42.3383C104.231 41.9373 104.852 41.334 105.273 40.5975C105.724 39.8148 105.953 38.9245 105.936 38.0218C105.954 37.1221 105.733 36.2336 105.297 35.446C104.888 34.7157 104.28 34.1152 103.545 33.7131ZM103.49 39.7862C103.242 40.2451 102.867 40.6226 102.409 40.8732C101.972 41.1157 101.48 41.2431 100.981 41.2434C100.608 41.2521 100.238 41.1815 99.8953 41.0362C99.5524 40.8908 99.2444 40.6741 98.9921 40.4006C98.4329 39.7444 98.1501 38.8974 98.203 38.0375C98.1841 37.43 98.3142 36.827 98.5818 36.281C98.8147 35.8292 99.1737 35.4544 99.6155 35.2019C100.05 34.964 100.537 34.8393 101.032 34.8393C101.527 34.8393 102.014 34.964 102.448 35.2019C102.911 35.4403 103.293 35.8104 103.545 36.2652C103.828 36.8065 103.967 37.4115 103.948 38.0218C103.954 38.6399 103.796 39.2486 103.49 39.7862Z",fill:"#FF0000"}),(0,dr.jsx)("path",{d:"M100.981 43C100.117 43.0091 99.2664 42.7948 98.5108 42.3777C97.7792 41.969 97.1776 41.3631 96.7748 40.6291C96.355 39.8253 96.1359 38.9322 96.1359 38.0257C96.1359 37.1193 96.355 36.2262 96.7748 35.4224C97.1879 34.6828 97.8038 34.0762 98.5503 33.6738C99.322 33.2701 100.18 33.0592 101.052 33.0592C101.923 33.0592 102.781 33.2701 103.553 33.6738C104.294 34.0812 104.906 34.6867 105.321 35.4224C105.759 36.2179 105.982 37.1139 105.968 38.0218C105.982 38.9327 105.751 39.8307 105.297 40.6212C104.87 41.3631 104.244 41.9714 103.49 42.3777C102.718 42.7899 101.856 43.0037 100.981 43ZM101.067 33.1539C100.21 33.1444 99.363 33.3503 98.6055 33.7525C97.8795 34.1518 97.2807 34.7468 96.8774 35.4697C96.4422 36.2491 96.2216 37.1297 96.2382 38.0218C96.2213 38.9146 96.4361 39.7965 96.8616 40.5818C97.2529 41.303 97.8412 41.8984 98.5582 42.299C99.2994 42.7073 100.134 42.9163 100.981 42.9055C101.845 42.9142 102.697 42.7056 103.458 42.299C104.2 41.9009 104.815 41.3033 105.234 40.5739C105.659 39.7901 105.881 38.913 105.881 38.0218C105.881 37.1307 105.659 36.2535 105.234 35.4697C104.831 34.7468 104.232 34.1518 103.506 33.7525C102.756 33.3538 101.917 33.148 101.067 33.1539ZM100.981 41.2828C100.603 41.2936 100.227 41.2232 99.8781 41.0764C99.5296 40.9296 99.2167 40.71 98.9606 40.4322C98.3948 39.761 98.112 38.897 98.1715 38.0218C98.1553 37.4061 98.288 36.7954 98.5582 36.2416C98.7962 35.7842 99.1604 35.4043 99.6077 35.1467C100.045 34.8989 100.541 34.7712 101.044 34.7765C101.549 34.7709 102.048 34.8986 102.488 35.1467C102.944 35.4011 103.316 35.7812 103.561 36.2416C103.846 36.791 103.987 37.4034 103.971 38.0218C103.991 38.645 103.844 39.2621 103.545 39.8099C103.29 40.2746 102.91 40.6593 102.448 40.9205C101.998 41.1641 101.493 41.2888 100.981 41.2828ZM101.028 34.8632C100.542 34.8626 100.063 34.9874 99.6392 35.2255C99.2033 35.4708 98.8514 35.8413 98.6292 36.2889C98.3608 36.8262 98.2305 37.4218 98.2504 38.0218C98.1958 38.882 98.4788 39.7295 99.0395 40.3849C99.2929 40.6448 99.5978 40.8491 99.9347 40.9848C100.272 41.1204 100.633 41.1844 100.996 41.1726C101.488 41.172 101.971 41.0474 102.401 40.8102C102.85 40.5604 103.219 40.1891 103.466 39.739C103.751 39.2038 103.893 38.6041 103.877 37.9982C103.894 37.3966 103.758 36.8004 103.482 36.2653C103.247 35.8193 102.888 35.4502 102.448 35.2019C102.011 34.9704 101.523 34.8538 101.028 34.8632Z",fill:"#FF0000"}),(0,dr.jsx)("path",{d:"M113.717 38.6599C113.401 38.2976 113.007 38.012 112.565 37.8249C112.01 37.5979 111.44 37.4084 110.86 37.2577C110.339 37.1081 109.945 36.99 109.677 36.8876C109.427 36.7987 109.199 36.6593 109.006 36.4779C108.912 36.4005 108.838 36.3027 108.789 36.1921C108.74 36.0814 108.717 35.9609 108.722 35.8399C108.719 35.684 108.756 35.53 108.829 35.3922C108.902 35.2545 109.009 35.1375 109.14 35.0522C109.5 34.8349 109.919 34.7332 110.339 34.7608C110.791 34.736 111.238 34.8697 111.602 35.1389C111.756 35.2632 111.882 35.4187 111.972 35.5952C112.062 35.7717 112.113 35.9651 112.123 36.1628H114.095C114.094 35.7335 113.998 35.3098 113.814 34.9218C113.63 34.5338 113.362 34.1911 113.03 33.918C112.277 33.3562 111.349 33.0773 110.41 33.1303C109.748 33.1196 109.09 33.2428 108.477 33.4926C107.961 33.6998 107.513 34.0461 107.183 34.4929C106.89 34.8962 106.733 35.3814 106.733 35.8793C106.709 36.4257 106.883 36.9626 107.222 37.3916C107.542 37.7617 107.945 38.0506 108.398 38.2345C108.97 38.4625 109.555 38.6546 110.15 38.8095C110.692 38.9516 111.22 39.1414 111.728 39.3766C111.882 39.4431 112.012 39.5533 112.103 39.6934C112.195 39.8335 112.243 39.9973 112.241 40.1643C112.233 40.3226 112.188 40.4766 112.108 40.6137C112.028 40.7507 111.917 40.8667 111.783 40.952C111.394 41.1846 110.943 41.2945 110.489 41.2671C110.015 41.2838 109.549 41.1424 109.164 40.8654C109 40.747 108.863 40.5951 108.762 40.42C108.662 40.2448 108.599 40.0502 108.58 39.8492H106.536C106.553 40.4186 106.746 40.9688 107.088 41.4246C107.457 41.9065 107.943 42.2862 108.501 42.5274C109.136 42.8104 109.826 42.9502 110.521 42.937C111.184 42.9527 111.842 42.8292 112.454 42.5747C112.967 42.365 113.41 42.0156 113.732 41.5664C114.032 41.143 114.19 40.6355 114.182 40.1171C114.203 39.5919 114.038 39.0762 113.717 38.6599Z",fill:"#FF0000"}),(0,dr.jsx)("path",{d:"M110.56 43C109.86 43.0083 109.167 42.8687 108.524 42.5904C107.96 42.3431 107.468 41.9552 107.096 41.464C106.75 41.0092 106.552 40.4594 106.528 39.8887V39.8414H108.666V39.8887C108.684 40.0822 108.743 40.2696 108.84 40.4382C108.936 40.6068 109.068 40.7525 109.227 40.8654C109.605 41.1362 110.063 41.2747 110.529 41.2592C110.971 41.2865 111.411 41.1794 111.791 40.952C111.927 40.8702 112.039 40.7545 112.117 40.6164C112.194 40.4784 112.234 40.3226 112.233 40.1643C112.246 39.9983 112.205 39.8326 112.117 39.6911C112.029 39.5495 111.898 39.4395 111.744 39.3766C111.235 39.144 110.707 38.9543 110.166 38.8095C109.569 38.6542 108.981 38.4649 108.406 38.2424C107.949 38.0504 107.543 37.7536 107.222 37.3759C106.863 36.9322 106.683 36.3702 106.717 35.8005C106.718 35.2918 106.878 34.7959 107.175 34.3827C107.513 33.9347 107.965 33.5863 108.485 33.3744C109.105 33.119 109.771 32.993 110.442 33.0042C111.397 32.962 112.336 33.2577 113.093 33.8392C113.428 34.1177 113.698 34.4656 113.885 34.8587C114.071 35.2517 114.17 35.6806 114.174 36.1156V36.1629H112.107V36.1156C112.098 35.9249 112.049 35.7384 111.962 35.5685C111.875 35.3986 111.752 35.2494 111.602 35.131C111.247 34.8693 110.812 34.7385 110.371 34.7608C109.962 34.7343 109.554 34.8333 109.203 35.0443C109.078 35.1234 108.976 35.2329 108.906 35.3625C108.835 35.492 108.799 35.6374 108.801 35.7848C108.798 35.8993 108.821 36.0128 108.868 36.1176C108.914 36.2223 108.983 36.3158 109.069 36.3913C109.256 36.57 109.48 36.7069 109.724 36.793C110 36.8875 110.395 37.0136 110.9 37.1632C111.483 37.3082 112.055 37.4951 112.612 37.7225C113.061 37.9178 113.462 38.2081 113.788 38.5732C114.128 39.0005 114.309 39.5321 114.301 40.0777C114.306 40.6067 114.146 41.1242 113.843 41.5586C113.513 42.0089 113.065 42.3603 112.549 42.5747C111.924 42.8555 111.246 43.0005 110.56 43ZM106.615 39.9201C106.644 40.4595 106.833 40.9779 107.159 41.4089C107.522 41.888 108.004 42.2652 108.556 42.5037C109.815 43.0313 111.23 43.0483 112.501 42.5511C113.002 42.3392 113.435 41.9962 113.756 41.5586C114.049 41.141 114.203 40.6425 114.198 40.1328C114.211 39.6096 114.038 39.0987 113.709 38.6914C113.391 38.3505 113.004 38.0818 112.573 37.9037C112.018 37.6773 111.449 37.4904 110.868 37.3444C110.355 37.1947 109.961 37.0687 109.684 36.9742C109.431 36.8796 109.198 36.7379 108.998 36.5567C108.903 36.4715 108.828 36.3668 108.778 36.2499C108.727 36.133 108.703 36.0065 108.706 35.8793C108.706 35.7222 108.746 35.5677 108.822 35.4301C108.898 35.2925 109.007 35.1761 109.14 35.0916C109.506 34.865 109.933 34.7577 110.363 34.7844C110.827 34.7626 111.284 34.9018 111.657 35.1782C111.81 35.3014 111.935 35.4544 112.026 35.6278C112.117 35.8012 112.171 35.9913 112.186 36.1865H114.072C114.062 35.7735 113.964 35.3674 113.784 34.9953C113.605 34.6231 113.348 34.2934 113.03 34.0282C112.283 33.4712 111.365 33.1925 110.434 33.2406C109.777 33.2271 109.124 33.3505 108.517 33.6029C108.011 33.8048 107.571 34.1429 107.246 34.5796C106.958 34.9755 106.803 35.4528 106.804 35.9423C106.776 36.4783 106.947 37.0058 107.286 37.4232C107.599 37.7876 107.994 38.0735 108.438 38.2581C109.009 38.4774 109.591 38.6666 110.182 38.8252C110.742 38.9674 111.289 39.1599 111.815 39.4003C111.977 39.4706 112.115 39.5875 112.211 39.7362C112.306 39.8849 112.355 40.0586 112.352 40.2352C112.351 40.4075 112.307 40.5768 112.223 40.7271C112.139 40.8774 112.017 41.0036 111.87 41.0938C111.475 41.3356 111.015 41.4511 110.552 41.4246C110.066 41.4401 109.588 41.2932 109.195 41.0072C109.033 40.8898 108.897 40.7405 108.795 40.5684C108.693 40.3963 108.628 40.2051 108.603 40.0068L106.615 39.9201Z",fill:"#FF0000"})]}),(0,dr.jsx)("defs",{children:(0,dr.jsx)("clipPath",{id:"clip0_75_148",children:(0,dr.jsx)("rect",{width:"165",height:"43",fill:"white"})})})]})}),(0,dr.jsx)("p",{children:"Midias Sociais"}),(0,dr.jsxs)("div",{className:"midiasSociaisIcons",children:[(0,dr.jsx)(ge,{to:"https://api.whatsapp.com/send/?phone=5521995719914&text&type=phone_number&app_absent=0",children:(0,dr.jsxs)("svg",{xmlns:"http://www.w3.org/2000/svg",width:"25",height:"25",viewBox:"0 0 16 16",fill:"none",children:[(0,dr.jsxs)("g",{clipPath:"url(#clip0_89_709)",children:[(0,dr.jsx)("path",{d:"M11.42 9.48955C11.23 9.39955 10.32 8.94955 10.15 8.87955C9.97998 8.80955 9.85998 8.78955 9.72998 8.97955C9.59998 9.16955 9.24998 9.57955 9.13998 9.70955C9.02998 9.83955 8.92998 9.84955 8.73998 9.70955C8.19426 9.49054 7.69025 9.17935 7.24998 8.78955C6.85143 8.41431 6.51402 7.97905 6.24998 7.49955C6.13998 7.31955 6.24998 7.21955 6.32998 7.11955C6.40998 7.01955 6.50998 6.90955 6.60998 6.79955C6.68311 6.70442 6.74361 6.60022 6.78998 6.48955C6.81479 6.43808 6.82767 6.38168 6.82767 6.32455C6.82767 6.26741 6.81479 6.21102 6.78998 6.15955C6.78998 6.06955 6.36998 5.15955 6.20998 4.78955C6.04998 4.41955 5.90998 4.46955 5.79998 4.46955H5.39998C5.20943 4.47698 5.02961 4.55969 4.89998 4.69955C4.69074 4.89922 4.525 5.13996 4.41315 5.40668C4.3013 5.6734 4.24575 5.96036 4.24998 6.24955C4.30113 6.95953 4.56219 7.63828 4.99998 8.19955C5.80335 9.39298 6.90245 10.3577 8.18998 10.9995C8.62998 11.1895 8.96998 11.2995 9.23998 11.3895C9.61912 11.5041 10.0199 11.5281 10.41 11.4595C10.6691 11.407 10.9146 11.3018 11.1314 11.1504C11.3481 10.999 11.5314 10.8047 11.67 10.5795C11.7853 10.3015 11.8233 9.99744 11.78 9.69955C11.73 9.62955 11.61 9.57955 11.42 9.48955Z",fill:"black"}),(0,dr.jsx)("path",{d:"M13.2901 2.67977C12.5985 1.98165 11.7741 1.42909 10.8656 1.05468C9.95705 0.68027 8.98272 0.491589 8.00009 0.499767C6.69838 0.506579 5.42124 0.854799 4.29623 1.50965C3.17122 2.1645 2.2377 3.10306 1.58893 4.23158C0.940149 5.36011 0.598818 6.63911 0.599022 7.94083C0.599225 9.24255 0.940958 10.5214 1.59009 11.6498L0.590088 15.4998L4.53009 14.4998C5.61932 15.0925 6.84004 15.4019 8.08009 15.3998H8.00009C9.47801 15.4094 10.9253 14.9786 12.1574 14.1624C13.3895 13.3462 14.3506 12.1815 14.9182 10.8169C15.4857 9.45222 15.6339 7.94947 15.344 6.50024C15.054 5.05102 14.339 3.72099 13.2901 2.67977ZM8.00009 14.1198C6.89064 14.1206 5.80182 13.8199 4.85009 13.2498L4.63009 13.1198L2.29009 13.7298L2.91009 11.4498L2.77009 11.2198C1.97144 9.9336 1.6727 8.39902 1.93054 6.90718C2.18837 5.41535 2.98485 4.07005 4.16885 3.12655C5.35286 2.18305 6.842 1.70699 8.35375 1.78868C9.8655 1.87038 11.2947 2.50416 12.3701 3.56977C12.9466 4.14166 13.4036 4.82257 13.7143 5.57284C14.0251 6.3231 14.1834 7.1277 14.1801 7.93977C14.1774 9.57799 13.5255 11.1484 12.3671 12.3068C11.2087 13.4652 9.63831 14.1171 8.00009 14.1198Z",fill:"black"})]}),(0,dr.jsx)("defs",{children:(0,dr.jsx)("clipPath",{id:"clip0_89_709",children:(0,dr.jsx)("rect",{width:"16",height:"16",fill:"white"})})})]})}),(0,dr.jsx)(ge,{to:"https://www.instagram.com/charloterio/",children:(0,dr.jsxs)("svg",{xmlns:"http://www.w3.org/2000/svg",width:"25",height:"25",viewBox:"0 0 16 16",fill:"none",children:[(0,dr.jsx)("g",{clipPath:"url(#clip0_89_703)",children:(0,dr.jsx)("path",{fillRule:"evenodd",clipRule:"evenodd",d:"M4.69572 0.0981834C3.39342 0.156943 2.26465 0.475341 1.3532 1.38295C0.438556 2.29533 0.124113 3.42856 0.0652067 4.71732C0.0285891 5.52171 -0.185531 11.5986 0.435373 13.1923C0.854085 14.2675 1.67875 15.0941 2.76374 15.5142C3.27002 15.7111 3.84795 15.8444 4.69572 15.8833C11.7844 16.2041 14.4121 16.0295 15.5201 13.1923C15.7168 12.6873 15.8521 12.1099 15.8895 11.2642C16.2135 4.15737 15.837 2.61692 14.6015 1.38295C13.6216 0.405461 12.469 -0.259937 4.69572 0.0981834ZM4.76098 14.454C3.98485 14.4191 3.56376 14.2898 3.28276 14.181C2.57589 13.9063 2.04493 13.3775 1.7719 12.6747C1.29905 11.4638 1.45588 5.71242 1.49807 4.78178C1.53946 3.87019 1.72414 3.03707 2.36733 2.39389C3.16336 1.59982 4.19182 1.21066 11.1945 1.5267C12.1083 1.56799 12.9434 1.75229 13.5882 2.39389C14.3842 3.18794 14.779 4.22432 14.4574 11.2001C14.4224 11.9743 14.2927 12.3944 14.1836 12.6747C13.4632 14.5209 11.8059 14.7772 4.76098 14.454ZM11.2717 3.7517C11.2717 4.27737 11.6992 4.70482 12.227 4.70482C12.7547 4.70482 13.183 4.27737 13.183 3.7517C13.183 3.22604 12.7547 2.79896 12.227 2.79896C11.6992 2.79896 11.2717 3.22604 11.2717 3.7517ZM3.89013 7.99037C3.89013 10.2423 5.72021 12.0681 7.97776 12.0681C10.2353 12.0681 12.0654 10.2423 12.0654 7.99037C12.0654 5.73842 10.2353 3.91381 7.97776 3.91381C5.72021 3.91381 3.89013 5.73842 3.89013 7.99037ZM5.32458 7.99037C5.32458 6.52931 6.51226 5.34389 7.97776 5.34389C9.44325 5.34389 10.6309 6.52931 10.6309 7.99037C10.6309 9.45224 9.44325 10.638 7.97776 10.638C6.51226 10.638 5.32458 9.45224 5.32458 7.99037Z",fill:"black"})}),(0,dr.jsx)("defs",{children:(0,dr.jsx)("clipPath",{id:"clip0_89_703",children:(0,dr.jsx)("rect",{width:"16",height:"16",fill:"white"})})})]})}),(0,dr.jsx)(ge,{to:"https://sac@charlote.com.br/",children:(0,dr.jsx)("svg",{xmlns:"http://www.w3.org/2000/svg",width:"27",height:"45",viewBox:"0 0 16 18",fill:"none",children:(0,dr.jsx)("path",{d:"M15.9587 3.94719C15.8866 3.53846 15.7255 3.16443 15.5005 2.85544C15.4531 2.78812 15.4035 2.72783 15.3498 2.66753C14.9512 2.2169 14.3918 1.93579 13.7806 1.93579H2.21941C1.60825 1.93579 1.05081 2.2169 0.650344 2.66753C0.59675 2.72783 0.547187 2.78812 0.499625 2.85544C0.274531 3.1644 0.113437 3.53846 0.0433125 3.94719C0.0145 4.10493 0 4.26795 0 4.43276V13.5675C0 13.918 0.0660625 14.2548 0.183875 14.559C0.293156 14.8494 0.454281 15.1122 0.650312 15.3325C0.7 15.3883 0.749344 15.4395 0.803187 15.4905C1.18712 15.8482 1.68272 16.0642 2.21941 16.0642H13.7806C14.3175 16.0642 14.8152 15.8482 15.1969 15.4882C15.2506 15.4395 15.3002 15.3883 15.3498 15.3325C15.5457 15.1122 15.7068 14.8494 15.8183 14.559V14.5568C15.9361 14.2526 16 13.918 16 13.5676V4.43276C16 4.26795 15.9857 4.10493 15.9587 3.94719ZM1.45341 3.57087C1.65169 3.34805 1.91797 3.21316 2.21941 3.21316H13.7806C14.082 3.21316 14.3507 3.34805 14.5466 3.57087C14.5817 3.61056 14.6147 3.65479 14.6438 3.69874L8.58425 9.63997C8.41713 9.80474 8.21069 9.88613 8 9.88613C7.79144 9.88613 7.58512 9.80474 7.41578 9.63997L1.3585 3.69621C1.38531 3.65226 1.41834 3.61056 1.45341 3.57087ZM1.13544 13.5675V5.01805L5.52056 9.3217L1.13766 13.6208C1.13544 13.6045 1.13544 13.5861 1.13544 13.5675ZM13.7806 14.7866H2.21941C2.02313 14.7866 1.83947 14.7286 1.68272 14.6266L6.30703 10.0929L6.73875 10.5154C7.10003 10.8686 7.55213 11.0474 8 11.0474C8.45019 11.0474 8.90225 10.8686 9.2635 10.5154L9.695 10.0929L14.3175 14.6266C14.1605 14.7286 13.9769 14.7866 13.7806 14.7866ZM14.8646 13.5675C14.8646 13.5861 14.8646 13.6045 14.8624 13.6208L10.4796 9.32419L14.8646 5.02033V13.5675Z",fill:"black"})})})]}),(0,dr.jsxs)("div",{className:"infoProdutos",children:[(0,dr.jsx)("p",{children:"Informações do Produto"}),(0,dr.jsx)("a",{href:"/",children:"Baixe a nossa tabela de precos aqui!"})]}),(0,dr.jsxs)("div",{className:"endereco",children:[(0,dr.jsx)("p",{children:"Endereço"}),(0,dr.jsx)("a",{children:"Estrada do Cafundá, 406 - Jacarepaguá. Rio de Janeiro, RJ - 22730-540"})]}),(0,dr.jsx)("div",{className:"copyRight",children:(0,dr.jsx)("a",{children:"Copyright © 2025 Charlote Rio. Todos os direitos reservados. Todas as marcas registradas são propriedade dos seus respectivos donos."})})]})};var Pr,Er;function _r(e,n){return n||(n=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(n)}}))}const Dr={ButtonContainer:tr.div(Pr||(Pr=_r(["\n  position: fixed;\n  bottom: 20px;\n  right: 20px;\n  background-color: #25d366;\n  width: 60px;\n  height: 60px;\n  border-radius: 50%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.3);\n  cursor: pointer;\n  z-index: 1000;\n  transition: transform 0.2s ease-in-out;\n\n  &:hover {\n    transform: scale(1.1);\n  }\n"]))),WhatsAppIcon:tr.img(Er||(Er=_r(["\n  width: 35px;\n  height: 35px;\n"])))},Ir=function(){return(0,dr.jsx)(Dr.ButtonContainer,{onClick:function(){window.open("https://wa.me/".concat("5521995719914"),"_blank")},children:(0,dr.jsx)(gr,{})})};var xr,Or=tr.div(xr||(xr=function(e,n){return n||(n=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(n)}}))}(["\n    margin: 0 auto; /* Centraliza a página */\n    max-width: 100%; /* Garante que não ultrapasse telas menores */\n"])));const kr=function(e){return(0,dr.jsxs)(dr.Fragment,{children:[(0,dr.jsx)(br,{}),(0,dr.jsx)(Or,{children:e.children}),(0,dr.jsx)(Sr,{}),(0,dr.jsx)(Ir,{})]})};var Lr,Ur=tr.header(Lr||(Lr=function(e,n){return n||(n=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(n)}}))}(["\n\n    .swiper-slide {\n        height: auto;\n    }\n    \n    img{\n        width: 100%;\n        object-fit: cover;\n        height: 100%;\n    }\n"])));function Tr(e){return null!==e&&"object"==typeof e&&"constructor"in e&&e.constructor===Object}function Rr(e,n){void 0===e&&(e={}),void 0===n&&(n={}),Object.keys(n).forEach((t=>{void 0===e[t]?e[t]=n[t]:Tr(n[t])&&Tr(e[t])&&Object.keys(n[t]).length>0&&Rr(e[t],n[t])}))}const Fr={body:{},addEventListener(){},removeEventListener(){},activeElement:{blur(){},nodeName:""},querySelector:()=>null,querySelectorAll:()=>[],getElementById:()=>null,createEvent:()=>({initEvent(){}}),createElement:()=>({children:[],childNodes:[],style:{},setAttribute(){},getElementsByTagName:()=>[]}),createElementNS:()=>({}),importNode:()=>null,location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""}};function Mr(){const e="undefined"!=typeof document?document:{};return Rr(e,Fr),e}const Nr={document:Fr,navigator:{userAgent:""},location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""},history:{replaceState(){},pushState(){},go(){},back(){}},CustomEvent:function(){return this},addEventListener(){},removeEventListener(){},getComputedStyle:()=>({getPropertyValue:()=>""}),Image(){},Date(){},screen:{},setTimeout(){},clearTimeout(){},matchMedia:()=>({}),requestAnimationFrame:e=>"undefined"==typeof setTimeout?(e(),null):setTimeout(e,0),cancelAnimationFrame(e){"undefined"!=typeof setTimeout&&clearTimeout(e)}};function Wr(){const e="undefined"!=typeof window?window:{};return Rr(e,Nr),e}function jr(e){return void 0===e&&(e=""),e.trim().split(" ").filter((e=>!!e.trim()))}function Br(e,n){return void 0===n&&(n=0),setTimeout(e,n)}function zr(){return Date.now()}function Vr(e){return"object"==typeof e&&null!==e&&e.constructor&&"Object"===Object.prototype.toString.call(e).slice(8,-1)}function Hr(e){return"undefined"!=typeof window&&void 0!==window.HTMLElement?e instanceof HTMLElement:e&&(1===e.nodeType||11===e.nodeType)}function Jr(){const e=Object(arguments.length<=0?void 0:arguments[0]),n=["__proto__","constructor","prototype"];for(let t=1;t<arguments.length;t+=1){const r=t<0||arguments.length<=t?void 0:arguments[t];if(null!=r&&!Hr(r)){const t=Object.keys(Object(r)).filter((e=>n.indexOf(e)<0));for(let n=0,i=t.length;n<i;n+=1){const i=t[n],a=Object.getOwnPropertyDescriptor(r,i);void 0!==a&&a.enumerable&&(Vr(e[i])&&Vr(r[i])?r[i].__swiper__?e[i]=r[i]:Jr(e[i],r[i]):!Vr(e[i])&&Vr(r[i])?(e[i]={},r[i].__swiper__?e[i]=r[i]:Jr(e[i],r[i])):e[i]=r[i])}}}return e}function Gr(e,n,t){e.style.setProperty(n,t)}function $r(e){let{swiper:n,targetPosition:t,side:r}=e;const i=Wr(),a=-n.translate;let s,o=null;const l=n.params.speed;n.wrapperEl.style.scrollSnapType="none",i.cancelAnimationFrame(n.cssModeFrameID);const d=t>a?"next":"prev",c=(e,n)=>"next"===d&&e>=n||"prev"===d&&e<=n,u=()=>{s=(new Date).getTime(),null===o&&(o=s);const e=Math.max(Math.min((s-o)/l,1),0),d=.5-Math.cos(e*Math.PI)/2;let p=a+d*(t-a);if(c(p,t)&&(p=t),n.wrapperEl.scrollTo({[r]:p}),c(p,t))return n.wrapperEl.style.overflow="hidden",n.wrapperEl.style.scrollSnapType="",setTimeout((()=>{n.wrapperEl.style.overflow="",n.wrapperEl.scrollTo({[r]:p})})),void i.cancelAnimationFrame(n.cssModeFrameID);n.cssModeFrameID=i.requestAnimationFrame(u)};u()}function Yr(e,n){void 0===n&&(n="");const t=Wr(),r=[...e.children];return t.HTMLSlotElement&&e instanceof HTMLSlotElement&&r.push(...e.assignedElements()),n?r.filter((e=>e.matches(n))):r}function qr(e){try{return void console.warn(e)}catch(e){}}function Zr(e,n){void 0===n&&(n=[]);const t=document.createElement(e);return t.classList.add(...Array.isArray(n)?n:jr(n)),t}function Qr(e,n){return Wr().getComputedStyle(e,null).getPropertyValue(n)}function Kr(e){let n,t=e;if(t){for(n=0;null!==(t=t.previousSibling);)1===t.nodeType&&(n+=1);return n}}function Xr(e,n){const t=[];let r=e.parentElement;for(;r;)n?r.matches(n)&&t.push(r):t.push(r),r=r.parentElement;return t}function ei(e,n,t){const r=Wr();return t?e["width"===n?"offsetWidth":"offsetHeight"]+parseFloat(r.getComputedStyle(e,null).getPropertyValue("width"===n?"margin-right":"margin-top"))+parseFloat(r.getComputedStyle(e,null).getPropertyValue("width"===n?"margin-left":"margin-bottom")):e.offsetWidth}function ni(e){return(Array.isArray(e)?e:[e]).filter((e=>!!e))}let ti,ri,ii;function ai(){return ti||(ti=function(){const e=Wr(),n=Mr();return{smoothScroll:n.documentElement&&n.documentElement.style&&"scrollBehavior"in n.documentElement.style,touch:!!("ontouchstart"in e||e.DocumentTouch&&n instanceof e.DocumentTouch)}}()),ti}function si(e){return void 0===e&&(e={}),ri||(ri=function(e){let{userAgent:n}=void 0===e?{}:e;const t=ai(),r=Wr(),i=r.navigator.platform,a=n||r.navigator.userAgent,s={ios:!1,android:!1},o=r.screen.width,l=r.screen.height,d=a.match(/(Android);?[\s\/]+([\d.]+)?/);let c=a.match(/(iPad).*OS\s([\d_]+)/);const u=a.match(/(iPod)(.*OS\s([\d_]+))?/),p=!c&&a.match(/(iPhone\sOS|iOS)\s([\d_]+)/),m="Win32"===i;let h="MacIntel"===i;return!c&&h&&t.touch&&["1024x1366","1366x1024","834x1194","1194x834","834x1112","1112x834","768x1024","1024x768","820x1180","1180x820","810x1080","1080x810"].indexOf(`${o}x${l}`)>=0&&(c=a.match(/(Version)\/([\d.]+)/),c||(c=[0,1,"13_0_0"]),h=!1),d&&!m&&(s.os="android",s.android=!0),(c||p||u)&&(s.os="ios",s.ios=!0),s}(e)),ri}var oi={on(e,n,t){const r=this;if(!r.eventsListeners||r.destroyed)return r;if("function"!=typeof n)return r;const i=t?"unshift":"push";return e.split(" ").forEach((e=>{r.eventsListeners[e]||(r.eventsListeners[e]=[]),r.eventsListeners[e][i](n)})),r},once(e,n,t){const r=this;if(!r.eventsListeners||r.destroyed)return r;if("function"!=typeof n)return r;function i(){r.off(e,i),i.__emitterProxy&&delete i.__emitterProxy;for(var t=arguments.length,a=new Array(t),s=0;s<t;s++)a[s]=arguments[s];n.apply(r,a)}return i.__emitterProxy=n,r.on(e,i,t)},onAny(e,n){const t=this;if(!t.eventsListeners||t.destroyed)return t;if("function"!=typeof e)return t;const r=n?"unshift":"push";return t.eventsAnyListeners.indexOf(e)<0&&t.eventsAnyListeners[r](e),t},offAny(e){const n=this;if(!n.eventsListeners||n.destroyed)return n;if(!n.eventsAnyListeners)return n;const t=n.eventsAnyListeners.indexOf(e);return t>=0&&n.eventsAnyListeners.splice(t,1),n},off(e,n){const t=this;return!t.eventsListeners||t.destroyed?t:t.eventsListeners?(e.split(" ").forEach((e=>{void 0===n?t.eventsListeners[e]=[]:t.eventsListeners[e]&&t.eventsListeners[e].forEach(((r,i)=>{(r===n||r.__emitterProxy&&r.__emitterProxy===n)&&t.eventsListeners[e].splice(i,1)}))})),t):t},emit(){const e=this;if(!e.eventsListeners||e.destroyed)return e;if(!e.eventsListeners)return e;let n,t,r;for(var i=arguments.length,a=new Array(i),s=0;s<i;s++)a[s]=arguments[s];return"string"==typeof a[0]||Array.isArray(a[0])?(n=a[0],t=a.slice(1,a.length),r=e):(n=a[0].events,t=a[0].data,r=a[0].context||e),t.unshift(r),(Array.isArray(n)?n:n.split(" ")).forEach((n=>{e.eventsAnyListeners&&e.eventsAnyListeners.length&&e.eventsAnyListeners.forEach((e=>{e.apply(r,[n,...t])})),e.eventsListeners&&e.eventsListeners[n]&&e.eventsListeners[n].forEach((e=>{e.apply(r,t)}))})),e}};const li=(e,n,t)=>{n&&!e.classList.contains(t)?e.classList.add(t):!n&&e.classList.contains(t)&&e.classList.remove(t)},di=(e,n,t)=>{n&&!e.classList.contains(t)?e.classList.add(t):!n&&e.classList.contains(t)&&e.classList.remove(t)},ci=(e,n)=>{if(!e||e.destroyed||!e.params)return;const t=n.closest(e.isElement?"swiper-slide":`.${e.params.slideClass}`);if(t){let n=t.querySelector(`.${e.params.lazyPreloaderClass}`);!n&&e.isElement&&(t.shadowRoot?n=t.shadowRoot.querySelector(`.${e.params.lazyPreloaderClass}`):requestAnimationFrame((()=>{t.shadowRoot&&(n=t.shadowRoot.querySelector(`.${e.params.lazyPreloaderClass}`),n&&n.remove())}))),n&&n.remove()}},ui=(e,n)=>{if(!e.slides[n])return;const t=e.slides[n].querySelector('[loading="lazy"]');t&&t.removeAttribute("loading")},pi=e=>{if(!e||e.destroyed||!e.params)return;let n=e.params.lazyPreloadPrevNext;const t=e.slides.length;if(!t||!n||n<0)return;n=Math.min(n,t);const r="auto"===e.params.slidesPerView?e.slidesPerViewDynamic():Math.ceil(e.params.slidesPerView),i=e.activeIndex;if(e.params.grid&&e.params.grid.rows>1){const t=i,a=[t-n];return a.push(...Array.from({length:n}).map(((e,n)=>t+r+n))),void e.slides.forEach(((n,t)=>{a.includes(n.column)&&ui(e,t)}))}const a=i+r-1;if(e.params.rewind||e.params.loop)for(let r=i-n;r<=a+n;r+=1){const n=(r%t+t)%t;(n<i||n>a)&&ui(e,n)}else for(let r=Math.max(i-n,0);r<=Math.min(a+n,t-1);r+=1)r!==i&&(r>a||r<i)&&ui(e,r)};var mi={updateSize:function(){const e=this;let n,t;const r=e.el;n=void 0!==e.params.width&&null!==e.params.width?e.params.width:r.clientWidth,t=void 0!==e.params.height&&null!==e.params.height?e.params.height:r.clientHeight,0===n&&e.isHorizontal()||0===t&&e.isVertical()||(n=n-parseInt(Qr(r,"padding-left")||0,10)-parseInt(Qr(r,"padding-right")||0,10),t=t-parseInt(Qr(r,"padding-top")||0,10)-parseInt(Qr(r,"padding-bottom")||0,10),Number.isNaN(n)&&(n=0),Number.isNaN(t)&&(t=0),Object.assign(e,{width:n,height:t,size:e.isHorizontal()?n:t}))},updateSlides:function(){const e=this;function n(n,t){return parseFloat(n.getPropertyValue(e.getDirectionLabel(t))||0)}const t=e.params,{wrapperEl:r,slidesEl:i,size:a,rtlTranslate:s,wrongRTL:o}=e,l=e.virtual&&t.virtual.enabled,d=l?e.virtual.slides.length:e.slides.length,c=Yr(i,`.${e.params.slideClass}, swiper-slide`),u=l?e.virtual.slides.length:c.length;let p=[];const m=[],h=[];let f=t.slidesOffsetBefore;"function"==typeof f&&(f=t.slidesOffsetBefore.call(e));let g=t.slidesOffsetAfter;"function"==typeof g&&(g=t.slidesOffsetAfter.call(e));const C=e.snapGrid.length,A=e.slidesGrid.length;let v=t.spaceBetween,b=-f,y=0,w=0;if(void 0===a)return;"string"==typeof v&&v.indexOf("%")>=0?v=parseFloat(v.replace("%",""))/100*a:"string"==typeof v&&(v=parseFloat(v)),e.virtualSize=-v,c.forEach((e=>{s?e.style.marginLeft="":e.style.marginRight="",e.style.marginBottom="",e.style.marginTop=""})),t.centeredSlides&&t.cssMode&&(Gr(r,"--swiper-centered-offset-before",""),Gr(r,"--swiper-centered-offset-after",""));const S=t.grid&&t.grid.rows>1&&e.grid;let P;S?e.grid.initSlides(c):e.grid&&e.grid.unsetSlides();const E="auto"===t.slidesPerView&&t.breakpoints&&Object.keys(t.breakpoints).filter((e=>void 0!==t.breakpoints[e].slidesPerView)).length>0;for(let r=0;r<u;r+=1){let i;if(P=0,c[r]&&(i=c[r]),S&&e.grid.updateSlide(r,i,c),!c[r]||"none"!==Qr(i,"display")){if("auto"===t.slidesPerView){E&&(c[r].style[e.getDirectionLabel("width")]="");const a=getComputedStyle(i),s=i.style.transform,o=i.style.webkitTransform;if(s&&(i.style.transform="none"),o&&(i.style.webkitTransform="none"),t.roundLengths)P=e.isHorizontal()?ei(i,"width",!0):ei(i,"height",!0);else{const e=n(a,"width"),t=n(a,"padding-left"),r=n(a,"padding-right"),s=n(a,"margin-left"),o=n(a,"margin-right"),l=a.getPropertyValue("box-sizing");if(l&&"border-box"===l)P=e+s+o;else{const{clientWidth:n,offsetWidth:a}=i;P=e+t+r+s+o+(a-n)}}s&&(i.style.transform=s),o&&(i.style.webkitTransform=o),t.roundLengths&&(P=Math.floor(P))}else P=(a-(t.slidesPerView-1)*v)/t.slidesPerView,t.roundLengths&&(P=Math.floor(P)),c[r]&&(c[r].style[e.getDirectionLabel("width")]=`${P}px`);c[r]&&(c[r].swiperSlideSize=P),h.push(P),t.centeredSlides?(b=b+P/2+y/2+v,0===y&&0!==r&&(b=b-a/2-v),0===r&&(b=b-a/2-v),Math.abs(b)<.001&&(b=0),t.roundLengths&&(b=Math.floor(b)),w%t.slidesPerGroup==0&&p.push(b),m.push(b)):(t.roundLengths&&(b=Math.floor(b)),(w-Math.min(e.params.slidesPerGroupSkip,w))%e.params.slidesPerGroup==0&&p.push(b),m.push(b),b=b+P+v),e.virtualSize+=P+v,y=P,w+=1}}if(e.virtualSize=Math.max(e.virtualSize,a)+g,s&&o&&("slide"===t.effect||"coverflow"===t.effect)&&(r.style.width=`${e.virtualSize+v}px`),t.setWrapperSize&&(r.style[e.getDirectionLabel("width")]=`${e.virtualSize+v}px`),S&&e.grid.updateWrapperSize(P,p),!t.centeredSlides){const n=[];for(let r=0;r<p.length;r+=1){let i=p[r];t.roundLengths&&(i=Math.floor(i)),p[r]<=e.virtualSize-a&&n.push(i)}p=n,Math.floor(e.virtualSize-a)-Math.floor(p[p.length-1])>1&&p.push(e.virtualSize-a)}if(l&&t.loop){const n=h[0]+v;if(t.slidesPerGroup>1){const r=Math.ceil((e.virtual.slidesBefore+e.virtual.slidesAfter)/t.slidesPerGroup),i=n*t.slidesPerGroup;for(let e=0;e<r;e+=1)p.push(p[p.length-1]+i)}for(let r=0;r<e.virtual.slidesBefore+e.virtual.slidesAfter;r+=1)1===t.slidesPerGroup&&p.push(p[p.length-1]+n),m.push(m[m.length-1]+n),e.virtualSize+=n}if(0===p.length&&(p=[0]),0!==v){const n=e.isHorizontal()&&s?"marginLeft":e.getDirectionLabel("marginRight");c.filter(((e,n)=>!(t.cssMode&&!t.loop)||n!==c.length-1)).forEach((e=>{e.style[n]=`${v}px`}))}if(t.centeredSlides&&t.centeredSlidesBounds){let e=0;h.forEach((n=>{e+=n+(v||0)})),e-=v;const n=e>a?e-a:0;p=p.map((e=>e<=0?-f:e>n?n+g:e))}if(t.centerInsufficientSlides){let e=0;h.forEach((n=>{e+=n+(v||0)})),e-=v;const n=(t.slidesOffsetBefore||0)+(t.slidesOffsetAfter||0);if(e+n<a){const t=(a-e-n)/2;p.forEach(((e,n)=>{p[n]=e-t})),m.forEach(((e,n)=>{m[n]=e+t}))}}if(Object.assign(e,{slides:c,snapGrid:p,slidesGrid:m,slidesSizesGrid:h}),t.centeredSlides&&t.cssMode&&!t.centeredSlidesBounds){Gr(r,"--swiper-centered-offset-before",-p[0]+"px"),Gr(r,"--swiper-centered-offset-after",e.size/2-h[h.length-1]/2+"px");const n=-e.snapGrid[0],t=-e.slidesGrid[0];e.snapGrid=e.snapGrid.map((e=>e+n)),e.slidesGrid=e.slidesGrid.map((e=>e+t))}if(u!==d&&e.emit("slidesLengthChange"),p.length!==C&&(e.params.watchOverflow&&e.checkOverflow(),e.emit("snapGridLengthChange")),m.length!==A&&e.emit("slidesGridLengthChange"),t.watchSlidesProgress&&e.updateSlidesOffset(),e.emit("slidesUpdated"),!(l||t.cssMode||"slide"!==t.effect&&"fade"!==t.effect)){const n=`${t.containerModifierClass}backface-hidden`,r=e.el.classList.contains(n);u<=t.maxBackfaceHiddenSlides?r||e.el.classList.add(n):r&&e.el.classList.remove(n)}},updateAutoHeight:function(e){const n=this,t=[],r=n.virtual&&n.params.virtual.enabled;let i,a=0;"number"==typeof e?n.setTransition(e):!0===e&&n.setTransition(n.params.speed);const s=e=>r?n.slides[n.getSlideIndexByData(e)]:n.slides[e];if("auto"!==n.params.slidesPerView&&n.params.slidesPerView>1)if(n.params.centeredSlides)(n.visibleSlides||[]).forEach((e=>{t.push(e)}));else for(i=0;i<Math.ceil(n.params.slidesPerView);i+=1){const e=n.activeIndex+i;if(e>n.slides.length&&!r)break;t.push(s(e))}else t.push(s(n.activeIndex));for(i=0;i<t.length;i+=1)if(void 0!==t[i]){const e=t[i].offsetHeight;a=e>a?e:a}(a||0===a)&&(n.wrapperEl.style.height=`${a}px`)},updateSlidesOffset:function(){const e=this,n=e.slides,t=e.isElement?e.isHorizontal()?e.wrapperEl.offsetLeft:e.wrapperEl.offsetTop:0;for(let r=0;r<n.length;r+=1)n[r].swiperSlideOffset=(e.isHorizontal()?n[r].offsetLeft:n[r].offsetTop)-t-e.cssOverflowAdjustment()},updateSlidesProgress:function(e){void 0===e&&(e=this&&this.translate||0);const n=this,t=n.params,{slides:r,rtlTranslate:i,snapGrid:a}=n;if(0===r.length)return;void 0===r[0].swiperSlideOffset&&n.updateSlidesOffset();let s=-e;i&&(s=e),n.visibleSlidesIndexes=[],n.visibleSlides=[];let o=t.spaceBetween;"string"==typeof o&&o.indexOf("%")>=0?o=parseFloat(o.replace("%",""))/100*n.size:"string"==typeof o&&(o=parseFloat(o));for(let e=0;e<r.length;e+=1){const l=r[e];let d=l.swiperSlideOffset;t.cssMode&&t.centeredSlides&&(d-=r[0].swiperSlideOffset);const c=(s+(t.centeredSlides?n.minTranslate():0)-d)/(l.swiperSlideSize+o),u=(s-a[0]+(t.centeredSlides?n.minTranslate():0)-d)/(l.swiperSlideSize+o),p=-(s-d),m=p+n.slidesSizesGrid[e],h=p>=0&&p<=n.size-n.slidesSizesGrid[e],f=p>=0&&p<n.size-1||m>1&&m<=n.size||p<=0&&m>=n.size;f&&(n.visibleSlides.push(l),n.visibleSlidesIndexes.push(e)),li(l,f,t.slideVisibleClass),li(l,h,t.slideFullyVisibleClass),l.progress=i?-c:c,l.originalProgress=i?-u:u}},updateProgress:function(e){const n=this;if(void 0===e){const t=n.rtlTranslate?-1:1;e=n&&n.translate&&n.translate*t||0}const t=n.params,r=n.maxTranslate()-n.minTranslate();let{progress:i,isBeginning:a,isEnd:s,progressLoop:o}=n;const l=a,d=s;if(0===r)i=0,a=!0,s=!0;else{i=(e-n.minTranslate())/r;const t=Math.abs(e-n.minTranslate())<1,o=Math.abs(e-n.maxTranslate())<1;a=t||i<=0,s=o||i>=1,t&&(i=0),o&&(i=1)}if(t.loop){const t=n.getSlideIndexByData(0),r=n.getSlideIndexByData(n.slides.length-1),i=n.slidesGrid[t],a=n.slidesGrid[r],s=n.slidesGrid[n.slidesGrid.length-1],l=Math.abs(e);o=l>=i?(l-i)/s:(l+s-a)/s,o>1&&(o-=1)}Object.assign(n,{progress:i,progressLoop:o,isBeginning:a,isEnd:s}),(t.watchSlidesProgress||t.centeredSlides&&t.autoHeight)&&n.updateSlidesProgress(e),a&&!l&&n.emit("reachBeginning toEdge"),s&&!d&&n.emit("reachEnd toEdge"),(l&&!a||d&&!s)&&n.emit("fromEdge"),n.emit("progress",i)},updateSlidesClasses:function(){const e=this,{slides:n,params:t,slidesEl:r,activeIndex:i}=e,a=e.virtual&&t.virtual.enabled,s=e.grid&&t.grid&&t.grid.rows>1,o=e=>Yr(r,`.${t.slideClass}${e}, swiper-slide${e}`)[0];let l,d,c;if(a)if(t.loop){let n=i-e.virtual.slidesBefore;n<0&&(n=e.virtual.slides.length+n),n>=e.virtual.slides.length&&(n-=e.virtual.slides.length),l=o(`[data-swiper-slide-index="${n}"]`)}else l=o(`[data-swiper-slide-index="${i}"]`);else s?(l=n.find((e=>e.column===i)),c=n.find((e=>e.column===i+1)),d=n.find((e=>e.column===i-1))):l=n[i];l&&(s||(c=function(e,n){const t=[];for(;e.nextElementSibling;){const r=e.nextElementSibling;n?r.matches(n)&&t.push(r):t.push(r),e=r}return t}(l,`.${t.slideClass}, swiper-slide`)[0],t.loop&&!c&&(c=n[0]),d=function(e,n){const t=[];for(;e.previousElementSibling;){const r=e.previousElementSibling;n?r.matches(n)&&t.push(r):t.push(r),e=r}return t}(l,`.${t.slideClass}, swiper-slide`)[0],t.loop&&0===!d&&(d=n[n.length-1]))),n.forEach((e=>{di(e,e===l,t.slideActiveClass),di(e,e===c,t.slideNextClass),di(e,e===d,t.slidePrevClass)})),e.emitSlidesClasses()},updateActiveIndex:function(e){const n=this,t=n.rtlTranslate?n.translate:-n.translate,{snapGrid:r,params:i,activeIndex:a,realIndex:s,snapIndex:o}=n;let l,d=e;const c=e=>{let t=e-n.virtual.slidesBefore;return t<0&&(t=n.virtual.slides.length+t),t>=n.virtual.slides.length&&(t-=n.virtual.slides.length),t};if(void 0===d&&(d=function(e){const{slidesGrid:n,params:t}=e,r=e.rtlTranslate?e.translate:-e.translate;let i;for(let e=0;e<n.length;e+=1)void 0!==n[e+1]?r>=n[e]&&r<n[e+1]-(n[e+1]-n[e])/2?i=e:r>=n[e]&&r<n[e+1]&&(i=e+1):r>=n[e]&&(i=e);return t.normalizeSlideIndex&&(i<0||void 0===i)&&(i=0),i}(n)),r.indexOf(t)>=0)l=r.indexOf(t);else{const e=Math.min(i.slidesPerGroupSkip,d);l=e+Math.floor((d-e)/i.slidesPerGroup)}if(l>=r.length&&(l=r.length-1),d===a&&!n.params.loop)return void(l!==o&&(n.snapIndex=l,n.emit("snapIndexChange")));if(d===a&&n.params.loop&&n.virtual&&n.params.virtual.enabled)return void(n.realIndex=c(d));const u=n.grid&&i.grid&&i.grid.rows>1;let p;if(n.virtual&&i.virtual.enabled&&i.loop)p=c(d);else if(u){const e=n.slides.find((e=>e.column===d));let t=parseInt(e.getAttribute("data-swiper-slide-index"),10);Number.isNaN(t)&&(t=Math.max(n.slides.indexOf(e),0)),p=Math.floor(t/i.grid.rows)}else if(n.slides[d]){const e=n.slides[d].getAttribute("data-swiper-slide-index");p=e?parseInt(e,10):d}else p=d;Object.assign(n,{previousSnapIndex:o,snapIndex:l,previousRealIndex:s,realIndex:p,previousIndex:a,activeIndex:d}),n.initialized&&pi(n),n.emit("activeIndexChange"),n.emit("snapIndexChange"),(n.initialized||n.params.runCallbacksOnInit)&&(s!==p&&n.emit("realIndexChange"),n.emit("slideChange"))},updateClickedSlide:function(e,n){const t=this,r=t.params;let i=e.closest(`.${r.slideClass}, swiper-slide`);!i&&t.isElement&&n&&n.length>1&&n.includes(e)&&[...n.slice(n.indexOf(e)+1,n.length)].forEach((e=>{!i&&e.matches&&e.matches(`.${r.slideClass}, swiper-slide`)&&(i=e)}));let a,s=!1;if(i)for(let e=0;e<t.slides.length;e+=1)if(t.slides[e]===i){s=!0,a=e;break}if(!i||!s)return t.clickedSlide=void 0,void(t.clickedIndex=void 0);t.clickedSlide=i,t.virtual&&t.params.virtual.enabled?t.clickedIndex=parseInt(i.getAttribute("data-swiper-slide-index"),10):t.clickedIndex=a,r.slideToClickedSlide&&void 0!==t.clickedIndex&&t.clickedIndex!==t.activeIndex&&t.slideToClickedSlide()}},hi={getTranslate:function(e){void 0===e&&(e=this.isHorizontal()?"x":"y");const{params:n,rtlTranslate:t,translate:r,wrapperEl:i}=this;if(n.virtualTranslate)return t?-r:r;if(n.cssMode)return r;let a=function(e,n){void 0===n&&(n="x");const t=Wr();let r,i,a;const s=function(e){const n=Wr();let t;return n.getComputedStyle&&(t=n.getComputedStyle(e,null)),!t&&e.currentStyle&&(t=e.currentStyle),t||(t=e.style),t}(e);return t.WebKitCSSMatrix?(i=s.transform||s.webkitTransform,i.split(",").length>6&&(i=i.split(", ").map((e=>e.replace(",","."))).join(", ")),a=new t.WebKitCSSMatrix("none"===i?"":i)):(a=s.MozTransform||s.OTransform||s.MsTransform||s.msTransform||s.transform||s.getPropertyValue("transform").replace("translate(","matrix(1, 0, 0, 1,"),r=a.toString().split(",")),"x"===n&&(i=t.WebKitCSSMatrix?a.m41:16===r.length?parseFloat(r[12]):parseFloat(r[4])),"y"===n&&(i=t.WebKitCSSMatrix?a.m42:16===r.length?parseFloat(r[13]):parseFloat(r[5])),i||0}(i,e);return a+=this.cssOverflowAdjustment(),t&&(a=-a),a||0},setTranslate:function(e,n){const t=this,{rtlTranslate:r,params:i,wrapperEl:a,progress:s}=t;let o,l=0,d=0;t.isHorizontal()?l=r?-e:e:d=e,i.roundLengths&&(l=Math.floor(l),d=Math.floor(d)),t.previousTranslate=t.translate,t.translate=t.isHorizontal()?l:d,i.cssMode?a[t.isHorizontal()?"scrollLeft":"scrollTop"]=t.isHorizontal()?-l:-d:i.virtualTranslate||(t.isHorizontal()?l-=t.cssOverflowAdjustment():d-=t.cssOverflowAdjustment(),a.style.transform=`translate3d(${l}px, ${d}px, 0px)`);const c=t.maxTranslate()-t.minTranslate();o=0===c?0:(e-t.minTranslate())/c,o!==s&&t.updateProgress(e),t.emit("setTranslate",t.translate,n)},minTranslate:function(){return-this.snapGrid[0]},maxTranslate:function(){return-this.snapGrid[this.snapGrid.length-1]},translateTo:function(e,n,t,r,i){void 0===e&&(e=0),void 0===n&&(n=this.params.speed),void 0===t&&(t=!0),void 0===r&&(r=!0);const a=this,{params:s,wrapperEl:o}=a;if(a.animating&&s.preventInteractionOnTransition)return!1;const l=a.minTranslate(),d=a.maxTranslate();let c;if(c=r&&e>l?l:r&&e<d?d:e,a.updateProgress(c),s.cssMode){const e=a.isHorizontal();if(0===n)o[e?"scrollLeft":"scrollTop"]=-c;else{if(!a.support.smoothScroll)return $r({swiper:a,targetPosition:-c,side:e?"left":"top"}),!0;o.scrollTo({[e?"left":"top"]:-c,behavior:"smooth"})}return!0}return 0===n?(a.setTransition(0),a.setTranslate(c),t&&(a.emit("beforeTransitionStart",n,i),a.emit("transitionEnd"))):(a.setTransition(n),a.setTranslate(c),t&&(a.emit("beforeTransitionStart",n,i),a.emit("transitionStart")),a.animating||(a.animating=!0,a.onTranslateToWrapperTransitionEnd||(a.onTranslateToWrapperTransitionEnd=function(e){a&&!a.destroyed&&e.target===this&&(a.wrapperEl.removeEventListener("transitionend",a.onTranslateToWrapperTransitionEnd),a.onTranslateToWrapperTransitionEnd=null,delete a.onTranslateToWrapperTransitionEnd,a.animating=!1,t&&a.emit("transitionEnd"))}),a.wrapperEl.addEventListener("transitionend",a.onTranslateToWrapperTransitionEnd))),!0}};function fi(e){let{swiper:n,runCallbacks:t,direction:r,step:i}=e;const{activeIndex:a,previousIndex:s}=n;let o=r;if(o||(o=a>s?"next":a<s?"prev":"reset"),n.emit(`transition${i}`),t&&a!==s){if("reset"===o)return void n.emit(`slideResetTransition${i}`);n.emit(`slideChangeTransition${i}`),"next"===o?n.emit(`slideNextTransition${i}`):n.emit(`slidePrevTransition${i}`)}}var gi={setTransition:function(e,n){const t=this;t.params.cssMode||(t.wrapperEl.style.transitionDuration=`${e}ms`,t.wrapperEl.style.transitionDelay=0===e?"0ms":""),t.emit("setTransition",e,n)},transitionStart:function(e,n){void 0===e&&(e=!0);const t=this,{params:r}=t;r.cssMode||(r.autoHeight&&t.updateAutoHeight(),fi({swiper:t,runCallbacks:e,direction:n,step:"Start"}))},transitionEnd:function(e,n){void 0===e&&(e=!0);const t=this,{params:r}=t;t.animating=!1,r.cssMode||(t.setTransition(0),fi({swiper:t,runCallbacks:e,direction:n,step:"End"}))}},Ci={slideTo:function(e,n,t,r,i){void 0===e&&(e=0),void 0===t&&(t=!0),"string"==typeof e&&(e=parseInt(e,10));const a=this;let s=e;s<0&&(s=0);const{params:o,snapGrid:l,slidesGrid:d,previousIndex:c,activeIndex:u,rtlTranslate:p,wrapperEl:m,enabled:h}=a;if(!h&&!r&&!i||a.destroyed||a.animating&&o.preventInteractionOnTransition)return!1;void 0===n&&(n=a.params.speed);const f=Math.min(a.params.slidesPerGroupSkip,s);let g=f+Math.floor((s-f)/a.params.slidesPerGroup);g>=l.length&&(g=l.length-1);const C=-l[g];if(o.normalizeSlideIndex)for(let e=0;e<d.length;e+=1){const n=-Math.floor(100*C),t=Math.floor(100*d[e]),r=Math.floor(100*d[e+1]);void 0!==d[e+1]?n>=t&&n<r-(r-t)/2?s=e:n>=t&&n<r&&(s=e+1):n>=t&&(s=e)}if(a.initialized&&s!==u){if(!a.allowSlideNext&&(p?C>a.translate&&C>a.minTranslate():C<a.translate&&C<a.minTranslate()))return!1;if(!a.allowSlidePrev&&C>a.translate&&C>a.maxTranslate()&&(u||0)!==s)return!1}let A;s!==(c||0)&&t&&a.emit("beforeSlideChangeStart"),a.updateProgress(C),A=s>u?"next":s<u?"prev":"reset";const v=a.virtual&&a.params.virtual.enabled;if((!v||!i)&&(p&&-C===a.translate||!p&&C===a.translate))return a.updateActiveIndex(s),o.autoHeight&&a.updateAutoHeight(),a.updateSlidesClasses(),"slide"!==o.effect&&a.setTranslate(C),"reset"!==A&&(a.transitionStart(t,A),a.transitionEnd(t,A)),!1;if(o.cssMode){const e=a.isHorizontal(),t=p?C:-C;if(0===n)v&&(a.wrapperEl.style.scrollSnapType="none",a._immediateVirtual=!0),v&&!a._cssModeVirtualInitialSet&&a.params.initialSlide>0?(a._cssModeVirtualInitialSet=!0,requestAnimationFrame((()=>{m[e?"scrollLeft":"scrollTop"]=t}))):m[e?"scrollLeft":"scrollTop"]=t,v&&requestAnimationFrame((()=>{a.wrapperEl.style.scrollSnapType="",a._immediateVirtual=!1}));else{if(!a.support.smoothScroll)return $r({swiper:a,targetPosition:t,side:e?"left":"top"}),!0;m.scrollTo({[e?"left":"top"]:t,behavior:"smooth"})}return!0}return a.setTransition(n),a.setTranslate(C),a.updateActiveIndex(s),a.updateSlidesClasses(),a.emit("beforeTransitionStart",n,r),a.transitionStart(t,A),0===n?a.transitionEnd(t,A):a.animating||(a.animating=!0,a.onSlideToWrapperTransitionEnd||(a.onSlideToWrapperTransitionEnd=function(e){a&&!a.destroyed&&e.target===this&&(a.wrapperEl.removeEventListener("transitionend",a.onSlideToWrapperTransitionEnd),a.onSlideToWrapperTransitionEnd=null,delete a.onSlideToWrapperTransitionEnd,a.transitionEnd(t,A))}),a.wrapperEl.addEventListener("transitionend",a.onSlideToWrapperTransitionEnd)),!0},slideToLoop:function(e,n,t,r){void 0===e&&(e=0),void 0===t&&(t=!0),"string"==typeof e&&(e=parseInt(e,10));const i=this;if(i.destroyed)return;void 0===n&&(n=i.params.speed);const a=i.grid&&i.params.grid&&i.params.grid.rows>1;let s=e;if(i.params.loop)if(i.virtual&&i.params.virtual.enabled)s+=i.virtual.slidesBefore;else{let e;if(a){const n=s*i.params.grid.rows;e=i.slides.find((e=>1*e.getAttribute("data-swiper-slide-index")===n)).column}else e=i.getSlideIndexByData(s);const n=a?Math.ceil(i.slides.length/i.params.grid.rows):i.slides.length,{centeredSlides:t}=i.params;let o=i.params.slidesPerView;"auto"===o?o=i.slidesPerViewDynamic():(o=Math.ceil(parseFloat(i.params.slidesPerView,10)),t&&o%2==0&&(o+=1));let l=n-e<o;if(t&&(l=l||e<Math.ceil(o/2)),r&&t&&"auto"!==i.params.slidesPerView&&!a&&(l=!1),l){const r=t?e<i.activeIndex?"prev":"next":e-i.activeIndex-1<i.params.slidesPerView?"next":"prev";i.loopFix({direction:r,slideTo:!0,activeSlideIndex:"next"===r?e+1:e-n+1,slideRealIndex:"next"===r?i.realIndex:void 0})}if(a){const e=s*i.params.grid.rows;s=i.slides.find((n=>1*n.getAttribute("data-swiper-slide-index")===e)).column}else s=i.getSlideIndexByData(s)}return requestAnimationFrame((()=>{i.slideTo(s,n,t,r)})),i},slideNext:function(e,n,t){void 0===n&&(n=!0);const r=this,{enabled:i,params:a,animating:s}=r;if(!i||r.destroyed)return r;void 0===e&&(e=r.params.speed);let o=a.slidesPerGroup;"auto"===a.slidesPerView&&1===a.slidesPerGroup&&a.slidesPerGroupAuto&&(o=Math.max(r.slidesPerViewDynamic("current",!0),1));const l=r.activeIndex<a.slidesPerGroupSkip?1:o,d=r.virtual&&a.virtual.enabled;if(a.loop){if(s&&!d&&a.loopPreventsSliding)return!1;if(r.loopFix({direction:"next"}),r._clientLeft=r.wrapperEl.clientLeft,r.activeIndex===r.slides.length-1&&a.cssMode)return requestAnimationFrame((()=>{r.slideTo(r.activeIndex+l,e,n,t)})),!0}return a.rewind&&r.isEnd?r.slideTo(0,e,n,t):r.slideTo(r.activeIndex+l,e,n,t)},slidePrev:function(e,n,t){void 0===n&&(n=!0);const r=this,{params:i,snapGrid:a,slidesGrid:s,rtlTranslate:o,enabled:l,animating:d}=r;if(!l||r.destroyed)return r;void 0===e&&(e=r.params.speed);const c=r.virtual&&i.virtual.enabled;if(i.loop){if(d&&!c&&i.loopPreventsSliding)return!1;r.loopFix({direction:"prev"}),r._clientLeft=r.wrapperEl.clientLeft}function u(e){return e<0?-Math.floor(Math.abs(e)):Math.floor(e)}const p=u(o?r.translate:-r.translate),m=a.map((e=>u(e)));let h=a[m.indexOf(p)-1];if(void 0===h&&i.cssMode){let e;a.forEach(((n,t)=>{p>=n&&(e=t)})),void 0!==e&&(h=a[e>0?e-1:e])}let f=0;if(void 0!==h&&(f=s.indexOf(h),f<0&&(f=r.activeIndex-1),"auto"===i.slidesPerView&&1===i.slidesPerGroup&&i.slidesPerGroupAuto&&(f=f-r.slidesPerViewDynamic("previous",!0)+1,f=Math.max(f,0))),i.rewind&&r.isBeginning){const i=r.params.virtual&&r.params.virtual.enabled&&r.virtual?r.virtual.slides.length-1:r.slides.length-1;return r.slideTo(i,e,n,t)}return i.loop&&0===r.activeIndex&&i.cssMode?(requestAnimationFrame((()=>{r.slideTo(f,e,n,t)})),!0):r.slideTo(f,e,n,t)},slideReset:function(e,n,t){void 0===n&&(n=!0);const r=this;if(!r.destroyed)return void 0===e&&(e=r.params.speed),r.slideTo(r.activeIndex,e,n,t)},slideToClosest:function(e,n,t,r){void 0===n&&(n=!0),void 0===r&&(r=.5);const i=this;if(i.destroyed)return;void 0===e&&(e=i.params.speed);let a=i.activeIndex;const s=Math.min(i.params.slidesPerGroupSkip,a),o=s+Math.floor((a-s)/i.params.slidesPerGroup),l=i.rtlTranslate?i.translate:-i.translate;if(l>=i.snapGrid[o]){const e=i.snapGrid[o];l-e>(i.snapGrid[o+1]-e)*r&&(a+=i.params.slidesPerGroup)}else{const e=i.snapGrid[o-1];l-e<=(i.snapGrid[o]-e)*r&&(a-=i.params.slidesPerGroup)}return a=Math.max(a,0),a=Math.min(a,i.slidesGrid.length-1),i.slideTo(a,e,n,t)},slideToClickedSlide:function(){const e=this;if(e.destroyed)return;const{params:n,slidesEl:t}=e,r="auto"===n.slidesPerView?e.slidesPerViewDynamic():n.slidesPerView;let i,a=e.clickedIndex;const s=e.isElement?"swiper-slide":`.${n.slideClass}`;if(n.loop){if(e.animating)return;i=parseInt(e.clickedSlide.getAttribute("data-swiper-slide-index"),10),n.centeredSlides?a<e.loopedSlides-r/2||a>e.slides.length-e.loopedSlides+r/2?(e.loopFix(),a=e.getSlideIndex(Yr(t,`${s}[data-swiper-slide-index="${i}"]`)[0]),Br((()=>{e.slideTo(a)}))):e.slideTo(a):a>e.slides.length-r?(e.loopFix(),a=e.getSlideIndex(Yr(t,`${s}[data-swiper-slide-index="${i}"]`)[0]),Br((()=>{e.slideTo(a)}))):e.slideTo(a)}else e.slideTo(a)}},Ai={loopCreate:function(e){const n=this,{params:t,slidesEl:r}=n;if(!t.loop||n.virtual&&n.params.virtual.enabled)return;const i=()=>{Yr(r,`.${t.slideClass}, swiper-slide`).forEach(((e,n)=>{e.setAttribute("data-swiper-slide-index",n)}))},a=n.grid&&t.grid&&t.grid.rows>1,s=t.slidesPerGroup*(a?t.grid.rows:1),o=n.slides.length%s!=0,l=a&&n.slides.length%t.grid.rows!=0,d=e=>{for(let r=0;r<e;r+=1){const e=n.isElement?Zr("swiper-slide",[t.slideBlankClass]):Zr("div",[t.slideClass,t.slideBlankClass]);n.slidesEl.append(e)}};o?(t.loopAddBlankSlides?(d(s-n.slides.length%s),n.recalcSlides(),n.updateSlides()):qr("Swiper Loop Warning: The number of slides is not even to slidesPerGroup, loop mode may not function properly. You need to add more slides (or make duplicates, or empty slides)"),i()):l?(t.loopAddBlankSlides?(d(t.grid.rows-n.slides.length%t.grid.rows),n.recalcSlides(),n.updateSlides()):qr("Swiper Loop Warning: The number of slides is not even to grid.rows, loop mode may not function properly. You need to add more slides (or make duplicates, or empty slides)"),i()):i(),n.loopFix({slideRealIndex:e,direction:t.centeredSlides?void 0:"next"})},loopFix:function(e){let{slideRealIndex:n,slideTo:t=!0,direction:r,setTranslate:i,activeSlideIndex:a,byController:s,byMousewheel:o}=void 0===e?{}:e;const l=this;if(!l.params.loop)return;l.emit("beforeLoopFix");const{slides:d,allowSlidePrev:c,allowSlideNext:u,slidesEl:p,params:m}=l,{centeredSlides:h}=m;if(l.allowSlidePrev=!0,l.allowSlideNext=!0,l.virtual&&m.virtual.enabled)return t&&(m.centeredSlides||0!==l.snapIndex?m.centeredSlides&&l.snapIndex<m.slidesPerView?l.slideTo(l.virtual.slides.length+l.snapIndex,0,!1,!0):l.snapIndex===l.snapGrid.length-1&&l.slideTo(l.virtual.slidesBefore,0,!1,!0):l.slideTo(l.virtual.slides.length,0,!1,!0)),l.allowSlidePrev=c,l.allowSlideNext=u,void l.emit("loopFix");let f=m.slidesPerView;"auto"===f?f=l.slidesPerViewDynamic():(f=Math.ceil(parseFloat(m.slidesPerView,10)),h&&f%2==0&&(f+=1));const g=m.slidesPerGroupAuto?f:m.slidesPerGroup;let C=g;C%g!=0&&(C+=g-C%g),C+=m.loopAdditionalSlides,l.loopedSlides=C;const A=l.grid&&m.grid&&m.grid.rows>1;d.length<f+C?qr("Swiper Loop Warning: The number of slides is not enough for loop mode, it will be disabled and not function properly. You need to add more slides (or make duplicates) or lower the values of slidesPerView and slidesPerGroup parameters"):A&&"row"===m.grid.fill&&qr("Swiper Loop Warning: Loop mode is not compatible with grid.fill = `row`");const v=[],b=[];let y=l.activeIndex;void 0===a?a=l.getSlideIndex(d.find((e=>e.classList.contains(m.slideActiveClass)))):y=a;const w="next"===r||!r,S="prev"===r||!r;let P=0,E=0;const _=A?Math.ceil(d.length/m.grid.rows):d.length,D=(A?d[a].column:a)+(h&&void 0===i?-f/2+.5:0);if(D<C){P=Math.max(C-D,g);for(let e=0;e<C-D;e+=1){const n=e-Math.floor(e/_)*_;if(A){const e=_-n-1;for(let n=d.length-1;n>=0;n-=1)d[n].column===e&&v.push(n)}else v.push(_-n-1)}}else if(D+f>_-C){E=Math.max(D-(_-2*C),g);for(let e=0;e<E;e+=1){const n=e-Math.floor(e/_)*_;A?d.forEach(((e,t)=>{e.column===n&&b.push(t)})):b.push(n)}}if(l.__preventObserver__=!0,requestAnimationFrame((()=>{l.__preventObserver__=!1})),S&&v.forEach((e=>{d[e].swiperLoopMoveDOM=!0,p.prepend(d[e]),d[e].swiperLoopMoveDOM=!1})),w&&b.forEach((e=>{d[e].swiperLoopMoveDOM=!0,p.append(d[e]),d[e].swiperLoopMoveDOM=!1})),l.recalcSlides(),"auto"===m.slidesPerView?l.updateSlides():A&&(v.length>0&&S||b.length>0&&w)&&l.slides.forEach(((e,n)=>{l.grid.updateSlide(n,e,l.slides)})),m.watchSlidesProgress&&l.updateSlidesOffset(),t)if(v.length>0&&S){if(void 0===n){const e=l.slidesGrid[y],n=l.slidesGrid[y+P]-e;o?l.setTranslate(l.translate-n):(l.slideTo(y+Math.ceil(P),0,!1,!0),i&&(l.touchEventsData.startTranslate=l.touchEventsData.startTranslate-n,l.touchEventsData.currentTranslate=l.touchEventsData.currentTranslate-n))}else if(i){const e=A?v.length/m.grid.rows:v.length;l.slideTo(l.activeIndex+e,0,!1,!0),l.touchEventsData.currentTranslate=l.translate}}else if(b.length>0&&w)if(void 0===n){const e=l.slidesGrid[y],n=l.slidesGrid[y-E]-e;o?l.setTranslate(l.translate-n):(l.slideTo(y-E,0,!1,!0),i&&(l.touchEventsData.startTranslate=l.touchEventsData.startTranslate-n,l.touchEventsData.currentTranslate=l.touchEventsData.currentTranslate-n))}else{const e=A?b.length/m.grid.rows:b.length;l.slideTo(l.activeIndex-e,0,!1,!0)}if(l.allowSlidePrev=c,l.allowSlideNext=u,l.controller&&l.controller.control&&!s){const e={slideRealIndex:n,direction:r,setTranslate:i,activeSlideIndex:a,byController:!0};Array.isArray(l.controller.control)?l.controller.control.forEach((n=>{!n.destroyed&&n.params.loop&&n.loopFix({...e,slideTo:n.params.slidesPerView===m.slidesPerView&&t})})):l.controller.control instanceof l.constructor&&l.controller.control.params.loop&&l.controller.control.loopFix({...e,slideTo:l.controller.control.params.slidesPerView===m.slidesPerView&&t})}l.emit("loopFix")},loopDestroy:function(){const e=this,{params:n,slidesEl:t}=e;if(!n.loop||e.virtual&&e.params.virtual.enabled)return;e.recalcSlides();const r=[];e.slides.forEach((e=>{const n=void 0===e.swiperSlideIndex?1*e.getAttribute("data-swiper-slide-index"):e.swiperSlideIndex;r[n]=e})),e.slides.forEach((e=>{e.removeAttribute("data-swiper-slide-index")})),r.forEach((e=>{t.append(e)})),e.recalcSlides(),e.slideTo(e.realIndex,0)}},vi={setGrabCursor:function(e){const n=this;if(!n.params.simulateTouch||n.params.watchOverflow&&n.isLocked||n.params.cssMode)return;const t="container"===n.params.touchEventsTarget?n.el:n.wrapperEl;n.isElement&&(n.__preventObserver__=!0),t.style.cursor="move",t.style.cursor=e?"grabbing":"grab",n.isElement&&requestAnimationFrame((()=>{n.__preventObserver__=!1}))},unsetGrabCursor:function(){const e=this;e.params.watchOverflow&&e.isLocked||e.params.cssMode||(e.isElement&&(e.__preventObserver__=!0),e["container"===e.params.touchEventsTarget?"el":"wrapperEl"].style.cursor="",e.isElement&&requestAnimationFrame((()=>{e.__preventObserver__=!1})))}};function bi(e,n,t){const r=Wr(),{params:i}=e,a=i.edgeSwipeDetection,s=i.edgeSwipeThreshold;return!a||!(t<=s||t>=r.innerWidth-s)||"prevent"===a&&(n.preventDefault(),!0)}function yi(e){const n=this,t=Mr();let r=e;r.originalEvent&&(r=r.originalEvent);const i=n.touchEventsData;if("pointerdown"===r.type){if(null!==i.pointerId&&i.pointerId!==r.pointerId)return;i.pointerId=r.pointerId}else"touchstart"===r.type&&1===r.targetTouches.length&&(i.touchId=r.targetTouches[0].identifier);if("touchstart"===r.type)return void bi(n,r,r.targetTouches[0].pageX);const{params:a,touches:s,enabled:o}=n;if(!o)return;if(!a.simulateTouch&&"mouse"===r.pointerType)return;if(n.animating&&a.preventInteractionOnTransition)return;!n.animating&&a.cssMode&&a.loop&&n.loopFix();let l=r.target;if("wrapper"===a.touchEventsTarget&&!function(e,n){const t=Wr();let r=n.contains(e);return!r&&t.HTMLSlotElement&&n instanceof HTMLSlotElement&&(r=[...n.assignedElements()].includes(e),r||(r=function(e,n){const t=[n];for(;t.length>0;){const n=t.shift();if(e===n)return!0;t.push(...n.children,...n.shadowRoot?.children||[],...n.assignedElements?.()||[])}}(e,n))),r}(l,n.wrapperEl))return;if("which"in r&&3===r.which)return;if("button"in r&&r.button>0)return;if(i.isTouched&&i.isMoved)return;const d=!!a.noSwipingClass&&""!==a.noSwipingClass,c=r.composedPath?r.composedPath():r.path;d&&r.target&&r.target.shadowRoot&&c&&(l=c[0]);const u=a.noSwipingSelector?a.noSwipingSelector:`.${a.noSwipingClass}`,p=!(!r.target||!r.target.shadowRoot);if(a.noSwiping&&(p?function(e,n){return void 0===n&&(n=this),function n(t){if(!t||t===Mr()||t===Wr())return null;t.assignedSlot&&(t=t.assignedSlot);const r=t.closest(e);return r||t.getRootNode?r||n(t.getRootNode().host):null}(n)}(u,l):l.closest(u)))return void(n.allowClick=!0);if(a.swipeHandler&&!l.closest(a.swipeHandler))return;s.currentX=r.pageX,s.currentY=r.pageY;const m=s.currentX,h=s.currentY;if(!bi(n,r,m))return;Object.assign(i,{isTouched:!0,isMoved:!1,allowTouchCallbacks:!0,isScrolling:void 0,startMoving:void 0}),s.startX=m,s.startY=h,i.touchStartTime=zr(),n.allowClick=!0,n.updateSize(),n.swipeDirection=void 0,a.threshold>0&&(i.allowThresholdMove=!1);let f=!0;l.matches(i.focusableElements)&&(f=!1,"SELECT"===l.nodeName&&(i.isTouched=!1)),t.activeElement&&t.activeElement.matches(i.focusableElements)&&t.activeElement!==l&&("mouse"===r.pointerType||"mouse"!==r.pointerType&&!l.matches(i.focusableElements))&&t.activeElement.blur();const g=f&&n.allowTouchMove&&a.touchStartPreventDefault;!a.touchStartForcePreventDefault&&!g||l.isContentEditable||r.preventDefault(),a.freeMode&&a.freeMode.enabled&&n.freeMode&&n.animating&&!a.cssMode&&n.freeMode.onTouchStart(),n.emit("touchStart",r)}function wi(e){const n=Mr(),t=this,r=t.touchEventsData,{params:i,touches:a,rtlTranslate:s,enabled:o}=t;if(!o)return;if(!i.simulateTouch&&"mouse"===e.pointerType)return;let l,d=e;if(d.originalEvent&&(d=d.originalEvent),"pointermove"===d.type){if(null!==r.touchId)return;if(d.pointerId!==r.pointerId)return}if("touchmove"===d.type){if(l=[...d.changedTouches].find((e=>e.identifier===r.touchId)),!l||l.identifier!==r.touchId)return}else l=d;if(!r.isTouched)return void(r.startMoving&&r.isScrolling&&t.emit("touchMoveOpposite",d));const c=l.pageX,u=l.pageY;if(d.preventedByNestedSwiper)return a.startX=c,void(a.startY=u);if(!t.allowTouchMove)return d.target.matches(r.focusableElements)||(t.allowClick=!1),void(r.isTouched&&(Object.assign(a,{startX:c,startY:u,currentX:c,currentY:u}),r.touchStartTime=zr()));if(i.touchReleaseOnEdges&&!i.loop)if(t.isVertical()){if(u<a.startY&&t.translate<=t.maxTranslate()||u>a.startY&&t.translate>=t.minTranslate())return r.isTouched=!1,void(r.isMoved=!1)}else if(c<a.startX&&t.translate<=t.maxTranslate()||c>a.startX&&t.translate>=t.minTranslate())return;if(n.activeElement&&n.activeElement.matches(r.focusableElements)&&n.activeElement!==d.target&&"mouse"!==d.pointerType&&n.activeElement.blur(),n.activeElement&&d.target===n.activeElement&&d.target.matches(r.focusableElements))return r.isMoved=!0,void(t.allowClick=!1);r.allowTouchCallbacks&&t.emit("touchMove",d),a.previousX=a.currentX,a.previousY=a.currentY,a.currentX=c,a.currentY=u;const p=a.currentX-a.startX,m=a.currentY-a.startY;if(t.params.threshold&&Math.sqrt(p**2+m**2)<t.params.threshold)return;if(void 0===r.isScrolling){let e;t.isHorizontal()&&a.currentY===a.startY||t.isVertical()&&a.currentX===a.startX?r.isScrolling=!1:p*p+m*m>=25&&(e=180*Math.atan2(Math.abs(m),Math.abs(p))/Math.PI,r.isScrolling=t.isHorizontal()?e>i.touchAngle:90-e>i.touchAngle)}if(r.isScrolling&&t.emit("touchMoveOpposite",d),void 0===r.startMoving&&(a.currentX===a.startX&&a.currentY===a.startY||(r.startMoving=!0)),r.isScrolling||"touchmove"===d.type&&r.preventTouchMoveFromPointerMove)return void(r.isTouched=!1);if(!r.startMoving)return;t.allowClick=!1,!i.cssMode&&d.cancelable&&d.preventDefault(),i.touchMoveStopPropagation&&!i.nested&&d.stopPropagation();let h=t.isHorizontal()?p:m,f=t.isHorizontal()?a.currentX-a.previousX:a.currentY-a.previousY;i.oneWayMovement&&(h=Math.abs(h)*(s?1:-1),f=Math.abs(f)*(s?1:-1)),a.diff=h,h*=i.touchRatio,s&&(h=-h,f=-f);const g=t.touchesDirection;t.swipeDirection=h>0?"prev":"next",t.touchesDirection=f>0?"prev":"next";const C=t.params.loop&&!i.cssMode,A="next"===t.touchesDirection&&t.allowSlideNext||"prev"===t.touchesDirection&&t.allowSlidePrev;if(!r.isMoved){if(C&&A&&t.loopFix({direction:t.swipeDirection}),r.startTranslate=t.getTranslate(),t.setTransition(0),t.animating){const e=new window.CustomEvent("transitionend",{bubbles:!0,cancelable:!0,detail:{bySwiperTouchMove:!0}});t.wrapperEl.dispatchEvent(e)}r.allowMomentumBounce=!1,!i.grabCursor||!0!==t.allowSlideNext&&!0!==t.allowSlidePrev||t.setGrabCursor(!0),t.emit("sliderFirstMove",d)}if((new Date).getTime(),r.isMoved&&r.allowThresholdMove&&g!==t.touchesDirection&&C&&A&&Math.abs(h)>=1)return Object.assign(a,{startX:c,startY:u,currentX:c,currentY:u,startTranslate:r.currentTranslate}),r.loopSwapReset=!0,void(r.startTranslate=r.currentTranslate);t.emit("sliderMove",d),r.isMoved=!0,r.currentTranslate=h+r.startTranslate;let v=!0,b=i.resistanceRatio;if(i.touchReleaseOnEdges&&(b=0),h>0?(C&&A&&r.allowThresholdMove&&r.currentTranslate>(i.centeredSlides?t.minTranslate()-t.slidesSizesGrid[t.activeIndex+1]-("auto"!==i.slidesPerView&&t.slides.length-i.slidesPerView>=2?t.slidesSizesGrid[t.activeIndex+1]+t.params.spaceBetween:0)-t.params.spaceBetween:t.minTranslate())&&t.loopFix({direction:"prev",setTranslate:!0,activeSlideIndex:0}),r.currentTranslate>t.minTranslate()&&(v=!1,i.resistance&&(r.currentTranslate=t.minTranslate()-1+(-t.minTranslate()+r.startTranslate+h)**b))):h<0&&(C&&A&&r.allowThresholdMove&&r.currentTranslate<(i.centeredSlides?t.maxTranslate()+t.slidesSizesGrid[t.slidesSizesGrid.length-1]+t.params.spaceBetween+("auto"!==i.slidesPerView&&t.slides.length-i.slidesPerView>=2?t.slidesSizesGrid[t.slidesSizesGrid.length-1]+t.params.spaceBetween:0):t.maxTranslate())&&t.loopFix({direction:"next",setTranslate:!0,activeSlideIndex:t.slides.length-("auto"===i.slidesPerView?t.slidesPerViewDynamic():Math.ceil(parseFloat(i.slidesPerView,10)))}),r.currentTranslate<t.maxTranslate()&&(v=!1,i.resistance&&(r.currentTranslate=t.maxTranslate()+1-(t.maxTranslate()-r.startTranslate-h)**b))),v&&(d.preventedByNestedSwiper=!0),!t.allowSlideNext&&"next"===t.swipeDirection&&r.currentTranslate<r.startTranslate&&(r.currentTranslate=r.startTranslate),!t.allowSlidePrev&&"prev"===t.swipeDirection&&r.currentTranslate>r.startTranslate&&(r.currentTranslate=r.startTranslate),t.allowSlidePrev||t.allowSlideNext||(r.currentTranslate=r.startTranslate),i.threshold>0){if(!(Math.abs(h)>i.threshold||r.allowThresholdMove))return void(r.currentTranslate=r.startTranslate);if(!r.allowThresholdMove)return r.allowThresholdMove=!0,a.startX=a.currentX,a.startY=a.currentY,r.currentTranslate=r.startTranslate,void(a.diff=t.isHorizontal()?a.currentX-a.startX:a.currentY-a.startY)}i.followFinger&&!i.cssMode&&((i.freeMode&&i.freeMode.enabled&&t.freeMode||i.watchSlidesProgress)&&(t.updateActiveIndex(),t.updateSlidesClasses()),i.freeMode&&i.freeMode.enabled&&t.freeMode&&t.freeMode.onTouchMove(),t.updateProgress(r.currentTranslate),t.setTranslate(r.currentTranslate))}function Si(e){const n=this,t=n.touchEventsData;let r,i=e;if(i.originalEvent&&(i=i.originalEvent),"touchend"===i.type||"touchcancel"===i.type){if(r=[...i.changedTouches].find((e=>e.identifier===t.touchId)),!r||r.identifier!==t.touchId)return}else{if(null!==t.touchId)return;if(i.pointerId!==t.pointerId)return;r=i}if(["pointercancel","pointerout","pointerleave","contextmenu"].includes(i.type)&&(!["pointercancel","contextmenu"].includes(i.type)||!n.browser.isSafari&&!n.browser.isWebView))return;t.pointerId=null,t.touchId=null;const{params:a,touches:s,rtlTranslate:o,slidesGrid:l,enabled:d}=n;if(!d)return;if(!a.simulateTouch&&"mouse"===i.pointerType)return;if(t.allowTouchCallbacks&&n.emit("touchEnd",i),t.allowTouchCallbacks=!1,!t.isTouched)return t.isMoved&&a.grabCursor&&n.setGrabCursor(!1),t.isMoved=!1,void(t.startMoving=!1);a.grabCursor&&t.isMoved&&t.isTouched&&(!0===n.allowSlideNext||!0===n.allowSlidePrev)&&n.setGrabCursor(!1);const c=zr(),u=c-t.touchStartTime;if(n.allowClick){const e=i.path||i.composedPath&&i.composedPath();n.updateClickedSlide(e&&e[0]||i.target,e),n.emit("tap click",i),u<300&&c-t.lastClickTime<300&&n.emit("doubleTap doubleClick",i)}if(t.lastClickTime=zr(),Br((()=>{n.destroyed||(n.allowClick=!0)})),!t.isTouched||!t.isMoved||!n.swipeDirection||0===s.diff&&!t.loopSwapReset||t.currentTranslate===t.startTranslate&&!t.loopSwapReset)return t.isTouched=!1,t.isMoved=!1,void(t.startMoving=!1);let p;if(t.isTouched=!1,t.isMoved=!1,t.startMoving=!1,p=a.followFinger?o?n.translate:-n.translate:-t.currentTranslate,a.cssMode)return;if(a.freeMode&&a.freeMode.enabled)return void n.freeMode.onTouchEnd({currentPos:p});const m=p>=-n.maxTranslate()&&!n.params.loop;let h=0,f=n.slidesSizesGrid[0];for(let e=0;e<l.length;e+=e<a.slidesPerGroupSkip?1:a.slidesPerGroup){const n=e<a.slidesPerGroupSkip-1?1:a.slidesPerGroup;void 0!==l[e+n]?(m||p>=l[e]&&p<l[e+n])&&(h=e,f=l[e+n]-l[e]):(m||p>=l[e])&&(h=e,f=l[l.length-1]-l[l.length-2])}let g=null,C=null;a.rewind&&(n.isBeginning?C=a.virtual&&a.virtual.enabled&&n.virtual?n.virtual.slides.length-1:n.slides.length-1:n.isEnd&&(g=0));const A=(p-l[h])/f,v=h<a.slidesPerGroupSkip-1?1:a.slidesPerGroup;if(u>a.longSwipesMs){if(!a.longSwipes)return void n.slideTo(n.activeIndex);"next"===n.swipeDirection&&(A>=a.longSwipesRatio?n.slideTo(a.rewind&&n.isEnd?g:h+v):n.slideTo(h)),"prev"===n.swipeDirection&&(A>1-a.longSwipesRatio?n.slideTo(h+v):null!==C&&A<0&&Math.abs(A)>a.longSwipesRatio?n.slideTo(C):n.slideTo(h))}else{if(!a.shortSwipes)return void n.slideTo(n.activeIndex);!n.navigation||i.target!==n.navigation.nextEl&&i.target!==n.navigation.prevEl?("next"===n.swipeDirection&&n.slideTo(null!==g?g:h+v),"prev"===n.swipeDirection&&n.slideTo(null!==C?C:h)):i.target===n.navigation.nextEl?n.slideTo(h+v):n.slideTo(h)}}function Pi(){const e=this,{params:n,el:t}=e;if(t&&0===t.offsetWidth)return;n.breakpoints&&e.setBreakpoint();const{allowSlideNext:r,allowSlidePrev:i,snapGrid:a}=e,s=e.virtual&&e.params.virtual.enabled;e.allowSlideNext=!0,e.allowSlidePrev=!0,e.updateSize(),e.updateSlides(),e.updateSlidesClasses();const o=s&&n.loop;!("auto"===n.slidesPerView||n.slidesPerView>1)||!e.isEnd||e.isBeginning||e.params.centeredSlides||o?e.params.loop&&!s?e.slideToLoop(e.realIndex,0,!1,!0):e.slideTo(e.activeIndex,0,!1,!0):e.slideTo(e.slides.length-1,0,!1,!0),e.autoplay&&e.autoplay.running&&e.autoplay.paused&&(clearTimeout(e.autoplay.resizeTimeout),e.autoplay.resizeTimeout=setTimeout((()=>{e.autoplay&&e.autoplay.running&&e.autoplay.paused&&e.autoplay.resume()}),500)),e.allowSlidePrev=i,e.allowSlideNext=r,e.params.watchOverflow&&a!==e.snapGrid&&e.checkOverflow()}function Ei(e){const n=this;n.enabled&&(n.allowClick||(n.params.preventClicks&&e.preventDefault(),n.params.preventClicksPropagation&&n.animating&&(e.stopPropagation(),e.stopImmediatePropagation())))}function _i(){const e=this,{wrapperEl:n,rtlTranslate:t,enabled:r}=e;if(!r)return;let i;e.previousTranslate=e.translate,e.isHorizontal()?e.translate=-n.scrollLeft:e.translate=-n.scrollTop,0===e.translate&&(e.translate=0),e.updateActiveIndex(),e.updateSlidesClasses();const a=e.maxTranslate()-e.minTranslate();i=0===a?0:(e.translate-e.minTranslate())/a,i!==e.progress&&e.updateProgress(t?-e.translate:e.translate),e.emit("setTranslate",e.translate,!1)}function Di(e){const n=this;ci(n,e.target),n.params.cssMode||"auto"!==n.params.slidesPerView&&!n.params.autoHeight||n.update()}function Ii(){const e=this;e.documentTouchHandlerProceeded||(e.documentTouchHandlerProceeded=!0,e.params.touchReleaseOnEdges&&(e.el.style.touchAction="auto"))}const xi=(e,n)=>{const t=Mr(),{params:r,el:i,wrapperEl:a,device:s}=e,o=!!r.nested,l="on"===n?"addEventListener":"removeEventListener",d=n;i&&"string"!=typeof i&&(t[l]("touchstart",e.onDocumentTouchStart,{passive:!1,capture:o}),i[l]("touchstart",e.onTouchStart,{passive:!1}),i[l]("pointerdown",e.onTouchStart,{passive:!1}),t[l]("touchmove",e.onTouchMove,{passive:!1,capture:o}),t[l]("pointermove",e.onTouchMove,{passive:!1,capture:o}),t[l]("touchend",e.onTouchEnd,{passive:!0}),t[l]("pointerup",e.onTouchEnd,{passive:!0}),t[l]("pointercancel",e.onTouchEnd,{passive:!0}),t[l]("touchcancel",e.onTouchEnd,{passive:!0}),t[l]("pointerout",e.onTouchEnd,{passive:!0}),t[l]("pointerleave",e.onTouchEnd,{passive:!0}),t[l]("contextmenu",e.onTouchEnd,{passive:!0}),(r.preventClicks||r.preventClicksPropagation)&&i[l]("click",e.onClick,!0),r.cssMode&&a[l]("scroll",e.onScroll),r.updateOnWindowResize?e[d](s.ios||s.android?"resize orientationchange observerUpdate":"resize observerUpdate",Pi,!0):e[d]("observerUpdate",Pi,!0),i[l]("load",e.onLoad,{capture:!0}))};var Oi={attachEvents:function(){const e=this,{params:n}=e;e.onTouchStart=yi.bind(e),e.onTouchMove=wi.bind(e),e.onTouchEnd=Si.bind(e),e.onDocumentTouchStart=Ii.bind(e),n.cssMode&&(e.onScroll=_i.bind(e)),e.onClick=Ei.bind(e),e.onLoad=Di.bind(e),xi(e,"on")},detachEvents:function(){xi(this,"off")}};const ki=(e,n)=>e.grid&&n.grid&&n.grid.rows>1;var Li={setBreakpoint:function(){const e=this,{realIndex:n,initialized:t,params:r,el:i}=e,a=r.breakpoints;if(!a||a&&0===Object.keys(a).length)return;const s=Mr(),o="window"!==r.breakpointsBase&&r.breakpointsBase?"container":r.breakpointsBase,l=["window","container"].includes(r.breakpointsBase)||!r.breakpointsBase?e.el:s.querySelector(r.breakpointsBase),d=e.getBreakpoint(a,o,l);if(!d||e.currentBreakpoint===d)return;const c=(d in a?a[d]:void 0)||e.originalParams,u=ki(e,r),p=ki(e,c),m=e.params.grabCursor,h=c.grabCursor,f=r.enabled;u&&!p?(i.classList.remove(`${r.containerModifierClass}grid`,`${r.containerModifierClass}grid-column`),e.emitContainerClasses()):!u&&p&&(i.classList.add(`${r.containerModifierClass}grid`),(c.grid.fill&&"column"===c.grid.fill||!c.grid.fill&&"column"===r.grid.fill)&&i.classList.add(`${r.containerModifierClass}grid-column`),e.emitContainerClasses()),m&&!h?e.unsetGrabCursor():!m&&h&&e.setGrabCursor(),["navigation","pagination","scrollbar"].forEach((n=>{if(void 0===c[n])return;const t=r[n]&&r[n].enabled,i=c[n]&&c[n].enabled;t&&!i&&e[n].disable(),!t&&i&&e[n].enable()}));const g=c.direction&&c.direction!==r.direction,C=r.loop&&(c.slidesPerView!==r.slidesPerView||g),A=r.loop;g&&t&&e.changeDirection(),Jr(e.params,c);const v=e.params.enabled,b=e.params.loop;Object.assign(e,{allowTouchMove:e.params.allowTouchMove,allowSlideNext:e.params.allowSlideNext,allowSlidePrev:e.params.allowSlidePrev}),f&&!v?e.disable():!f&&v&&e.enable(),e.currentBreakpoint=d,e.emit("_beforeBreakpoint",c),t&&(C?(e.loopDestroy(),e.loopCreate(n),e.updateSlides()):!A&&b?(e.loopCreate(n),e.updateSlides()):A&&!b&&e.loopDestroy()),e.emit("breakpoint",c)},getBreakpoint:function(e,n,t){if(void 0===n&&(n="window"),!e||"container"===n&&!t)return;let r=!1;const i=Wr(),a="window"===n?i.innerHeight:t.clientHeight,s=Object.keys(e).map((e=>{if("string"==typeof e&&0===e.indexOf("@")){const n=parseFloat(e.substr(1));return{value:a*n,point:e}}return{value:e,point:e}}));s.sort(((e,n)=>parseInt(e.value,10)-parseInt(n.value,10)));for(let e=0;e<s.length;e+=1){const{point:a,value:o}=s[e];"window"===n?i.matchMedia(`(min-width: ${o}px)`).matches&&(r=a):o<=t.clientWidth&&(r=a)}return r||"max"}},Ui={addClasses:function(){const e=this,{classNames:n,params:t,rtl:r,el:i,device:a}=e,s=function(e,n){const t=[];return e.forEach((e=>{"object"==typeof e?Object.keys(e).forEach((r=>{e[r]&&t.push(n+r)})):"string"==typeof e&&t.push(n+e)})),t}(["initialized",t.direction,{"free-mode":e.params.freeMode&&t.freeMode.enabled},{autoheight:t.autoHeight},{rtl:r},{grid:t.grid&&t.grid.rows>1},{"grid-column":t.grid&&t.grid.rows>1&&"column"===t.grid.fill},{android:a.android},{ios:a.ios},{"css-mode":t.cssMode},{centered:t.cssMode&&t.centeredSlides},{"watch-progress":t.watchSlidesProgress}],t.containerModifierClass);n.push(...s),i.classList.add(...n),e.emitContainerClasses()},removeClasses:function(){const{el:e,classNames:n}=this;e&&"string"!=typeof e&&(e.classList.remove(...n),this.emitContainerClasses())}},Ti={init:!0,direction:"horizontal",oneWayMovement:!1,swiperElementNodeName:"SWIPER-CONTAINER",touchEventsTarget:"wrapper",initialSlide:0,speed:300,cssMode:!1,updateOnWindowResize:!0,resizeObserver:!0,nested:!1,createElements:!1,eventsPrefix:"swiper",enabled:!0,focusableElements:"input, select, option, textarea, button, video, label",width:null,height:null,preventInteractionOnTransition:!1,userAgent:null,url:null,edgeSwipeDetection:!1,edgeSwipeThreshold:20,autoHeight:!1,setWrapperSize:!1,virtualTranslate:!1,effect:"slide",breakpoints:void 0,breakpointsBase:"window",spaceBetween:0,slidesPerView:1,slidesPerGroup:1,slidesPerGroupSkip:0,slidesPerGroupAuto:!1,centeredSlides:!1,centeredSlidesBounds:!1,slidesOffsetBefore:0,slidesOffsetAfter:0,normalizeSlideIndex:!0,centerInsufficientSlides:!1,watchOverflow:!0,roundLengths:!1,touchRatio:1,touchAngle:45,simulateTouch:!0,shortSwipes:!0,longSwipes:!0,longSwipesRatio:.5,longSwipesMs:300,followFinger:!0,allowTouchMove:!0,threshold:5,touchMoveStopPropagation:!1,touchStartPreventDefault:!0,touchStartForcePreventDefault:!1,touchReleaseOnEdges:!1,uniqueNavElements:!0,resistance:!0,resistanceRatio:.85,watchSlidesProgress:!1,grabCursor:!1,preventClicks:!0,preventClicksPropagation:!0,slideToClickedSlide:!1,loop:!1,loopAddBlankSlides:!0,loopAdditionalSlides:0,loopPreventsSliding:!0,rewind:!1,allowSlidePrev:!0,allowSlideNext:!0,swipeHandler:null,noSwiping:!0,noSwipingClass:"swiper-no-swiping",noSwipingSelector:null,passiveListeners:!0,maxBackfaceHiddenSlides:10,containerModifierClass:"swiper-",slideClass:"swiper-slide",slideBlankClass:"swiper-slide-blank",slideActiveClass:"swiper-slide-active",slideVisibleClass:"swiper-slide-visible",slideFullyVisibleClass:"swiper-slide-fully-visible",slideNextClass:"swiper-slide-next",slidePrevClass:"swiper-slide-prev",wrapperClass:"swiper-wrapper",lazyPreloaderClass:"swiper-lazy-preloader",lazyPreloadPrevNext:0,runCallbacksOnInit:!0,_emitClasses:!1};function Ri(e,n){return function(t){void 0===t&&(t={});const r=Object.keys(t)[0],i=t[r];"object"==typeof i&&null!==i?(!0===e[r]&&(e[r]={enabled:!0}),"navigation"===r&&e[r]&&e[r].enabled&&!e[r].prevEl&&!e[r].nextEl&&(e[r].auto=!0),["pagination","scrollbar"].indexOf(r)>=0&&e[r]&&e[r].enabled&&!e[r].el&&(e[r].auto=!0),r in e&&"enabled"in i?("object"!=typeof e[r]||"enabled"in e[r]||(e[r].enabled=!0),e[r]||(e[r]={enabled:!1}),Jr(n,t)):Jr(n,t)):Jr(n,t)}}const Fi={eventsEmitter:oi,update:mi,translate:hi,transition:gi,slide:Ci,loop:Ai,grabCursor:vi,events:Oi,breakpoints:Li,checkOverflow:{checkOverflow:function(){const e=this,{isLocked:n,params:t}=e,{slidesOffsetBefore:r}=t;if(r){const n=e.slides.length-1,t=e.slidesGrid[n]+e.slidesSizesGrid[n]+2*r;e.isLocked=e.size>t}else e.isLocked=1===e.snapGrid.length;!0===t.allowSlideNext&&(e.allowSlideNext=!e.isLocked),!0===t.allowSlidePrev&&(e.allowSlidePrev=!e.isLocked),n&&n!==e.isLocked&&(e.isEnd=!1),n!==e.isLocked&&e.emit(e.isLocked?"lock":"unlock")}},classes:Ui},Mi={};class Ni{constructor(){let e,n;for(var t=arguments.length,r=new Array(t),i=0;i<t;i++)r[i]=arguments[i];1===r.length&&r[0].constructor&&"Object"===Object.prototype.toString.call(r[0]).slice(8,-1)?n=r[0]:[e,n]=r,n||(n={}),n=Jr({},n),e&&!n.el&&(n.el=e);const a=Mr();if(n.el&&"string"==typeof n.el&&a.querySelectorAll(n.el).length>1){const e=[];return a.querySelectorAll(n.el).forEach((t=>{const r=Jr({},n,{el:t});e.push(new Ni(r))})),e}const s=this;s.__swiper__=!0,s.support=ai(),s.device=si({userAgent:n.userAgent}),s.browser=(ii||(ii=function(){const e=Wr(),n=si();let t=!1;function r(){const n=e.navigator.userAgent.toLowerCase();return n.indexOf("safari")>=0&&n.indexOf("chrome")<0&&n.indexOf("android")<0}if(r()){const n=String(e.navigator.userAgent);if(n.includes("Version/")){const[e,r]=n.split("Version/")[1].split(" ")[0].split(".").map((e=>Number(e)));t=e<16||16===e&&r<2}}const i=/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(e.navigator.userAgent),a=r();return{isSafari:t||a,needPerspectiveFix:t,need3dFix:a||i&&n.ios,isWebView:i}}()),ii),s.eventsListeners={},s.eventsAnyListeners=[],s.modules=[...s.__modules__],n.modules&&Array.isArray(n.modules)&&s.modules.push(...n.modules);const o={};s.modules.forEach((e=>{e({params:n,swiper:s,extendParams:Ri(n,o),on:s.on.bind(s),once:s.once.bind(s),off:s.off.bind(s),emit:s.emit.bind(s)})}));const l=Jr({},Ti,o);return s.params=Jr({},l,Mi,n),s.originalParams=Jr({},s.params),s.passedParams=Jr({},n),s.params&&s.params.on&&Object.keys(s.params.on).forEach((e=>{s.on(e,s.params.on[e])})),s.params&&s.params.onAny&&s.onAny(s.params.onAny),Object.assign(s,{enabled:s.params.enabled,el:e,classNames:[],slides:[],slidesGrid:[],snapGrid:[],slidesSizesGrid:[],isHorizontal:()=>"horizontal"===s.params.direction,isVertical:()=>"vertical"===s.params.direction,activeIndex:0,realIndex:0,isBeginning:!0,isEnd:!1,translate:0,previousTranslate:0,progress:0,velocity:0,animating:!1,cssOverflowAdjustment(){return Math.trunc(this.translate/2**23)*2**23},allowSlideNext:s.params.allowSlideNext,allowSlidePrev:s.params.allowSlidePrev,touchEventsData:{isTouched:void 0,isMoved:void 0,allowTouchCallbacks:void 0,touchStartTime:void 0,isScrolling:void 0,currentTranslate:void 0,startTranslate:void 0,allowThresholdMove:void 0,focusableElements:s.params.focusableElements,lastClickTime:0,clickTimeout:void 0,velocities:[],allowMomentumBounce:void 0,startMoving:void 0,pointerId:null,touchId:null},allowClick:!0,allowTouchMove:s.params.allowTouchMove,touches:{startX:0,startY:0,currentX:0,currentY:0,diff:0},imagesToLoad:[],imagesLoaded:0}),s.emit("_swiper"),s.params.init&&s.init(),s}getDirectionLabel(e){return this.isHorizontal()?e:{width:"height","margin-top":"margin-left","margin-bottom ":"margin-right","margin-left":"margin-top","margin-right":"margin-bottom","padding-left":"padding-top","padding-right":"padding-bottom",marginRight:"marginBottom"}[e]}getSlideIndex(e){const{slidesEl:n,params:t}=this,r=Kr(Yr(n,`.${t.slideClass}, swiper-slide`)[0]);return Kr(e)-r}getSlideIndexByData(e){return this.getSlideIndex(this.slides.find((n=>1*n.getAttribute("data-swiper-slide-index")===e)))}recalcSlides(){const{slidesEl:e,params:n}=this;this.slides=Yr(e,`.${n.slideClass}, swiper-slide`)}enable(){const e=this;e.enabled||(e.enabled=!0,e.params.grabCursor&&e.setGrabCursor(),e.emit("enable"))}disable(){const e=this;e.enabled&&(e.enabled=!1,e.params.grabCursor&&e.unsetGrabCursor(),e.emit("disable"))}setProgress(e,n){const t=this;e=Math.min(Math.max(e,0),1);const r=t.minTranslate(),i=(t.maxTranslate()-r)*e+r;t.translateTo(i,void 0===n?0:n),t.updateActiveIndex(),t.updateSlidesClasses()}emitContainerClasses(){const e=this;if(!e.params._emitClasses||!e.el)return;const n=e.el.className.split(" ").filter((n=>0===n.indexOf("swiper")||0===n.indexOf(e.params.containerModifierClass)));e.emit("_containerClasses",n.join(" "))}getSlideClasses(e){const n=this;return n.destroyed?"":e.className.split(" ").filter((e=>0===e.indexOf("swiper-slide")||0===e.indexOf(n.params.slideClass))).join(" ")}emitSlidesClasses(){const e=this;if(!e.params._emitClasses||!e.el)return;const n=[];e.slides.forEach((t=>{const r=e.getSlideClasses(t);n.push({slideEl:t,classNames:r}),e.emit("_slideClass",t,r)})),e.emit("_slideClasses",n)}slidesPerViewDynamic(e,n){void 0===e&&(e="current"),void 0===n&&(n=!1);const{params:t,slides:r,slidesGrid:i,slidesSizesGrid:a,size:s,activeIndex:o}=this;let l=1;if("number"==typeof t.slidesPerView)return t.slidesPerView;if(t.centeredSlides){let e,n=r[o]?Math.ceil(r[o].swiperSlideSize):0;for(let t=o+1;t<r.length;t+=1)r[t]&&!e&&(n+=Math.ceil(r[t].swiperSlideSize),l+=1,n>s&&(e=!0));for(let t=o-1;t>=0;t-=1)r[t]&&!e&&(n+=r[t].swiperSlideSize,l+=1,n>s&&(e=!0))}else if("current"===e)for(let e=o+1;e<r.length;e+=1)(n?i[e]+a[e]-i[o]<s:i[e]-i[o]<s)&&(l+=1);else for(let e=o-1;e>=0;e-=1)i[o]-i[e]<s&&(l+=1);return l}update(){const e=this;if(!e||e.destroyed)return;const{snapGrid:n,params:t}=e;function r(){const n=e.rtlTranslate?-1*e.translate:e.translate,t=Math.min(Math.max(n,e.maxTranslate()),e.minTranslate());e.setTranslate(t),e.updateActiveIndex(),e.updateSlidesClasses()}let i;if(t.breakpoints&&e.setBreakpoint(),[...e.el.querySelectorAll('[loading="lazy"]')].forEach((n=>{n.complete&&ci(e,n)})),e.updateSize(),e.updateSlides(),e.updateProgress(),e.updateSlidesClasses(),t.freeMode&&t.freeMode.enabled&&!t.cssMode)r(),t.autoHeight&&e.updateAutoHeight();else{if(("auto"===t.slidesPerView||t.slidesPerView>1)&&e.isEnd&&!t.centeredSlides){const n=e.virtual&&t.virtual.enabled?e.virtual.slides:e.slides;i=e.slideTo(n.length-1,0,!1,!0)}else i=e.slideTo(e.activeIndex,0,!1,!0);i||r()}t.watchOverflow&&n!==e.snapGrid&&e.checkOverflow(),e.emit("update")}changeDirection(e,n){void 0===n&&(n=!0);const t=this,r=t.params.direction;return e||(e="horizontal"===r?"vertical":"horizontal"),e===r||"horizontal"!==e&&"vertical"!==e||(t.el.classList.remove(`${t.params.containerModifierClass}${r}`),t.el.classList.add(`${t.params.containerModifierClass}${e}`),t.emitContainerClasses(),t.params.direction=e,t.slides.forEach((n=>{"vertical"===e?n.style.width="":n.style.height=""})),t.emit("changeDirection"),n&&t.update()),t}changeLanguageDirection(e){const n=this;n.rtl&&"rtl"===e||!n.rtl&&"ltr"===e||(n.rtl="rtl"===e,n.rtlTranslate="horizontal"===n.params.direction&&n.rtl,n.rtl?(n.el.classList.add(`${n.params.containerModifierClass}rtl`),n.el.dir="rtl"):(n.el.classList.remove(`${n.params.containerModifierClass}rtl`),n.el.dir="ltr"),n.update())}mount(e){const n=this;if(n.mounted)return!0;let t=e||n.params.el;if("string"==typeof t&&(t=document.querySelector(t)),!t)return!1;t.swiper=n,t.parentNode&&t.parentNode.host&&t.parentNode.host.nodeName===n.params.swiperElementNodeName.toUpperCase()&&(n.isElement=!0);const r=()=>`.${(n.params.wrapperClass||"").trim().split(" ").join(".")}`;let i=t&&t.shadowRoot&&t.shadowRoot.querySelector?t.shadowRoot.querySelector(r()):Yr(t,r())[0];return!i&&n.params.createElements&&(i=Zr("div",n.params.wrapperClass),t.append(i),Yr(t,`.${n.params.slideClass}`).forEach((e=>{i.append(e)}))),Object.assign(n,{el:t,wrapperEl:i,slidesEl:n.isElement&&!t.parentNode.host.slideSlots?t.parentNode.host:i,hostEl:n.isElement?t.parentNode.host:t,mounted:!0,rtl:"rtl"===t.dir.toLowerCase()||"rtl"===Qr(t,"direction"),rtlTranslate:"horizontal"===n.params.direction&&("rtl"===t.dir.toLowerCase()||"rtl"===Qr(t,"direction")),wrongRTL:"-webkit-box"===Qr(i,"display")}),!0}init(e){const n=this;if(n.initialized)return n;if(!1===n.mount(e))return n;n.emit("beforeInit"),n.params.breakpoints&&n.setBreakpoint(),n.addClasses(),n.updateSize(),n.updateSlides(),n.params.watchOverflow&&n.checkOverflow(),n.params.grabCursor&&n.enabled&&n.setGrabCursor(),n.params.loop&&n.virtual&&n.params.virtual.enabled?n.slideTo(n.params.initialSlide+n.virtual.slidesBefore,0,n.params.runCallbacksOnInit,!1,!0):n.slideTo(n.params.initialSlide,0,n.params.runCallbacksOnInit,!1,!0),n.params.loop&&n.loopCreate(),n.attachEvents();const t=[...n.el.querySelectorAll('[loading="lazy"]')];return n.isElement&&t.push(...n.hostEl.querySelectorAll('[loading="lazy"]')),t.forEach((e=>{e.complete?ci(n,e):e.addEventListener("load",(e=>{ci(n,e.target)}))})),pi(n),n.initialized=!0,pi(n),n.emit("init"),n.emit("afterInit"),n}destroy(e,n){void 0===e&&(e=!0),void 0===n&&(n=!0);const t=this,{params:r,el:i,wrapperEl:a,slides:s}=t;return void 0===t.params||t.destroyed||(t.emit("beforeDestroy"),t.initialized=!1,t.detachEvents(),r.loop&&t.loopDestroy(),n&&(t.removeClasses(),i&&"string"!=typeof i&&i.removeAttribute("style"),a&&a.removeAttribute("style"),s&&s.length&&s.forEach((e=>{e.classList.remove(r.slideVisibleClass,r.slideFullyVisibleClass,r.slideActiveClass,r.slideNextClass,r.slidePrevClass),e.removeAttribute("style"),e.removeAttribute("data-swiper-slide-index")}))),t.emit("destroy"),Object.keys(t.eventsListeners).forEach((e=>{t.off(e)})),!1!==e&&(t.el&&"string"!=typeof t.el&&(t.el.swiper=null),function(e){const n=e;Object.keys(n).forEach((e=>{try{n[e]=null}catch(e){}try{delete n[e]}catch(e){}}))}(t)),t.destroyed=!0),null}static extendDefaults(e){Jr(Mi,e)}static get extendedDefaults(){return Mi}static get defaults(){return Ti}static installModule(e){Ni.prototype.__modules__||(Ni.prototype.__modules__=[]);const n=Ni.prototype.__modules__;"function"==typeof e&&n.indexOf(e)<0&&n.push(e)}static use(e){return Array.isArray(e)?(e.forEach((e=>Ni.installModule(e))),Ni):(Ni.installModule(e),Ni)}}Object.keys(Fi).forEach((e=>{Object.keys(Fi[e]).forEach((n=>{Ni.prototype[n]=Fi[e][n]}))})),Ni.use([function(e){let{swiper:n,on:t,emit:r}=e;const i=Wr();let a=null,s=null;const o=()=>{n&&!n.destroyed&&n.initialized&&(r("beforeResize"),r("resize"))},l=()=>{n&&!n.destroyed&&n.initialized&&r("orientationchange")};t("init",(()=>{n.params.resizeObserver&&void 0!==i.ResizeObserver?n&&!n.destroyed&&n.initialized&&(a=new ResizeObserver((e=>{s=i.requestAnimationFrame((()=>{const{width:t,height:r}=n;let i=t,a=r;e.forEach((e=>{let{contentBoxSize:t,contentRect:r,target:s}=e;s&&s!==n.el||(i=r?r.width:(t[0]||t).inlineSize,a=r?r.height:(t[0]||t).blockSize)})),i===t&&a===r||o()}))})),a.observe(n.el)):(i.addEventListener("resize",o),i.addEventListener("orientationchange",l))})),t("destroy",(()=>{s&&i.cancelAnimationFrame(s),a&&a.unobserve&&n.el&&(a.unobserve(n.el),a=null),i.removeEventListener("resize",o),i.removeEventListener("orientationchange",l)}))},function(e){let{swiper:n,extendParams:t,on:r,emit:i}=e;const a=[],s=Wr(),o=function(e,t){void 0===t&&(t={});const r=new(s.MutationObserver||s.WebkitMutationObserver)((e=>{if(n.__preventObserver__)return;if(1===e.length)return void i("observerUpdate",e[0]);const t=function(){i("observerUpdate",e[0])};s.requestAnimationFrame?s.requestAnimationFrame(t):s.setTimeout(t,0)}));r.observe(e,{attributes:void 0===t.attributes||t.attributes,childList:n.isElement||(void 0===t.childList||t).childList,characterData:void 0===t.characterData||t.characterData}),a.push(r)};t({observer:!1,observeParents:!1,observeSlideChildren:!1}),r("init",(()=>{if(n.params.observer){if(n.params.observeParents){const e=Xr(n.hostEl);for(let n=0;n<e.length;n+=1)o(e[n])}o(n.hostEl,{childList:n.params.observeSlideChildren}),o(n.wrapperEl,{attributes:!1})}})),r("destroy",(()=>{a.forEach((e=>{e.disconnect()})),a.splice(0,a.length)}))}]);const Wi=["eventsPrefix","injectStyles","injectStylesUrls","modules","init","_direction","oneWayMovement","swiperElementNodeName","touchEventsTarget","initialSlide","_speed","cssMode","updateOnWindowResize","resizeObserver","nested","focusableElements","_enabled","_width","_height","preventInteractionOnTransition","userAgent","url","_edgeSwipeDetection","_edgeSwipeThreshold","_freeMode","_autoHeight","setWrapperSize","virtualTranslate","_effect","breakpoints","breakpointsBase","_spaceBetween","_slidesPerView","maxBackfaceHiddenSlides","_grid","_slidesPerGroup","_slidesPerGroupSkip","_slidesPerGroupAuto","_centeredSlides","_centeredSlidesBounds","_slidesOffsetBefore","_slidesOffsetAfter","normalizeSlideIndex","_centerInsufficientSlides","_watchOverflow","roundLengths","touchRatio","touchAngle","simulateTouch","_shortSwipes","_longSwipes","longSwipesRatio","longSwipesMs","_followFinger","allowTouchMove","_threshold","touchMoveStopPropagation","touchStartPreventDefault","touchStartForcePreventDefault","touchReleaseOnEdges","uniqueNavElements","_resistance","_resistanceRatio","_watchSlidesProgress","_grabCursor","preventClicks","preventClicksPropagation","_slideToClickedSlide","_loop","loopAdditionalSlides","loopAddBlankSlides","loopPreventsSliding","_rewind","_allowSlidePrev","_allowSlideNext","_swipeHandler","_noSwiping","noSwipingClass","noSwipingSelector","passiveListeners","containerModifierClass","slideClass","slideActiveClass","slideVisibleClass","slideFullyVisibleClass","slideNextClass","slidePrevClass","slideBlankClass","wrapperClass","lazyPreloaderClass","lazyPreloadPrevNext","runCallbacksOnInit","observer","observeParents","observeSlideChildren","a11y","_autoplay","_controller","coverflowEffect","cubeEffect","fadeEffect","flipEffect","creativeEffect","cardsEffect","hashNavigation","history","keyboard","mousewheel","_navigation","_pagination","parallax","_scrollbar","_thumbs","virtual","zoom","control"];function ji(e){return"object"==typeof e&&null!==e&&e.constructor&&"Object"===Object.prototype.toString.call(e).slice(8,-1)&&!e.__swiper__}function Bi(e,n){const t=["__proto__","constructor","prototype"];Object.keys(n).filter((e=>t.indexOf(e)<0)).forEach((t=>{void 0===e[t]?e[t]=n[t]:ji(n[t])&&ji(e[t])&&Object.keys(n[t]).length>0?n[t].__swiper__?e[t]=n[t]:Bi(e[t],n[t]):e[t]=n[t]}))}function zi(e){return void 0===e&&(e={}),e.navigation&&void 0===e.navigation.nextEl&&void 0===e.navigation.prevEl}function Vi(e){return void 0===e&&(e={}),e.pagination&&void 0===e.pagination.el}function Hi(e){return void 0===e&&(e={}),e.scrollbar&&void 0===e.scrollbar.el}function Ji(e){void 0===e&&(e="");const n=e.split(" ").map((e=>e.trim())).filter((e=>!!e)),t=[];return n.forEach((e=>{t.indexOf(e)<0&&t.push(e)})),t.join(" ")}function Gi(e){return void 0===e&&(e=""),e?e.includes("swiper-wrapper")?e:`swiper-wrapper ${e}`:"swiper-wrapper"}function $i(){return $i=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e},$i.apply(this,arguments)}function Yi(e){return e.type&&e.type.displayName&&e.type.displayName.includes("SwiperSlide")}function qi(e){const t=[];return n.Children.toArray(e).forEach((e=>{Yi(e)?t.push(e):e.props&&e.props.children&&qi(e.props.children).forEach((e=>t.push(e)))})),t}function Zi(e){const t=[],r={"container-start":[],"container-end":[],"wrapper-start":[],"wrapper-end":[]};return n.Children.toArray(e).forEach((e=>{if(Yi(e))t.push(e);else if(e.props&&e.props.slot&&r[e.props.slot])r[e.props.slot].push(e);else if(e.props&&e.props.children){const n=qi(e.props.children);n.length>0?n.forEach((e=>t.push(e))):r["container-end"].push(e)}else r["container-end"].push(e)})),{slides:t,slots:r}}function Qi(e,t){return"undefined"==typeof window?(0,n.useEffect)(e,t):(0,n.useLayoutEffect)(e,t)}const Ki=(0,n.createContext)(null),Xi=(0,n.createContext)(null),ea=(0,n.forwardRef)((function(e,t){let{className:r,tag:i="div",wrapperTag:a="div",children:s,onSwiper:o,...l}=void 0===e?{}:e,d=!1;const[c,u]=(0,n.useState)("swiper"),[p,m]=(0,n.useState)(null),[h,f]=(0,n.useState)(!1),g=(0,n.useRef)(!1),C=(0,n.useRef)(null),A=(0,n.useRef)(null),v=(0,n.useRef)(null),b=(0,n.useRef)(null),y=(0,n.useRef)(null),w=(0,n.useRef)(null),S=(0,n.useRef)(null),P=(0,n.useRef)(null),{params:E,passedParams:_,rest:D,events:I}=function(e,n){void 0===e&&(e={}),void 0===n&&(n=!0);const t={on:{}},r={},i={};Bi(t,Ti),t._emitClasses=!0,t.init=!1;const a={},s=Wi.map((e=>e.replace(/_/,""))),o=Object.assign({},e);return Object.keys(o).forEach((o=>{void 0!==e[o]&&(s.indexOf(o)>=0?ji(e[o])?(t[o]={},i[o]={},Bi(t[o],e[o]),Bi(i[o],e[o])):(t[o]=e[o],i[o]=e[o]):0===o.search(/on[A-Z]/)&&"function"==typeof e[o]?n?r[`${o[2].toLowerCase()}${o.substr(3)}`]=e[o]:t.on[`${o[2].toLowerCase()}${o.substr(3)}`]=e[o]:a[o]=e[o])})),["navigation","pagination","scrollbar"].forEach((e=>{!0===t[e]&&(t[e]={}),!1===t[e]&&delete t[e]})),{params:t,passedParams:i,rest:a,events:r}}(l),{slides:x,slots:O}=Zi(s),k=()=>{f(!h)};Object.assign(E.on,{_containerClasses(e,n){u(n)}});const L=()=>{Object.assign(E.on,I),d=!0;const e={...E};if(delete e.wrapperClass,A.current=new Ni(e),A.current.virtual&&A.current.params.virtual.enabled){A.current.virtual.slides=x;const e={cache:!1,slides:x,renderExternal:m,renderExternalUpdate:!1};Bi(A.current.params.virtual,e),Bi(A.current.originalParams.virtual,e)}};return C.current||L(),A.current&&A.current.on("_beforeBreakpoint",k),(0,n.useEffect)((()=>()=>{A.current&&A.current.off("_beforeBreakpoint",k)})),(0,n.useEffect)((()=>{!g.current&&A.current&&(A.current.emitSlidesClasses(),g.current=!0)})),Qi((()=>{if(t&&(t.current=C.current),C.current)return A.current.destroyed&&L(),function(e,n){let{el:t,nextEl:r,prevEl:i,paginationEl:a,scrollbarEl:s,swiper:o}=e;zi(n)&&r&&i&&(o.params.navigation.nextEl=r,o.originalParams.navigation.nextEl=r,o.params.navigation.prevEl=i,o.originalParams.navigation.prevEl=i),Vi(n)&&a&&(o.params.pagination.el=a,o.originalParams.pagination.el=a),Hi(n)&&s&&(o.params.scrollbar.el=s,o.originalParams.scrollbar.el=s),o.init(t)}({el:C.current,nextEl:y.current,prevEl:w.current,paginationEl:S.current,scrollbarEl:P.current,swiper:A.current},E),o&&!A.current.destroyed&&o(A.current),()=>{A.current&&!A.current.destroyed&&A.current.destroy(!0,!1)}}),[]),Qi((()=>{!d&&I&&A.current&&Object.keys(I).forEach((e=>{A.current.on(e,I[e])}));const e=function(e,n,t,r,i){const a=[];if(!n)return a;const s=e=>{a.indexOf(e)<0&&a.push(e)};if(t&&r){const e=r.map(i),n=t.map(i);e.join("")!==n.join("")&&s("children"),r.length!==t.length&&s("children")}return Wi.filter((e=>"_"===e[0])).map((e=>e.replace(/_/,""))).forEach((t=>{if(t in e&&t in n)if(ji(e[t])&&ji(n[t])){const r=Object.keys(e[t]),i=Object.keys(n[t]);r.length!==i.length?s(t):(r.forEach((r=>{e[t][r]!==n[t][r]&&s(t)})),i.forEach((r=>{e[t][r]!==n[t][r]&&s(t)})))}else e[t]!==n[t]&&s(t)})),a}(_,v.current,x,b.current,(e=>e.key));return v.current=_,b.current=x,e.length&&A.current&&!A.current.destroyed&&function(e){let{swiper:n,slides:t,passedParams:r,changedParams:i,nextEl:a,prevEl:s,scrollbarEl:o,paginationEl:l}=e;const d=i.filter((e=>"children"!==e&&"direction"!==e&&"wrapperClass"!==e)),{params:c,pagination:u,navigation:p,scrollbar:m,virtual:h,thumbs:f}=n;let g,C,A,v,b,y,w,S;i.includes("thumbs")&&r.thumbs&&r.thumbs.swiper&&!r.thumbs.swiper.destroyed&&c.thumbs&&(!c.thumbs.swiper||c.thumbs.swiper.destroyed)&&(g=!0),i.includes("controller")&&r.controller&&r.controller.control&&c.controller&&!c.controller.control&&(C=!0),i.includes("pagination")&&r.pagination&&(r.pagination.el||l)&&(c.pagination||!1===c.pagination)&&u&&!u.el&&(A=!0),i.includes("scrollbar")&&r.scrollbar&&(r.scrollbar.el||o)&&(c.scrollbar||!1===c.scrollbar)&&m&&!m.el&&(v=!0),i.includes("navigation")&&r.navigation&&(r.navigation.prevEl||s)&&(r.navigation.nextEl||a)&&(c.navigation||!1===c.navigation)&&p&&!p.prevEl&&!p.nextEl&&(b=!0);const P=e=>{n[e]&&(n[e].destroy(),"navigation"===e?(n.isElement&&(n[e].prevEl.remove(),n[e].nextEl.remove()),c[e].prevEl=void 0,c[e].nextEl=void 0,n[e].prevEl=void 0,n[e].nextEl=void 0):(n.isElement&&n[e].el.remove(),c[e].el=void 0,n[e].el=void 0))};i.includes("loop")&&n.isElement&&(c.loop&&!r.loop?y=!0:!c.loop&&r.loop?w=!0:S=!0),d.forEach((e=>{if(ji(c[e])&&ji(r[e]))Object.assign(c[e],r[e]),"navigation"!==e&&"pagination"!==e&&"scrollbar"!==e||!("enabled"in r[e])||r[e].enabled||P(e);else{const n=r[e];!0!==n&&!1!==n||"navigation"!==e&&"pagination"!==e&&"scrollbar"!==e?c[e]=r[e]:!1===n&&P(e)}})),d.includes("controller")&&!C&&n.controller&&n.controller.control&&c.controller&&c.controller.control&&(n.controller.control=c.controller.control),i.includes("children")&&t&&h&&c.virtual.enabled?(h.slides=t,h.update(!0)):i.includes("virtual")&&h&&c.virtual.enabled&&(t&&(h.slides=t),h.update(!0)),i.includes("children")&&t&&c.loop&&(S=!0),g&&f.init()&&f.update(!0),C&&(n.controller.control=c.controller.control),A&&(!n.isElement||l&&"string"!=typeof l||(l=document.createElement("div"),l.classList.add("swiper-pagination"),l.part.add("pagination"),n.el.appendChild(l)),l&&(c.pagination.el=l),u.init(),u.render(),u.update()),v&&(!n.isElement||o&&"string"!=typeof o||(o=document.createElement("div"),o.classList.add("swiper-scrollbar"),o.part.add("scrollbar"),n.el.appendChild(o)),o&&(c.scrollbar.el=o),m.init(),m.updateSize(),m.setTranslate()),b&&(n.isElement&&(a&&"string"!=typeof a||(a=document.createElement("div"),a.classList.add("swiper-button-next"),a.innerHTML=n.hostEl.constructor.nextButtonSvg,a.part.add("button-next"),n.el.appendChild(a)),s&&"string"!=typeof s||(s=document.createElement("div"),s.classList.add("swiper-button-prev"),s.innerHTML=n.hostEl.constructor.prevButtonSvg,s.part.add("button-prev"),n.el.appendChild(s))),a&&(c.navigation.nextEl=a),s&&(c.navigation.prevEl=s),p.init(),p.update()),i.includes("allowSlideNext")&&(n.allowSlideNext=r.allowSlideNext),i.includes("allowSlidePrev")&&(n.allowSlidePrev=r.allowSlidePrev),i.includes("direction")&&n.changeDirection(r.direction,!1),(y||S)&&n.loopDestroy(),(w||S)&&n.loopCreate(),n.update()}({swiper:A.current,slides:x,passedParams:_,changedParams:e,nextEl:y.current,prevEl:w.current,scrollbarEl:P.current,paginationEl:S.current}),()=>{I&&A.current&&Object.keys(I).forEach((e=>{A.current.off(e,I[e])}))}})),Qi((()=>{(e=>{!e||e.destroyed||!e.params.virtual||e.params.virtual&&!e.params.virtual.enabled||(e.updateSlides(),e.updateProgress(),e.updateSlidesClasses(),e.parallax&&e.params.parallax&&e.params.parallax.enabled&&e.parallax.setTranslate())})(A.current)}),[p]),n.createElement(i,$i({ref:C,className:Ji(`${c}${r?` ${r}`:""}`)},D),n.createElement(Xi.Provider,{value:A.current},O["container-start"],n.createElement(a,{className:Gi(E.wrapperClass)},O["wrapper-start"],E.virtual?function(e,t,r){if(!r)return null;const i=e=>{let n=e;return e<0?n=t.length+e:n>=t.length&&(n-=t.length),n},a=e.isHorizontal()?{[e.rtlTranslate?"right":"left"]:`${r.offset}px`}:{top:`${r.offset}px`},{from:s,to:o}=r,l=e.params.loop?-t.length:0,d=e.params.loop?2*t.length:t.length,c=[];for(let e=l;e<d;e+=1)e>=s&&e<=o&&c.push(t[i(e)]);return c.map(((t,r)=>n.cloneElement(t,{swiper:e,style:a,key:t.props.virtualIndex||t.key||`slide-${r}`})))}(A.current,x,p):x.map(((e,t)=>n.cloneElement(e,{swiper:A.current,swiperSlideIndex:t}))),O["wrapper-end"]),zi(E)&&n.createElement(n.Fragment,null,n.createElement("div",{ref:w,className:"swiper-button-prev"}),n.createElement("div",{ref:y,className:"swiper-button-next"})),Hi(E)&&n.createElement("div",{ref:P,className:"swiper-scrollbar"}),Vi(E)&&n.createElement("div",{ref:S,className:"swiper-pagination"}),O["container-end"]))}));ea.displayName="Swiper";const na=(0,n.forwardRef)((function(e,t){let{tag:r="div",children:i,className:a="",swiper:s,zoom:o,lazy:l,virtualIndex:d,swiperSlideIndex:c,...u}=void 0===e?{}:e;const p=(0,n.useRef)(null),[m,h]=(0,n.useState)("swiper-slide"),[f,g]=(0,n.useState)(!1);function C(e,n,t){n===p.current&&h(t)}Qi((()=>{if(void 0!==c&&(p.current.swiperSlideIndex=c),t&&(t.current=p.current),p.current&&s){if(!s.destroyed)return s.on("_slideClass",C),()=>{s&&s.off("_slideClass",C)};"swiper-slide"!==m&&h("swiper-slide")}})),Qi((()=>{s&&p.current&&!s.destroyed&&h(s.getSlideClasses(p.current))}),[s]);const A={isActive:m.indexOf("swiper-slide-active")>=0,isVisible:m.indexOf("swiper-slide-visible")>=0,isPrev:m.indexOf("swiper-slide-prev")>=0,isNext:m.indexOf("swiper-slide-next")>=0},v=()=>"function"==typeof i?i(A):i;return n.createElement(r,$i({ref:p,className:Ji(`${m}${a?` ${a}`:""}`),"data-swiper-slide-index":d,onLoad:()=>{g(!0)}},u),o&&n.createElement(Ki.Provider,{value:A},n.createElement("div",{className:"swiper-zoom-container","data-swiper-zoom":"number"==typeof o?o:void 0},v(),l&&!f&&n.createElement("div",{className:"swiper-lazy-preloader"}))),!o&&n.createElement(Ki.Provider,{value:A},v(),l&&!f&&n.createElement("div",{className:"swiper-lazy-preloader"})))}));function ta(e,n,t,r){return e.params.createElements&&Object.keys(r).forEach((i=>{if(!t[i]&&!0===t.auto){let a=Yr(e.el,`.${r[i]}`)[0];a||(a=Zr("div",r[i]),a.className=r[i],e.el.append(a)),t[i]=a,n[i]=a}})),t}function ra(e){let{swiper:n,extendParams:t,on:r,emit:i}=e;function a(e){let t;return e&&"string"==typeof e&&n.isElement&&(t=n.el.querySelector(e)||n.hostEl.querySelector(e),t)?t:(e&&("string"==typeof e&&(t=[...document.querySelectorAll(e)]),n.params.uniqueNavElements&&"string"==typeof e&&t&&t.length>1&&1===n.el.querySelectorAll(e).length?t=n.el.querySelector(e):t&&1===t.length&&(t=t[0])),e&&!t?e:t)}function s(e,t){const r=n.params.navigation;(e=ni(e)).forEach((e=>{e&&(e.classList[t?"add":"remove"](...r.disabledClass.split(" ")),"BUTTON"===e.tagName&&(e.disabled=t),n.params.watchOverflow&&n.enabled&&e.classList[n.isLocked?"add":"remove"](r.lockClass))}))}function o(){const{nextEl:e,prevEl:t}=n.navigation;if(n.params.loop)return s(t,!1),void s(e,!1);s(t,n.isBeginning&&!n.params.rewind),s(e,n.isEnd&&!n.params.rewind)}function l(e){e.preventDefault(),(!n.isBeginning||n.params.loop||n.params.rewind)&&(n.slidePrev(),i("navigationPrev"))}function d(e){e.preventDefault(),(!n.isEnd||n.params.loop||n.params.rewind)&&(n.slideNext(),i("navigationNext"))}function c(){const e=n.params.navigation;if(n.params.navigation=ta(n,n.originalParams.navigation,n.params.navigation,{nextEl:"swiper-button-next",prevEl:"swiper-button-prev"}),!e.nextEl&&!e.prevEl)return;let t=a(e.nextEl),r=a(e.prevEl);Object.assign(n.navigation,{nextEl:t,prevEl:r}),t=ni(t),r=ni(r);const i=(t,r)=>{t&&t.addEventListener("click","next"===r?d:l),!n.enabled&&t&&t.classList.add(...e.lockClass.split(" "))};t.forEach((e=>i(e,"next"))),r.forEach((e=>i(e,"prev")))}function u(){let{nextEl:e,prevEl:t}=n.navigation;e=ni(e),t=ni(t);const r=(e,t)=>{e.removeEventListener("click","next"===t?d:l),e.classList.remove(...n.params.navigation.disabledClass.split(" "))};e.forEach((e=>r(e,"next"))),t.forEach((e=>r(e,"prev")))}t({navigation:{nextEl:null,prevEl:null,hideOnClick:!1,disabledClass:"swiper-button-disabled",hiddenClass:"swiper-button-hidden",lockClass:"swiper-button-lock",navigationDisabledClass:"swiper-navigation-disabled"}}),n.navigation={nextEl:null,prevEl:null},r("init",(()=>{!1===n.params.navigation.enabled?p():(c(),o())})),r("toEdge fromEdge lock unlock",(()=>{o()})),r("destroy",(()=>{u()})),r("enable disable",(()=>{let{nextEl:e,prevEl:t}=n.navigation;e=ni(e),t=ni(t),n.enabled?o():[...e,...t].filter((e=>!!e)).forEach((e=>e.classList.add(n.params.navigation.lockClass)))})),r("click",((e,t)=>{let{nextEl:r,prevEl:a}=n.navigation;r=ni(r),a=ni(a);const s=t.target;let o=a.includes(s)||r.includes(s);if(n.isElement&&!o){const e=t.path||t.composedPath&&t.composedPath();e&&(o=e.find((e=>r.includes(e)||a.includes(e))))}if(n.params.navigation.hideOnClick&&!o){if(n.pagination&&n.params.pagination&&n.params.pagination.clickable&&(n.pagination.el===s||n.pagination.el.contains(s)))return;let e;r.length?e=r[0].classList.contains(n.params.navigation.hiddenClass):a.length&&(e=a[0].classList.contains(n.params.navigation.hiddenClass)),i(!0===e?"navigationShow":"navigationHide"),[...r,...a].filter((e=>!!e)).forEach((e=>e.classList.toggle(n.params.navigation.hiddenClass)))}}));const p=()=>{n.el.classList.add(...n.params.navigation.navigationDisabledClass.split(" ")),u()};Object.assign(n.navigation,{enable:()=>{n.el.classList.remove(...n.params.navigation.navigationDisabledClass.split(" ")),c(),o()},disable:p,update:o,init:c,destroy:u})}function ia(e){return void 0===e&&(e=""),`.${e.trim().replace(/([\.:!+\/])/g,"\\$1").replace(/ /g,".")}`}function aa(e){let{swiper:n,extendParams:t,on:r,emit:i}=e;const a="swiper-pagination";let s;t({pagination:{el:null,bulletElement:"span",clickable:!1,hideOnClick:!1,renderBullet:null,renderProgressbar:null,renderFraction:null,renderCustom:null,progressbarOpposite:!1,type:"bullets",dynamicBullets:!1,dynamicMainBullets:1,formatFractionCurrent:e=>e,formatFractionTotal:e=>e,bulletClass:`${a}-bullet`,bulletActiveClass:`${a}-bullet-active`,modifierClass:`${a}-`,currentClass:`${a}-current`,totalClass:`${a}-total`,hiddenClass:`${a}-hidden`,progressbarFillClass:`${a}-progressbar-fill`,progressbarOppositeClass:`${a}-progressbar-opposite`,clickableClass:`${a}-clickable`,lockClass:`${a}-lock`,horizontalClass:`${a}-horizontal`,verticalClass:`${a}-vertical`,paginationDisabledClass:`${a}-disabled`}}),n.pagination={el:null,bullets:[]};let o=0;function l(){return!n.params.pagination.el||!n.pagination.el||Array.isArray(n.pagination.el)&&0===n.pagination.el.length}function d(e,t){const{bulletActiveClass:r}=n.params.pagination;e&&(e=e[("prev"===t?"previous":"next")+"ElementSibling"])&&(e.classList.add(`${r}-${t}`),(e=e[("prev"===t?"previous":"next")+"ElementSibling"])&&e.classList.add(`${r}-${t}-${t}`))}function c(e){const t=e.target.closest(ia(n.params.pagination.bulletClass));if(!t)return;e.preventDefault();const r=Kr(t)*n.params.slidesPerGroup;if(n.params.loop){if(n.realIndex===r)return;const e=(i=n.realIndex,a=r,(a%=s=n.slides.length)==1+(i%=s)?"next":a===i-1?"previous":void 0);"next"===e?n.slideNext():"previous"===e?n.slidePrev():n.slideToLoop(r)}else n.slideTo(r);var i,a,s}function u(){const e=n.rtl,t=n.params.pagination;if(l())return;let r,a,c=n.pagination.el;c=ni(c);const u=n.virtual&&n.params.virtual.enabled?n.virtual.slides.length:n.slides.length,p=n.params.loop?Math.ceil(u/n.params.slidesPerGroup):n.snapGrid.length;if(n.params.loop?(a=n.previousRealIndex||0,r=n.params.slidesPerGroup>1?Math.floor(n.realIndex/n.params.slidesPerGroup):n.realIndex):void 0!==n.snapIndex?(r=n.snapIndex,a=n.previousSnapIndex):(a=n.previousIndex||0,r=n.activeIndex||0),"bullets"===t.type&&n.pagination.bullets&&n.pagination.bullets.length>0){const i=n.pagination.bullets;let l,u,p;if(t.dynamicBullets&&(s=ei(i[0],n.isHorizontal()?"width":"height",!0),c.forEach((e=>{e.style[n.isHorizontal()?"width":"height"]=s*(t.dynamicMainBullets+4)+"px"})),t.dynamicMainBullets>1&&void 0!==a&&(o+=r-(a||0),o>t.dynamicMainBullets-1?o=t.dynamicMainBullets-1:o<0&&(o=0)),l=Math.max(r-o,0),u=l+(Math.min(i.length,t.dynamicMainBullets)-1),p=(u+l)/2),i.forEach((e=>{const n=[...["","-next","-next-next","-prev","-prev-prev","-main"].map((e=>`${t.bulletActiveClass}${e}`))].map((e=>"string"==typeof e&&e.includes(" ")?e.split(" "):e)).flat();e.classList.remove(...n)})),c.length>1)i.forEach((e=>{const i=Kr(e);i===r?e.classList.add(...t.bulletActiveClass.split(" ")):n.isElement&&e.setAttribute("part","bullet"),t.dynamicBullets&&(i>=l&&i<=u&&e.classList.add(...`${t.bulletActiveClass}-main`.split(" ")),i===l&&d(e,"prev"),i===u&&d(e,"next"))}));else{const e=i[r];if(e&&e.classList.add(...t.bulletActiveClass.split(" ")),n.isElement&&i.forEach(((e,n)=>{e.setAttribute("part",n===r?"bullet-active":"bullet")})),t.dynamicBullets){const e=i[l],n=i[u];for(let e=l;e<=u;e+=1)i[e]&&i[e].classList.add(...`${t.bulletActiveClass}-main`.split(" "));d(e,"prev"),d(n,"next")}}if(t.dynamicBullets){const r=Math.min(i.length,t.dynamicMainBullets+4),a=(s*r-s)/2-p*s,o=e?"right":"left";i.forEach((e=>{e.style[n.isHorizontal()?o:"top"]=`${a}px`}))}}c.forEach(((e,a)=>{if("fraction"===t.type&&(e.querySelectorAll(ia(t.currentClass)).forEach((e=>{e.textContent=t.formatFractionCurrent(r+1)})),e.querySelectorAll(ia(t.totalClass)).forEach((e=>{e.textContent=t.formatFractionTotal(p)}))),"progressbar"===t.type){let i;i=t.progressbarOpposite?n.isHorizontal()?"vertical":"horizontal":n.isHorizontal()?"horizontal":"vertical";const a=(r+1)/p;let s=1,o=1;"horizontal"===i?s=a:o=a,e.querySelectorAll(ia(t.progressbarFillClass)).forEach((e=>{e.style.transform=`translate3d(0,0,0) scaleX(${s}) scaleY(${o})`,e.style.transitionDuration=`${n.params.speed}ms`}))}"custom"===t.type&&t.renderCustom?(e.innerHTML=t.renderCustom(n,r+1,p),0===a&&i("paginationRender",e)):(0===a&&i("paginationRender",e),i("paginationUpdate",e)),n.params.watchOverflow&&n.enabled&&e.classList[n.isLocked?"add":"remove"](t.lockClass)}))}function p(){const e=n.params.pagination;if(l())return;const t=n.virtual&&n.params.virtual.enabled?n.virtual.slides.length:n.grid&&n.params.grid.rows>1?n.slides.length/Math.ceil(n.params.grid.rows):n.slides.length;let r=n.pagination.el;r=ni(r);let a="";if("bullets"===e.type){let r=n.params.loop?Math.ceil(t/n.params.slidesPerGroup):n.snapGrid.length;n.params.freeMode&&n.params.freeMode.enabled&&r>t&&(r=t);for(let t=0;t<r;t+=1)e.renderBullet?a+=e.renderBullet.call(n,t,e.bulletClass):a+=`<${e.bulletElement} ${n.isElement?'part="bullet"':""} class="${e.bulletClass}"></${e.bulletElement}>`}"fraction"===e.type&&(a=e.renderFraction?e.renderFraction.call(n,e.currentClass,e.totalClass):`<span class="${e.currentClass}"></span> / <span class="${e.totalClass}"></span>`),"progressbar"===e.type&&(a=e.renderProgressbar?e.renderProgressbar.call(n,e.progressbarFillClass):`<span class="${e.progressbarFillClass}"></span>`),n.pagination.bullets=[],r.forEach((t=>{"custom"!==e.type&&(t.innerHTML=a||""),"bullets"===e.type&&n.pagination.bullets.push(...t.querySelectorAll(ia(e.bulletClass)))})),"custom"!==e.type&&i("paginationRender",r[0])}function m(){n.params.pagination=ta(n,n.originalParams.pagination,n.params.pagination,{el:"swiper-pagination"});const e=n.params.pagination;if(!e.el)return;let t;"string"==typeof e.el&&n.isElement&&(t=n.el.querySelector(e.el)),t||"string"!=typeof e.el||(t=[...document.querySelectorAll(e.el)]),t||(t=e.el),t&&0!==t.length&&(n.params.uniqueNavElements&&"string"==typeof e.el&&Array.isArray(t)&&t.length>1&&(t=[...n.el.querySelectorAll(e.el)],t.length>1&&(t=t.find((e=>Xr(e,".swiper")[0]===n.el)))),Array.isArray(t)&&1===t.length&&(t=t[0]),Object.assign(n.pagination,{el:t}),t=ni(t),t.forEach((t=>{"bullets"===e.type&&e.clickable&&t.classList.add(...(e.clickableClass||"").split(" ")),t.classList.add(e.modifierClass+e.type),t.classList.add(n.isHorizontal()?e.horizontalClass:e.verticalClass),"bullets"===e.type&&e.dynamicBullets&&(t.classList.add(`${e.modifierClass}${e.type}-dynamic`),o=0,e.dynamicMainBullets<1&&(e.dynamicMainBullets=1)),"progressbar"===e.type&&e.progressbarOpposite&&t.classList.add(e.progressbarOppositeClass),e.clickable&&t.addEventListener("click",c),n.enabled||t.classList.add(e.lockClass)})))}function h(){const e=n.params.pagination;if(l())return;let t=n.pagination.el;t&&(t=ni(t),t.forEach((t=>{t.classList.remove(e.hiddenClass),t.classList.remove(e.modifierClass+e.type),t.classList.remove(n.isHorizontal()?e.horizontalClass:e.verticalClass),e.clickable&&(t.classList.remove(...(e.clickableClass||"").split(" ")),t.removeEventListener("click",c))}))),n.pagination.bullets&&n.pagination.bullets.forEach((n=>n.classList.remove(...e.bulletActiveClass.split(" "))))}r("changeDirection",(()=>{if(!n.pagination||!n.pagination.el)return;const e=n.params.pagination;let{el:t}=n.pagination;t=ni(t),t.forEach((t=>{t.classList.remove(e.horizontalClass,e.verticalClass),t.classList.add(n.isHorizontal()?e.horizontalClass:e.verticalClass)}))})),r("init",(()=>{!1===n.params.pagination.enabled?f():(m(),p(),u())})),r("activeIndexChange",(()=>{void 0===n.snapIndex&&u()})),r("snapIndexChange",(()=>{u()})),r("snapGridLengthChange",(()=>{p(),u()})),r("destroy",(()=>{h()})),r("enable disable",(()=>{let{el:e}=n.pagination;e&&(e=ni(e),e.forEach((e=>e.classList[n.enabled?"remove":"add"](n.params.pagination.lockClass))))})),r("lock unlock",(()=>{u()})),r("click",((e,t)=>{const r=t.target,a=ni(n.pagination.el);if(n.params.pagination.el&&n.params.pagination.hideOnClick&&a&&a.length>0&&!r.classList.contains(n.params.pagination.bulletClass)){if(n.navigation&&(n.navigation.nextEl&&r===n.navigation.nextEl||n.navigation.prevEl&&r===n.navigation.prevEl))return;const e=a[0].classList.contains(n.params.pagination.hiddenClass);i(!0===e?"paginationShow":"paginationHide"),a.forEach((e=>e.classList.toggle(n.params.pagination.hiddenClass)))}}));const f=()=>{n.el.classList.add(n.params.pagination.paginationDisabledClass);let{el:e}=n.pagination;e&&(e=ni(e),e.forEach((e=>e.classList.add(n.params.pagination.paginationDisabledClass)))),h()};Object.assign(n.pagination,{enable:()=>{n.el.classList.remove(n.params.pagination.paginationDisabledClass);let{el:e}=n.pagination;e&&(e=ni(e),e.forEach((e=>e.classList.remove(n.params.pagination.paginationDisabledClass)))),m(),p(),u()},disable:f,render:p,update:u,init:m,destroy:h})}function sa(e){let{swiper:n,extendParams:t,on:r,emit:i}=e;const a=Mr();let s,o,l,d,c=!1,u=null,p=null;function m(){if(!n.params.scrollbar.el||!n.scrollbar.el)return;const{scrollbar:e,rtlTranslate:t}=n,{dragEl:r,el:i}=e,a=n.params.scrollbar,s=n.params.loop?n.progressLoop:n.progress;let d=o,c=(l-o)*s;t?(c=-c,c>0?(d=o-c,c=0):-c+o>l&&(d=l+c)):c<0?(d=o+c,c=0):c+o>l&&(d=l-c),n.isHorizontal()?(r.style.transform=`translate3d(${c}px, 0, 0)`,r.style.width=`${d}px`):(r.style.transform=`translate3d(0px, ${c}px, 0)`,r.style.height=`${d}px`),a.hide&&(clearTimeout(u),i.style.opacity=1,u=setTimeout((()=>{i.style.opacity=0,i.style.transitionDuration="400ms"}),1e3))}function h(){if(!n.params.scrollbar.el||!n.scrollbar.el)return;const{scrollbar:e}=n,{dragEl:t,el:r}=e;t.style.width="",t.style.height="",l=n.isHorizontal()?r.offsetWidth:r.offsetHeight,d=n.size/(n.virtualSize+n.params.slidesOffsetBefore-(n.params.centeredSlides?n.snapGrid[0]:0)),o="auto"===n.params.scrollbar.dragSize?l*d:parseInt(n.params.scrollbar.dragSize,10),n.isHorizontal()?t.style.width=`${o}px`:t.style.height=`${o}px`,r.style.display=d>=1?"none":"",n.params.scrollbar.hide&&(r.style.opacity=0),n.params.watchOverflow&&n.enabled&&e.el.classList[n.isLocked?"add":"remove"](n.params.scrollbar.lockClass)}function f(e){return n.isHorizontal()?e.clientX:e.clientY}function g(e){const{scrollbar:t,rtlTranslate:r}=n,{el:i}=t;let a;a=(f(e)-function(e){const n=Wr(),t=Mr(),r=e.getBoundingClientRect(),i=t.body,a=e.clientTop||i.clientTop||0,s=e.clientLeft||i.clientLeft||0,o=e===n?n.scrollY:e.scrollTop,l=e===n?n.scrollX:e.scrollLeft;return{top:r.top+o-a,left:r.left+l-s}}(i)[n.isHorizontal()?"left":"top"]-(null!==s?s:o/2))/(l-o),a=Math.max(Math.min(a,1),0),r&&(a=1-a);const d=n.minTranslate()+(n.maxTranslate()-n.minTranslate())*a;n.updateProgress(d),n.setTranslate(d),n.updateActiveIndex(),n.updateSlidesClasses()}function C(e){const t=n.params.scrollbar,{scrollbar:r,wrapperEl:a}=n,{el:o,dragEl:l}=r;c=!0,s=e.target===l?f(e)-e.target.getBoundingClientRect()[n.isHorizontal()?"left":"top"]:null,e.preventDefault(),e.stopPropagation(),a.style.transitionDuration="100ms",l.style.transitionDuration="100ms",g(e),clearTimeout(p),o.style.transitionDuration="0ms",t.hide&&(o.style.opacity=1),n.params.cssMode&&(n.wrapperEl.style["scroll-snap-type"]="none"),i("scrollbarDragStart",e)}function A(e){const{scrollbar:t,wrapperEl:r}=n,{el:a,dragEl:s}=t;c&&(e.preventDefault&&e.cancelable?e.preventDefault():e.returnValue=!1,g(e),r.style.transitionDuration="0ms",a.style.transitionDuration="0ms",s.style.transitionDuration="0ms",i("scrollbarDragMove",e))}function v(e){const t=n.params.scrollbar,{scrollbar:r,wrapperEl:a}=n,{el:s}=r;c&&(c=!1,n.params.cssMode&&(n.wrapperEl.style["scroll-snap-type"]="",a.style.transitionDuration=""),t.hide&&(clearTimeout(p),p=Br((()=>{s.style.opacity=0,s.style.transitionDuration="400ms"}),1e3)),i("scrollbarDragEnd",e),t.snapOnRelease&&n.slideToClosest())}function b(e){const{scrollbar:t,params:r}=n,i=t.el;if(!i)return;const s=i,o=!!r.passiveListeners&&{passive:!1,capture:!1},l=!!r.passiveListeners&&{passive:!0,capture:!1};if(!s)return;const d="on"===e?"addEventListener":"removeEventListener";s[d]("pointerdown",C,o),a[d]("pointermove",A,o),a[d]("pointerup",v,l)}function y(){const{scrollbar:e,el:t}=n;n.params.scrollbar=ta(n,n.originalParams.scrollbar,n.params.scrollbar,{el:"swiper-scrollbar"});const r=n.params.scrollbar;if(!r.el)return;let i,s;if("string"==typeof r.el&&n.isElement&&(i=n.el.querySelector(r.el)),i||"string"!=typeof r.el)i||(i=r.el);else if(i=a.querySelectorAll(r.el),!i.length)return;n.params.uniqueNavElements&&"string"==typeof r.el&&i.length>1&&1===t.querySelectorAll(r.el).length&&(i=t.querySelector(r.el)),i.length>0&&(i=i[0]),i.classList.add(n.isHorizontal()?r.horizontalClass:r.verticalClass),i&&(s=i.querySelector(ia(n.params.scrollbar.dragClass)),s||(s=Zr("div",n.params.scrollbar.dragClass),i.append(s))),Object.assign(e,{el:i,dragEl:s}),r.draggable&&n.params.scrollbar.el&&n.scrollbar.el&&b("on"),i&&i.classList[n.enabled?"remove":"add"](...jr(n.params.scrollbar.lockClass))}function w(){const e=n.params.scrollbar,t=n.scrollbar.el;t&&t.classList.remove(...jr(n.isHorizontal()?e.horizontalClass:e.verticalClass)),n.params.scrollbar.el&&n.scrollbar.el&&b("off")}t({scrollbar:{el:null,dragSize:"auto",hide:!1,draggable:!1,snapOnRelease:!0,lockClass:"swiper-scrollbar-lock",dragClass:"swiper-scrollbar-drag",scrollbarDisabledClass:"swiper-scrollbar-disabled",horizontalClass:"swiper-scrollbar-horizontal",verticalClass:"swiper-scrollbar-vertical"}}),n.scrollbar={el:null,dragEl:null},r("changeDirection",(()=>{if(!n.scrollbar||!n.scrollbar.el)return;const e=n.params.scrollbar;let{el:t}=n.scrollbar;t=ni(t),t.forEach((t=>{t.classList.remove(e.horizontalClass,e.verticalClass),t.classList.add(n.isHorizontal()?e.horizontalClass:e.verticalClass)}))})),r("init",(()=>{!1===n.params.scrollbar.enabled?S():(y(),h(),m())})),r("update resize observerUpdate lock unlock changeDirection",(()=>{h()})),r("setTranslate",(()=>{m()})),r("setTransition",((e,t)=>{!function(e){n.params.scrollbar.el&&n.scrollbar.el&&(n.scrollbar.dragEl.style.transitionDuration=`${e}ms`)}(t)})),r("enable disable",(()=>{const{el:e}=n.scrollbar;e&&e.classList[n.enabled?"remove":"add"](...jr(n.params.scrollbar.lockClass))})),r("destroy",(()=>{w()}));const S=()=>{n.el.classList.add(...jr(n.params.scrollbar.scrollbarDisabledClass)),n.scrollbar.el&&n.scrollbar.el.classList.add(...jr(n.params.scrollbar.scrollbarDisabledClass)),w()};Object.assign(n.scrollbar,{enable:()=>{n.el.classList.remove(...jr(n.params.scrollbar.scrollbarDisabledClass)),n.scrollbar.el&&n.scrollbar.el.classList.remove(...jr(n.params.scrollbar.scrollbarDisabledClass)),y(),h(),m()},disable:S,updateSize:h,setTranslate:m,init:y,destroy:w})}function oa(e){let{swiper:n,extendParams:t,on:r}=e;t({a11y:{enabled:!0,notificationClass:"swiper-notification",prevSlideMessage:"Previous slide",nextSlideMessage:"Next slide",firstSlideMessage:"This is the first slide",lastSlideMessage:"This is the last slide",paginationBulletMessage:"Go to slide {{index}}",slideLabelMessage:"{{index}} / {{slidesLength}}",containerMessage:null,containerRoleDescriptionMessage:null,containerRole:null,itemRoleDescriptionMessage:null,slideRole:"group",id:null,scrollOnFocus:!0}}),n.a11y={clicked:!1};let i,a,s=null,o=(new Date).getTime();function l(e){const n=s;0!==n.length&&(n.innerHTML="",n.innerHTML=e)}function d(e){(e=ni(e)).forEach((e=>{e.setAttribute("tabIndex","0")}))}function c(e){(e=ni(e)).forEach((e=>{e.setAttribute("tabIndex","-1")}))}function u(e,n){(e=ni(e)).forEach((e=>{e.setAttribute("role",n)}))}function p(e,n){(e=ni(e)).forEach((e=>{e.setAttribute("aria-roledescription",n)}))}function m(e,n){(e=ni(e)).forEach((e=>{e.setAttribute("aria-label",n)}))}function h(e){(e=ni(e)).forEach((e=>{e.setAttribute("aria-disabled",!0)}))}function f(e){(e=ni(e)).forEach((e=>{e.setAttribute("aria-disabled",!1)}))}function g(e){if(13!==e.keyCode&&32!==e.keyCode)return;const t=n.params.a11y,r=e.target;if(!n.pagination||!n.pagination.el||r!==n.pagination.el&&!n.pagination.el.contains(e.target)||e.target.matches(ia(n.params.pagination.bulletClass))){if(n.navigation&&n.navigation.prevEl&&n.navigation.nextEl){const e=ni(n.navigation.prevEl);ni(n.navigation.nextEl).includes(r)&&(n.isEnd&&!n.params.loop||n.slideNext(),n.isEnd?l(t.lastSlideMessage):l(t.nextSlideMessage)),e.includes(r)&&(n.isBeginning&&!n.params.loop||n.slidePrev(),n.isBeginning?l(t.firstSlideMessage):l(t.prevSlideMessage))}n.pagination&&r.matches(ia(n.params.pagination.bulletClass))&&r.click()}}function C(){return n.pagination&&n.pagination.bullets&&n.pagination.bullets.length}function A(){return C()&&n.params.pagination.clickable}const v=(e,n,t)=>{d(e),"BUTTON"!==e.tagName&&(u(e,"button"),e.addEventListener("keydown",g)),m(e,t),function(e,n){(e=ni(e)).forEach((e=>{e.setAttribute("aria-controls",n)}))}(e,n)},b=e=>{a&&a!==e.target&&!a.contains(e.target)&&(i=!0),n.a11y.clicked=!0},y=()=>{i=!1,requestAnimationFrame((()=>{requestAnimationFrame((()=>{n.destroyed||(n.a11y.clicked=!1)}))}))},w=e=>{o=(new Date).getTime()},S=e=>{if(n.a11y.clicked||!n.params.a11y.scrollOnFocus)return;if((new Date).getTime()-o<100)return;const t=e.target.closest(`.${n.params.slideClass}, swiper-slide`);if(!t||!n.slides.includes(t))return;a=t;const r=n.slides.indexOf(t)===n.activeIndex,s=n.params.watchSlidesProgress&&n.visibleSlides&&n.visibleSlides.includes(t);r||s||e.sourceCapabilities&&e.sourceCapabilities.firesTouchEvents||(n.isHorizontal()?n.el.scrollLeft=0:n.el.scrollTop=0,requestAnimationFrame((()=>{i||(n.params.loop?n.slideToLoop(parseInt(t.getAttribute("data-swiper-slide-index")),0):n.slideTo(n.slides.indexOf(t),0),i=!1)})))},P=()=>{const e=n.params.a11y;e.itemRoleDescriptionMessage&&p(n.slides,e.itemRoleDescriptionMessage),e.slideRole&&u(n.slides,e.slideRole);const t=n.slides.length;e.slideLabelMessage&&n.slides.forEach(((r,i)=>{const a=n.params.loop?parseInt(r.getAttribute("data-swiper-slide-index"),10):i;m(r,e.slideLabelMessage.replace(/\{\{index\}\}/,a+1).replace(/\{\{slidesLength\}\}/,t))}))};r("beforeInit",(()=>{s=Zr("span",n.params.a11y.notificationClass),s.setAttribute("aria-live","assertive"),s.setAttribute("aria-atomic","true")})),r("afterInit",(()=>{n.params.a11y.enabled&&(()=>{const e=n.params.a11y;n.el.append(s);const t=n.el;e.containerRoleDescriptionMessage&&p(t,e.containerRoleDescriptionMessage),e.containerMessage&&m(t,e.containerMessage),e.containerRole&&u(t,e.containerRole);const r=n.wrapperEl,i=e.id||r.getAttribute("id")||`swiper-wrapper-${a=16,void 0===a&&(a=16),"x".repeat(a).replace(/x/g,(()=>Math.round(16*Math.random()).toString(16)))}`;var a;const o=n.params.autoplay&&n.params.autoplay.enabled?"off":"polite";var l;l=i,ni(r).forEach((e=>{e.setAttribute("id",l)})),function(e,n){(e=ni(e)).forEach((e=>{e.setAttribute("aria-live",n)}))}(r,o),P();let{nextEl:d,prevEl:c}=n.navigation?n.navigation:{};d=ni(d),c=ni(c),d&&d.forEach((n=>v(n,i,e.nextSlideMessage))),c&&c.forEach((n=>v(n,i,e.prevSlideMessage))),A()&&ni(n.pagination.el).forEach((e=>{e.addEventListener("keydown",g)})),Mr().addEventListener("visibilitychange",w),n.el.addEventListener("focus",S,!0),n.el.addEventListener("focus",S,!0),n.el.addEventListener("pointerdown",b,!0),n.el.addEventListener("pointerup",y,!0)})()})),r("slidesLengthChange snapGridLengthChange slidesGridLengthChange",(()=>{n.params.a11y.enabled&&P()})),r("fromEdge toEdge afterInit lock unlock",(()=>{n.params.a11y.enabled&&function(){if(n.params.loop||n.params.rewind||!n.navigation)return;const{nextEl:e,prevEl:t}=n.navigation;t&&(n.isBeginning?(h(t),c(t)):(f(t),d(t))),e&&(n.isEnd?(h(e),c(e)):(f(e),d(e)))}()})),r("paginationUpdate",(()=>{n.params.a11y.enabled&&function(){const e=n.params.a11y;C()&&n.pagination.bullets.forEach((t=>{n.params.pagination.clickable&&(d(t),n.params.pagination.renderBullet||(u(t,"button"),m(t,e.paginationBulletMessage.replace(/\{\{index\}\}/,Kr(t)+1)))),t.matches(ia(n.params.pagination.bulletActiveClass))?t.setAttribute("aria-current","true"):t.removeAttribute("aria-current")}))}()})),r("destroy",(()=>{n.params.a11y.enabled&&function(){s&&s.remove();let{nextEl:e,prevEl:t}=n.navigation?n.navigation:{};e=ni(e),t=ni(t),e&&e.forEach((e=>e.removeEventListener("keydown",g))),t&&t.forEach((e=>e.removeEventListener("keydown",g))),A()&&ni(n.pagination.el).forEach((e=>{e.removeEventListener("keydown",g)})),Mr().removeEventListener("visibilitychange",w),n.el&&"string"!=typeof n.el&&(n.el.removeEventListener("focus",S,!0),n.el.removeEventListener("pointerdown",b,!0),n.el.removeEventListener("pointerup",y,!0))}()}))}var la,da,ca,ua,pa,ma,ha,fa,ga;function Ca(e,n){return n||(n=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(n)}}))}na.displayName="SwiperSlide";var Aa=tr.div(la||(la=Ca(['\n    position: relative;\n    max-height: 27.25rem;\n    \n    img {\n        max-height: 27.25rem;\n    }\n\n    .fundo, .fundo2 {\n        position: absolute;\n        top: 0;\n        transition: transform 0.1s ease-out;\n    }\n\n    @media (max-width: 768px) {\n        .fundo, .fundo2 {\n            height: 100%;\n            position: static;\n        }\n\n        .fundo {\n            content: url("/imagens/banner/mobile/mobile3.png");\n        }\n\n        .fundo2 {\n            content: url("/imagens/banner/mobile/mobile3.png");\n        }\n    }\n']))),va=(tr.div(da||(da=Ca(["\n    background-color: #edeadf;\n    height: 94px;\n    width: 100%;\n    position: absolute;\n    z-index: 10;\n    bottom: 0;\n    padding: 0 100px;\n    display: flex;\n    align-items: center;\n\n    @media (max-width: 768px) {\n        display: none;\n    }\n"]))),tr.div(ca||(ca=Ca(["\n    position: absolute;\n    z-index: 20;\n    bottom: -34px;\n    right: 750px;\n    transition: transform 0.1s ease-out;\n\n    img {\n        height: 100%;\n    }\n\n    #pimenta2 {\n        height: 300px;\n    }\n\n\n"]))),tr.div(ua||(ua=Ca(["\n    position: absolute;\n    z-index: 20;\n    top: 20px;\n    //left: -150px;\n    transition: transform 0.1s ease-out;\n\n    #pimenta1 {\n        height: 250px;\n    }\n\n    img {\n        height: 90%;\n    }\n\n    #limao2 {\n        height: 250px;\n    }\n"]))),tr.div(pa||(pa=Ca(["\n    z-index: 2;\n    bottom: 20px;\n    left: -642px;\n    transition: transform 0.1s ease-out;\n\n    button {\n        color: #EDEADF;\n        text-align: center;\n        font-family: Poppins;\n        font-size: 1rem;\n        font-style: normal;\n        font-weight: 900;\n        line-height: normal;\n\n        width: 14.1875rem;\n        height: 3.0625rem;\n\n        border: none;\n        border-radius: 0.625rem;\n        background: #F00;\n\n        cursor: pointer;\n        transition: all 0.3s;\n    }\n\n    button:hover {\n        background: #d55757;\n        transform: scale(1.1);\n    }\n\n    img {\n        height: 100%;\n    }\n"]))),tr.div(ma||(ma=Ca(["\n    max-width: 1440px;\n    width: 100%;\n    position: relative;\n    height: 660px;\n    margin: 0 auto;\n    z-index: 10;\n\n    @media (max-width: 768px) {\n        height: auto;\n        display: none;\n    }\n"]))),tr.div(ha||(ha=Ca(["\n    max-width: 1440px;\n    width: 100%;\n    position: absolute;\n    height: 660px;\n    margin: 0 auto;\n    z-index: 20;\n    left: 50%;\n\n    @media (max-width: 768px) {\n        height: auto;\n        display: none;\n    }\n"]))),tr.div(fa||(fa=Ca(["\n\n"]))),tr.div(ga||(ga=Ca(["\n\n"]))),i(379)),ba=i.n(va),ya=i(795),wa=i.n(ya),Sa=i(569),Pa=i.n(Sa),Ea=i(565),_a=i.n(Ea),Da=i(216),Ia=i.n(Da),xa=i(589),Oa=i.n(xa),ka=i(709),La={};function Ua(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,i,a,s,o=[],l=!0,d=!1;try{if(a=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=a.call(t)).done)&&(o.push(r.value),o.length!==n);l=!0);}catch(e){d=!0,i=e}finally{try{if(!l&&null!=t.return&&(s=t.return(),Object(s)!==s))return}finally{if(d)throw i}}return o}}(e,n)||function(e,n){if(e){if("string"==typeof e)return Ta(e,n);var t={}.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Ta(e,n):void 0}}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Ta(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=Array(n);t<n;t++)r[t]=e[t];return r}La.styleTagTransform=Oa(),La.setAttributes=_a(),La.insert=Pa().bind(null,"head"),La.domAPI=wa(),La.insertStyleElement=Ia(),ba()(ka.Z,La),ka.Z&&ka.Z.locals&&ka.Z.locals;const Ra=function(){var e=Ua((0,n.useState)({x:0,y:0}),2),t=(e[0],e[1]),r=Ua((0,n.useState)({x:0,y:0}),2),i=(r[0],r[1]);return(0,n.useEffect)((function(){var e=function(){t({x:.08*window.scrollY,y:0}),i({x:.08*window.scrollY,y:0})};return window.addEventListener("scroll",e),function(){return window.removeEventListener("scroll",e)}}),[]),(0,dr.jsx)(Aa,{children:(0,dr.jsx)(ea,{modules:[sa,oa],slidesPerView:1,scrollbar:{draggable:!0},onSlideChange:function(){return console.log("slide change")},onSwiper:function(e){return console.log(e)},children:(0,dr.jsx)(na,{children:(0,dr.jsx)("img",{src:"imagens/banner/banner.jpg",alt:"Banner1"})},0)})})},Fa=function(){return(0,dr.jsx)(Ur,{children:(0,dr.jsx)(Ra,{})})};var Ma,Na,Wa;function ja(e,n){return n||(n=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(n)}}))}var Ba=tr.div(Ma||(Ma=ja(["\n    width: 6.5rem;\n    height: 6.5rem;\n    flex-shrink: 0;\n    border-radius: 0.75rem;\n    background: ",";\n    box-shadow: rgba(99, 99, 99, 0.2) 0px 2px 8px 0px;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    text-align: center;\n    cursor: pointer;\n    transition: background 0.3s ease, transform 0.3s ease;\n    animation: zoomIn 0.5s ease;\n    /* Faz com que cada card se alinhe no início do container */\n    scroll-snap-align: start;\n\n    &:hover {\n        transform: translateY(-5px);\n    }\n\n    @keyframes zoomIn {\n        from {\n            transform: scale(0.8);\n            opacity: 0;\n        }\n        to {\n            transform: scale(1);\n            opacity: 1;\n        }\n    }\n"])),(function(e){return e.active?"#FF3131":"#FFF"})),za=tr.div(Na||(Na=ja(["\n    /* Se preferir, pode usar um tamanho fixo em rem também, ou ajustar de forma relativa */\n    width: 2.5rem;\n    height: 2.5rem;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n"]))),Va=tr.div(Wa||(Wa=ja(['\n    margin-top: 0.5rem;\n    font-family: "Poppins", sans-serif;\n    font-size: 0.75rem;\n    font-style: normal;\n    font-weight: 400;\n    line-height: normal;\n    color: ',";\n"])),(function(e){return e.active?"#FFF":"#000"}));const Ha=function(e){var n=e.icon,t=e.title,r=e.active,i=e.onClick;return(0,dr.jsx)("div",{onClick:i,children:(0,dr.jsxs)(Ba,{active:r,children:[(0,dr.jsx)(za,{active:r,children:n}),(0,dr.jsx)(Va,{active:r,children:t})]})})};var Ja,Ga,$a,Ya;function qa(e,n){return n||(n=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(n)}}))}var Za=tr.div(Ja||(Ja=qa(["\n    .swiper-wrapper {\n        padding: 1rem 0;\n    }\n\n    @media (min-width: 769px) {\n        background-color: #fff;\n        align-items: center;\n        justify-content: flex-start;\n        padding-top: 1.2em;\n        padding-bottom: 1.2em;\n\n        .swiper {\n            padding-left: 0;\n            margin-left: 0;\n        }\n    }\n\n    @media (max-width: 768px) {\n        position: sticky;\n        top: 0;           /* Quando o elemento atingir 0px do topo, ele se fixa */\n        z-index: 1000;    /* Garante que o menu fique acima dos outros elementos, como o banner */\n        background: var(--background);\n\n        .swiper {\n            padding-left: 1.25rem;\n        }\n    }\n"]))),Qa=tr.div(Ga||(Ga=qa(["\n    max-width: 1440px;\n    margin: 0 auto;\n    display: flex;\n    background-color: #fff;\n    align-items: center;\n    justify-content: flex-start;\n    padding: 1.2rem 2rem;\n\n    @media screen and (min-width: 768px) {\n        .swiper {\n            padding-left: 0 !important;\n        }\n    }\n    \n    @media screen and (max-width: 768px) {\n        padding: 1.2rem 0;\n    }\n\n"]))),Ka=tr.div($a||($a=qa(["\n    position: relative;\n    display: flex;\n    width: 100%;\n    max-width: 600px;\n    justify-content: center;\n    margin-top: 1rem;\n\n    input {\n        width: 100%;\n        height: 3rem;\n        border-radius: 0 1.25rem 1.25rem 0;\n        background: #F3F3F3;\n        border: none;\n        color: #B0AEA7;\n        padding-left: 1rem;\n        font-size: 1rem;\n        margin-left: 2rem;\n    }\n\n    input::placeholder {\n        color: #B0AEA7;\n    }\n\n    input:focus {\n        outline: none;\n    }\n\n    /* Esconde a search bar em telas menores que 768px */\n    @media (max-width: 768px) {\n        display: none;\n    }\n\n    @media (max-width: 480px) {\n        input {\n            max-width: 250px;\n            height: 2.2rem;\n            font-size: 0.8rem;\n        }\n    }\n"]))),Xa=tr.button(Ya||(Ya=qa(["\n    position: absolute;\n    right: 1rem;\n    top: 50%;\n    transform: translateY(-50%);\n    border: none;\n    background: none;\n    cursor: pointer;\n    transition: transform 0.2s ease-in-out, stroke 0.3s ease-in-out;\n\n    &:hover {\n        transform: scale(1.2);\n    }\n\n    &:active {\n        transform: scale(0.9);\n    }\n\n    svg {\n        transition: stroke 0.3s ease-in-out;\n    }\n\n    &:active svg {\n        stroke: #FF6347;\n    }\n"])));const es=function(e){var n=e.activeFilter,t=e.onFilterClick;return(0,dr.jsx)(Za,{children:(0,dr.jsxs)(Qa,{children:[(0,dr.jsxs)(ea,{slidesPerView:"auto",spaceBetween:20,freeMode:!0,style:{paddingLeft:"1.25rem"},children:[(0,dr.jsx)(na,{style:{width:"auto"},children:(0,dr.jsx)(Ha,{active:"novidades"===n,icon:(0,dr.jsx)(pr,{active:"novidades"===n}),title:"novidades",onClick:function(){return t("novidades")}})}),(0,dr.jsx)(na,{style:{width:"auto"},children:(0,dr.jsx)(Ha,{active:"fritura"===n,icon:(0,dr.jsx)(mr,{active:"fritura"===n}),title:"linha fritura",onClick:function(){return t("fritura")}})}),(0,dr.jsx)(na,{style:{width:"auto"},children:(0,dr.jsx)(Ha,{active:"forno"===n,icon:(0,dr.jsx)(hr,{active:"forno"===n}),title:"linha forno",onClick:function(){return t("forno")}})}),(0,dr.jsx)(na,{style:{width:"auto"},children:(0,dr.jsx)(Ha,{active:"frito-congelado"===n,icon:(0,dr.jsx)(fr,{active:"frito-congelado"===n}),title:"linha frito congelado",onClick:function(){return t("frito-congelado")}})}),(0,dr.jsx)(na,{style:{opacity:"0",width:"1px"},children:(0,dr.jsx)(Ha,{active:"frito-congelado"===n,icon:(0,dr.jsx)(fr,{}),title:"linha frito congelado",onClick:function(){return t("frito-congelado")}})})]}),(0,dr.jsxs)(Ka,{children:[(0,dr.jsx)("input",{type:"text",placeholder:"Pesquisar"}),(0,dr.jsx)(Xa,{children:(0,dr.jsx)("svg",{xmlns:"http://www.w3.org/2000/svg",width:"25",height:"24",viewBox:"0 0 25 24",fill:"none",children:(0,dr.jsx)("path",{d:"M15.8447 15.8111L21.0422 21M18.0462 10.5C18.0462 14.6421 14.6929 18 10.5564 18C6.41994 18 3.06665 14.6421 3.06665 10.5C3.06665 6.35786 6.41994 3 10.5564 3C14.6929 3 18.0462 6.35786 18.0462 10.5Z",stroke:"#B0AEA7",strokeWidth:"2",strokeLinecap:"round",strokeLinejoin:"round"})})})]})]})})},ns=JSON.parse('[{"nome":"Kibe","urlfoto":"imagens/salgadinhos/salgadinho1.jpg","descricao":"Tradicional kibe fritura com recheio de carne temperada e toque de hortelã.","quantidade_unidades":50,"categoria":"fritura","novidade":false},{"nome":"Coxinha de Frango","urlfoto":"imagens/salgadinhos/salgadinho2.jpg","descricao":"Clássica coxinha de frango com recheio cremoso e massa leve.","quantidade_unidades":50,"categoria":"frito-congelado","novidade":false},{"nome":"Mini Churros","urlfoto":"imagens/salgadinhos/salgadinho3.jpg","descricao":"Mini churros crocantes recheados com doce de leite, ideais para sobremesas.","quantidade_unidades":50,"categoria":"forno","novidade":true},{"nome":"Bolinha de Queijo","urlfoto":"imagens/salgadinhos/salgadinho4.jpg","descricao":"Deliciosa bolinha recheada com queijo cremoso, perfeita para festas.","quantidade_unidades":50,"categoria":"fritura","novidade":false},{"nome":"Enroladinho de Salsicha","urlfoto":"imagens/salgadinhos/salgadinho5.jpg","descricao":"Massa macia e saborosa recheada com salsicha, ideal para lanches.","quantidade_unidades":50,"categoria":"frito-congelado","novidade":true},{"nome":"Risole de Carne","urlfoto":"imagens/salgadinhos/salgadinho6.jpg","descricao":"Risole crocante com recheio suculento de carne moída bem temperada.","quantidade_unidades":50,"categoria":"forno","novidade":false},{"nome":"Coxinha de Calabresa","urlfoto":"imagens/salgadinhos/salgadinho7.jpg","descricao":"Coxinha recheada com calabresa picada e temperada, sabor marcante.","quantidade_unidades":50,"categoria":"fritura","novidade":true},{"nome":"Croquete de Carne","urlfoto":"imagens/salgadinhos/salgadinho8.jpg","descricao":"Croquete com carne desfiada e temperos especiais, empanado e crocante.","quantidade_unidades":50,"categoria":"fritura","novidade":false},{"nome":"Empadinha de Frango","urlfoto":"imagens/salgadinhos/salgadinho9.jpg","descricao":"Empadinha de massa amanteigada com recheio cremoso de frango desfiado.","quantidade_unidades":50,"categoria":"forno","novidade":true},{"nome":"Pastelzinho de Queijo","urlfoto":"imagens/salgadinhos/salgadinho10.jpg","descricao":"Mini pastel recheado com queijo mussarela derretido e massa crocante.","quantidade_unidades":50,"categoria":"frito-congelado","novidade":false},{"nome":"Esfiha de Carne","urlfoto":"imagens/salgadinhos/salgadinho11.jpg","descricao":"Esfiha de massa leve recheada com carne moída e temperos tradicionais.","quantidade_unidades":50,"categoria":"forno","novidade":false},{"nome":"Kibe","urlfoto":"imagens/salgadinhos/salgadinho1.jpg","descricao":"Tradicional kibe fritura com recheio de carne temperada e toque de hortelã.","quantidade_unidades":50,"categoria":"fritura","novidade":false},{"nome":"Coxinha de Frango","urlfoto":"imagens/salgadinhos/salgadinho2.jpg","descricao":"Clássica coxinha de frango com recheio cremoso e massa leve.","quantidade_unidades":50,"categoria":"frito-congelado","novidade":false},{"nome":"Mini Churros","urlfoto":"imagens/salgadinhos/salgadinho3.jpg","descricao":"Mini churros crocantes recheados com doce de leite, ideais para sobremesas.","quantidade_unidades":50,"categoria":"forno","novidade":true},{"nome":"Bolinha de Queijo","urlfoto":"imagens/salgadinhos/salgadinho4.jpg","descricao":"Deliciosa bolinha recheada com queijo cremoso, perfeita para festas.","quantidade_unidades":50,"categoria":"fritura","novidade":false},{"nome":"Enroladinho de Salsicha","urlfoto":"imagens/salgadinhos/salgadinho5.jpg","descricao":"Massa macia e saborosa recheada com salsicha, ideal para lanches.","quantidade_unidades":50,"categoria":"frito-congelado","novidade":true},{"nome":"Risole de Carne","urlfoto":"imagens/salgadinhos/salgadinho6.jpg","descricao":"Risole crocante com recheio suculento de carne moída bem temperada.","quantidade_unidades":50,"categoria":"forno","novidade":false},{"nome":"Coxinha de Calabresa","urlfoto":"imagens/salgadinhos/salgadinho7.jpg","descricao":"Coxinha recheada com calabresa picada e temperada, sabor marcante.","quantidade_unidades":50,"categoria":"fritura","novidade":true},{"nome":"Croquete de Carne","urlfoto":"imagens/salgadinhos/salgadinho8.jpg","descricao":"Croquete com carne desfiada e temperos especiais, empanado e crocante.","quantidade_unidades":50,"categoria":"fritura","novidade":false},{"nome":"Empadinha de Frango","urlfoto":"imagens/salgadinhos/salgadinho9.jpg","descricao":"Empadinha de massa amanteigada com recheio cremoso de frango desfiado.","quantidade_unidades":50,"categoria":"forno","novidade":true},{"nome":"Pastelzinho de Queijo","urlfoto":"imagens/salgadinhos/salgadinho10.jpg","descricao":"Mini pastel recheado com queijo mussarela derretido e massa crocante.","quantidade_unidades":50,"categoria":"frito-congelado","novidade":false},{"nome":"Esfiha de Carne","urlfoto":"imagens/salgadinhos/salgadinho11.jpg","descricao":"Esfiha de massa leve recheada com carne moída e temperos tradicionais.","quantidade_unidades":50,"categoria":"forno","novidade":false}]');var ts,rs,is,as,ss;function os(e,n){return n||(n=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(n)}}))}var ls,ds,cs,us,ps,ms=tr.div(ts||(ts=os(["\n    height: 33.875rem;\n    flex-shrink: 0;\n    padding: 2rem 2rem 0;\n    \n    @media (max-width: 768px) {\n        height: 100%;\n    }\n"]))),hs=tr.div(rs||(rs=os(["\n    max-width: 1440px;\n    margin: auto;\n    \n    @media(min-width: 768px) {\n        .swiper {\n            padding-top: 3.25rem;\n            padding-right: 12.5rem;\n            padding-left: 12.5em;\n        }\n    }\n"]))),fs=tr.div(is||(is=os(["\n    color: var(--destaque);\n    font-style: normal;\n    padding-top: var(--margin-top);\n    font-size: 24px;\n    line-height: 32px;\n    font-weight: 500;\n    \n    @media (max-width: 768px) {\n        margin-left: 0;\n        padding: 1.44rem 1rem 0;\n        text-align: center;\n    }\n"]))),gs=(tr.div(as||(as=os(["\n    margin-top: 3.25rem;\n    display: flex;\n    gap: 1.62rem;\n    overflow: hidden;\n"]))),tr.div(ss||(ss=os(["\n    .swiper-pagination {\n        margin-top: 2.63rem;\n        position: relative;\n        display: flex;\n        justify-content: center;\n        align-items: center;\n    }\n\n    .swiper-pagination-bullet {\n        width: 12px;\n        height: 12px;\n        background-color: #d9d9d9; /* Cinza */\n        opacity: 1;\n        transition: all 0.3s ease;\n    }\n\n    .swiper-pagination-bullet-active {\n        width: 30px; /* Mais largo */\n        height: 12px; /* Mesma altura */\n        background-color: red; /* Vermelho */\n        border-radius: 20px; /* Arredondado */\n    }\n    \n    @media (max-width: 768px) {\n        .swiper.swiper-initialized.swiper-horizontal{\n            padding-top: 1.69rem;\n        }\n    }\n"]))));function Cs(e,n){return n||(n=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(n)}}))}var As=tr.div(ls||(ls=Cs(["\n    max-width: 20.875rem;\n    border-radius: 0.75rem;\n    background: #FFF;\n    display: flex;\n    flex-direction: column;\n    overflow: hidden;\n    transition: transform 0.3s ease, box-shadow 0.3s ease;\n    opacity: 0;\n    animation: fadeIn 0.6s ease-in-out forwards;\n\n    &:hover {\n        transform: translateY(-10px);\n        box-shadow: rgba(99, 99, 99, 0.2) 0px 2px 8px 0px;\n\n    }\n\n    @keyframes fadeIn {\n        from {\n            opacity: 0;\n            transform: translateY(10px);\n        }\n        to {\n            opacity: 1;\n            transform: translateY(0);\n        }\n    };\n"]))),vs=tr.div(ds||(ds=Cs(["\n    width: 100%;\n    height: 11.9375rem;\n    border-radius: 1.25rem 1.25rem 0 0;\n    background: #D9D9D9;\n    overflow: hidden;\n    position: relative;\n\n    img {\n        width: 100%;\n        height: 100%;\n        object-fit: cover;\n        transition: transform 0.3s ease;\n    }\n    \n"]))),bs=tr.div(cs||(cs=Cs(["\n    padding: 0.75rem 2.5rem;\n    height: 7rem;\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n"]))),ys=tr.h2(us||(us=Cs(["\n    font-family: Poppins, sans-serif;\n    font-weight: 500;\n    margin-top: 1.13rem;\n    color: #131313;\n    font-style: normal;\n    text-align: left;\n    font-size: 17px;\n    line-height: 22px;\n"]))),ws=tr.p(ps||(ps=Cs(["\n    font-family: Poppins, sans-serif;\n    max-width: 19.375rem;\n    max-height: 3rem;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    font-style: normal;\n    text-align: left;\n    font-weight: 500;\n    line-height: 22px;\n    width: 80%;\n    font-size: 0.9rem;\n    color: #555;\n    margin-top: 0.5rem;\n    transition: opacity 0.3s ease-in-out;\n"])));const Ss=function(e){var n=e.imgUrl,t=e.titulo,r=e.descricao,i=e.onClick;return(0,dr.jsxs)(As,{onClick:i,children:[" ",(0,dr.jsx)(vs,{children:(0,dr.jsx)("img",{src:n,alt:t})}),(0,dr.jsxs)(bs,{children:[(0,dr.jsx)(ys,{children:t}),(0,dr.jsx)(ws,{children:r})]})]})};var Ps,Es,_s,Ds,Is,xs,Os,ks,Ls,Us;function Ts(e,n){return n||(n=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(n)}}))}var Rs=tr.div(Ps||(Ps=Ts(["\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background: rgba(0, 0, 0, 0.5);\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    z-index: 9999;\n    opacity: 0;\n    animation: fadeIn 0.3s ease-out forwards;\n\n    @media (max-width: 768px) {\n        align-items: flex-end;\n    }\n\n    @keyframes fadeIn {\n        from {\n            opacity: 0;\n        }\n        to {\n            opacity: 1;\n        }\n    }\n"]))),Fs=tr.div(Es||(Es=Ts(["\n    background: white;\n    width: 45rem;\n    border-radius: 10px;\n    text-align: center;\n    position: relative;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    max-height: 90vh;\n    overflow-y: auto;\n\n    @media (max-width: 768px) {\n        width: 100%;\n        height: 90vh;\n        border-radius: 0;\n        animation: slideUp 0.3s ease-out;\n    }\n\n    @keyframes slideUp {\n        from {\n            transform: translateY(100%);\n        }\n        to {\n            transform: translateY(0);\n        }\n    }\n"]))),Ms=tr.div(_s||(_s=Ts(["\n    width: 100%;\n    padding: 1rem 0;\n    font-size: 1.5rem;\n    font-weight: 700;\n    color: #FF3131;\n    text-align: center;\n    position: relative;\n    border-bottom: 1px solid #ddd;\n\n    @media (max-width: 768px) {\n        font-size: 1.25rem;\n        padding: 0.75rem 0;\n    }\n"]))),Ns=tr.button(Ds||(Ds=Ts(["\n    position: absolute;\n    left: 1rem;\n    top: 50%;\n    transform: translateY(-50%);\n    background: none;\n    border: none;\n    cursor: pointer;\n\n    @media (max-width: 768px) {\n        left: 0.75rem;\n        svg {\n            width: 18px;\n            height: 18px;\n        }\n    }\n"]))),Ws=tr.img(Is||(Is=Ts(["\n    width: 43.875rem;\n    height: 21.9375rem;\n    object-fit: cover;\n    flex-shrink: 0;\n    border-radius: 10px 10px 0 0;\n\n    @media (max-width: 768px) {\n        width: 100%;\n        border-radius: 0;\n        aspect-ratio: 16/9;\n    }\n"]))),js=tr.div(xs||(xs=Ts(["\n    margin-top: 1rem;\n    padding: 1rem;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n\n    @media (max-width: 768px) {\n        padding: 0.75rem;\n        margin-top: 0.5rem;\n    }\n"]))),Bs=tr.h3(Os||(Os=Ts(["\n    width: auto;\n    min-width: 4.4375rem;\n    height: auto;\n    color: #FF3131;\n    text-align: center;\n    font-family: Poppins;\n    font-size: 1.5rem;\n    font-weight: 700;\n    margin: 0;\n    padding: 0.5rem 0;\n\n    @media (max-width: 768px) {\n        font-size: 1.25rem;\n    }\n"]))),zs=tr.p(ks||(ks=Ts(["\n    width: 100%;\n    max-width: 31.4375rem;\n    height: auto;\n    color: #131313;\n    text-align: center;\n    margin: 0.5rem 0;\n    font-weight: 500;\n    font-size: 17px;\n    line-height: 22px;\n\n    @media (max-width: 768px) {\n        font-size: 0.875rem;\n        padding: 0 1rem;\n    }\n"]))),Vs=tr.span(Ls||(Ls=Ts(["\n    width: auto;\n    color: #FF3131;\n    text-align: center;\n    font-family: Poppins;\n    font-size: 0.75rem;\n    font-weight: 400;\n    margin: 0.5rem 0 1rem;\n\n    @media (max-width: 768px) {\n        font-size: 0.7rem;\n    }\n"]))),Hs=tr.a(Us||(Us=Ts(["\n    width: 14.84694rem;\n    height: 2.16519rem;\n    border-radius: 0.75rem;\n    background: #FF3131;\n    box-shadow: 0px 1px 4px 0px rgba(0, 0, 0, 0.25);\n    color: #FFF;\n    text-align: center;\n    font-size: 1rem;\n    font-weight: 400;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    text-decoration: none;\n    padding: 0.5rem 1rem;\n    cursor: pointer;\n\n    @media (max-width: 768px) {\n        width: calc(100% - 2rem);\n        max-width: 12rem;\n        height: 2rem;\n        font-size: 0.875rem;\n        position: sticky;\n        bottom: 1rem;\n        margin-top: auto;\n    }\n"])));const Js=function(e){var n=e.isOpen,t=e.onClose,r=e.salgadinho;return n&&r?(0,dr.jsx)(Rs,{id:"overlay",onClick:function(e){"overlay"===e.target.id&&t()},children:(0,dr.jsxs)(Fs,{onClick:function(e){return e.stopPropagation()},children:[" ",(0,dr.jsxs)(Ms,{children:["Cardápio",(0,dr.jsx)(Ns,{onClick:t,children:(0,dr.jsx)("svg",{xmlns:"http://www.w3.org/2000/svg",width:"21",height:"21",viewBox:"0 0 21 21",fill:"none",children:(0,dr.jsx)("path",{d:"M7.875 11.375L10.5 14M10.5 14L13.125 11.375M10.5 14V7M18.375 10.5C18.375 14.8493 14.8493 18.375 10.5 18.375C6.15076 18.375 2.625 14.8493 2.625 10.5C2.625 6.15076 6.15076 2.625 10.5 2.625C14.8493 2.625 18.375 6.15076 18.375 10.5Z",stroke:"#FF3131","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"})})})]}),(0,dr.jsx)(Ws,{src:r.urlfoto,alt:r.nome}),(0,dr.jsxs)(js,{children:[(0,dr.jsx)(Bs,{children:r.nome}),(0,dr.jsx)(zs,{children:r.descricao}),(0,dr.jsxs)(Vs,{children:["Vende em ",r.quantidade_unidades," unidades"]}),(0,dr.jsx)(Hs,{href:"https://drive.google.com/file/d/1caQSJ4nhu7Gz7VfEUTWsWTtMj7tP4Wcd/view",target:"_blank",rel:"noopener noreferrer",children:"Ver orçamento"})]})]})}):null};var Gs=i(668),$s={};$s.styleTagTransform=Oa(),$s.setAttributes=_a(),$s.insert=Pa().bind(null,"head"),$s.domAPI=wa(),$s.insertStyleElement=Ia(),ba()(Gs.Z,$s),Gs.Z&&Gs.Z.locals&&Gs.Z.locals;var Ys=i(792),qs={};function Zs(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,i,a,s,o=[],l=!0,d=!1;try{if(a=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=a.call(t)).done)&&(o.push(r.value),o.length!==n);l=!0);}catch(e){d=!0,i=e}finally{try{if(!l&&null!=t.return&&(s=t.return(),Object(s)!==s))return}finally{if(d)throw i}}return o}}(e,n)||function(e,n){if(e){if("string"==typeof e)return Qs(e,n);var t={}.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Qs(e,n):void 0}}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Qs(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=Array(n);t<n;t++)r[t]=e[t];return r}qs.styleTagTransform=Oa(),qs.setAttributes=_a(),qs.insert=Pa().bind(null,"head"),qs.domAPI=wa(),qs.insertStyleElement=Ia(),ba()(Ys.Z,qs),Ys.Z&&Ys.Z.locals&&Ys.Z.locals;const Ks=n.forwardRef((function(e,t){var r=Zs((0,n.useState)(!1),2),i=r[0],a=r[1],s=Zs((0,n.useState)(null),2),o=s[0],l=s[1];return(0,dr.jsx)("section",{ref:t,"data-filter":"novidades",children:(0,dr.jsx)(ms,{children:(0,dr.jsxs)(hs,{children:[(0,dr.jsx)(fs,{children:"novidades"}),(0,dr.jsx)(gs,{children:(0,dr.jsx)(ea,{modules:[ra,aa],centeredSlides:!0,loop:!0,pagination:{clickable:!0},breakpoints:{0:{slidesPerView:1,spaceBetween:10,centeredSlides:!0},320:{slidesPerView:1,spaceBetween:10,centeredSlides:!0},640:{slidesPerView:1,spaceBetween:10,centeredSlides:!0},768:{slidesPerView:1.5,spaceBetween:15,centeredSlides:!0},1024:{slidesPerView:3.5,spaceBetween:40,centeredSlides:!0},1441:{slidesPerView:3,spaceBetween:40,centeredSlides:!0}},children:ns.filter((function(e){return e.novidade})).map((function(e,n){return(0,dr.jsx)(na,{children:(0,dr.jsx)("div",{style:{display:"flex",justifyContent:"center"},children:(0,dr.jsx)(Ss,{imgUrl:e.urlfoto,titulo:e.nome,descricao:e.descricao,onClick:function(){return function(e){l(e),a(!0)}(e)}})})},n)}))})}),(0,dr.jsx)(Js,{isOpen:i,onClose:function(){a(!1),l(null)},salgadinho:o})]})})})}));var Xs,eo,no,to;function ro(e,n){return n||(n=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(n)}}))}var io,ao,so,oo,lo,co,uo=tr.div(Xs||(Xs=ro(["\n    padding: 2rem 2rem;\n    \n    @media (max-width: 768px) {\n        padding: 0 1rem;\n    }\n"]))),po=tr.div(eo||(eo=ro(["\n    max-width: 1440px;\n    margin: 0 auto;\n"]))),mo=tr.h2(no||(no=ro(["\n    color: #F00;\n    font-style: normal;\n    margin-top: 3rem;\n    margin-bottom: 3rem;\n    font-size: 24px;\n    line-height: 32px;\n    font-weight: 500;\n\n    @media (max-width: 768px) {\n        text-align: center;\n    }\n    \n"]))),ho=tr.div(to||(to=ro(["\n    display: flex;\n    flex-wrap: wrap;\n    justify-content: center;\n    gap: 1.5rem;\n\n    /* Desktop: 2 colunas */\n    & > div {\n        flex: 1 1 calc(50% - 1.5rem); /* 2 colunas (menos o gap) */\n        max-width: 50%;\n    }\n\n    /* Tablet e celular: 1 coluna */\n    @media (max-width: 768px) {\n        & > div {\n            flex: 1 1 calc(50% - 1.5rem);; /* Ocupa 100% da largura */\n            max-width: 50%;\n        }\n    }\n"])));function fo(e,n){return n||(n=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(n)}}))}var go=tr.div(io||(io=fo(["\n    display: flex;\n    width: 100%;\n    max-height: 12.5rem;\n    border-radius: 0.75rem;\n    background: #FFF;\n    overflow: hidden;\n    transition: transform 0.3s ease-in-out, box-shadow 0.3s ease-in-out;\n    flex-direction: row-reverse;\n\n    &:hover {\n        transform: translateY(-10px);\n        box-shadow: rgba(99, 99, 99, 0.2) 0px 2px 8px 0px;\n        \n    }\n\n    @keyframes fadeIn {\n        from {\n            opacity: 0;\n            transform: translateY(10px);\n        }\n        to {\n            opacity: 1;\n            transform: translateY(0);\n        }\n    };\n\n    @media (max-width: 768px) {\n        width: 20.875rem;\n        flex-direction: column;\n        flex-shrink: 0;\n    }\n"]))),Co=tr.img(ao||(ao=fo(["\n    width: 30%;\n    height: auto;\n    object-fit: cover;\n    transition: transform 0.3s ease-in-out;\n\n    @media (max-width: 768px) {\n        width: 100%;\n        height: 7.5835rem;\n        border-radius: 1.25rem 1.25rem 0 0;\n        background: #D9D9D9;\n    }\n"]))),Ao=tr.div(so||(so=fo(["\n    flex: 1;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: flex-start;\n    text-align: center;\n    margin-left: 40px;\n    transition: margin-left 0.3s ease-in-out;\n    \n    \n    @media (max-width: 768px) {\n        text-align: left;\n        margin-left: 0;\n        align-items: center;\n        \n        ",":hover & {\n            margin-left: 0;\n        }\n    }\n"])),go),vo=tr.div(oo||(oo=fo(["\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        height: 55px;\n        color: #000;\n        font-family: Poppins, sans-serif;\n        font-size: 1rem;\n        font-weight: 400;\n        text-align: center;\n\n\n        @media (min-width: 768px) {\n                color: #131313;\n                font-style: normal;\n                text-align: left;\n                font-weight: 500;\n                font-size: 17px;\n                line-height: 22px;\n        }\n"]))),bo=tr.div(lo||(lo=fo(["\n     width: 80%;   \n    font-size: 0.9rem;\n    color: #555;\n    margin-top: 0.5rem;\n    transition: opacity 0.3s ease-in-out;\n    text-align: left;\n\n    @media (max-width: 768px) {\n        display: none;\n    }\n"]))),yo=tr.span(co||(co=fo(["\n    color: #B0AEA7;\n    font-size: 1rem;\n    text-align: center;\n    margin-top: 0.5rem;\n    transition: color 0.3s ease-in-out;\n\n    &:hover {\n        color: #7a7974;\n    }\n\n    @media (max-width: 768px) {\n        display: none;\n    }\n"])));const wo=function(e){var n=e.imgUrl,t=e.titulo,r=e.descricao,i=e.onClick;return(0,dr.jsxs)(go,{onClick:i,children:[(0,dr.jsx)(Co,{src:n,alt:t}),(0,dr.jsxs)(Ao,{children:[(0,dr.jsx)(vo,{children:t}),(0,dr.jsx)(bo,{children:r}),(0,dr.jsx)(yo,{children:"Vende em 50 unidades"})]})]})};function So(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,i,a,s,o=[],l=!0,d=!1;try{if(a=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=a.call(t)).done)&&(o.push(r.value),o.length!==n);l=!0);}catch(e){d=!0,i=e}finally{try{if(!l&&null!=t.return&&(s=t.return(),Object(s)!==s))return}finally{if(d)throw i}}return o}}(e,n)||function(e,n){if(e){if("string"==typeof e)return Po(e,n);var t={}.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Po(e,n):void 0}}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Po(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=Array(n);t<n;t++)r[t]=e[t];return r}const Eo=function(e){var t=e.frituraRef,r=e.fornoRef,i=e.fritoCongeladoRef,a=So((0,n.useState)(!1),2),s=a[0],o=a[1],l=So((0,n.useState)(null),2),d=l[0],c=l[1],u=function(e){c(e),o(!0)},p=function(e){return ns.filter((function(n){return n.categoria===e}))};return(0,dr.jsx)(uo,{children:(0,dr.jsxs)(po,{children:[(0,dr.jsxs)("div",{ref:t,"data-filter":"fritura",children:[(0,dr.jsx)(mo,{children:"linha fritura"}),(0,dr.jsx)(ho,{children:p("fritura").map((function(e,n){return(0,dr.jsx)(wo,{imgUrl:e.urlfoto,titulo:e.nome,descricao:e.descricao,onClick:function(){return u(e)}},n)}))})]}),(0,dr.jsxs)("div",{ref:r,"data-filter":"forno",children:[(0,dr.jsx)(mo,{children:"linha forno"}),(0,dr.jsx)(ho,{children:p("forno").map((function(e,n){return(0,dr.jsx)(wo,{imgUrl:e.urlfoto,titulo:e.nome,descricao:e.descricao,onClick:function(){return u(e)}},n)}))})]}),(0,dr.jsxs)("div",{ref:i,"data-filter":"frito-congelado",children:[(0,dr.jsx)(mo,{children:"linha frito congelado"}),(0,dr.jsx)(ho,{children:p("frito-congelado").map((function(e,n){return(0,dr.jsx)(wo,{imgUrl:e.urlfoto,titulo:e.nome,descricao:e.descricao,onClick:function(){return u(e)}},n)}))})]}),(0,dr.jsx)(Js,{isOpen:s,onClose:function(){o(!1),c(null)},salgadinho:d})]})})};function _o(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=Array(n);t<n;t++)r[t]=e[t];return r}const Do=function(){var e=(0,n.useRef)(null),t=(0,n.useRef)(null),r=(0,n.useRef)(null),i=(0,n.useRef)(null),a=function(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,i,a,s,o=[],l=!0,d=!1;try{if(a=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=a.call(t)).done)&&(o.push(r.value),o.length!==n);l=!0);}catch(e){d=!0,i=e}finally{try{if(!l&&null!=t.return&&(s=t.return(),Object(s)!==s))return}finally{if(d)throw i}}return o}}(e,n)||function(e,n){if(e){if("string"==typeof e)return _o(e,n);var t={}.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?_o(e,n):void 0}}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}((0,n.useState)("novidades"),2),s=a[0],o=a[1];return(0,n.useEffect)((function(){var n=new IntersectionObserver((function(e){e.forEach((function(e){e.isIntersecting&&o(e.target.dataset.filter)}))}),{root:null,rootMargin:"0px",threshold:.6});return e.current&&n.observe(e.current),t.current&&n.observe(t.current),r.current&&n.observe(r.current),i.current&&n.observe(i.current),function(){return n.disconnect()}}),[]),(0,dr.jsxs)(kr,{children:[(0,dr.jsx)(Fa,{}),(0,dr.jsx)(es,{activeFilter:s,onFilterClick:function(n){console.log(n),"novidades"===n&&e.current?e.current.scrollIntoView({behavior:"smooth"}):"fritura"===n&&t.current?t.current.scrollIntoView({behavior:"smooth"}):"forno"===n&&r.current?r.current.scrollIntoView({behavior:"smooth"}):"frito-congelado"===n&&i.current&&i.current.scrollIntoView({behavior:"smooth"})}}),(0,dr.jsx)(Ks,{ref:e}),(0,dr.jsx)(Eo,{frituraRef:t,fornoRef:r,fritoCongeladoRef:i})]})},Io=function(e){const n=[];let t=0;for(let r=0;r<e.length;r++){let i=e.charCodeAt(r);i<128?n[t++]=i:i<2048?(n[t++]=i>>6|192,n[t++]=63&i|128):55296==(64512&i)&&r+1<e.length&&56320==(64512&e.charCodeAt(r+1))?(i=65536+((1023&i)<<10)+(1023&e.charCodeAt(++r)),n[t++]=i>>18|240,n[t++]=i>>12&63|128,n[t++]=i>>6&63|128,n[t++]=63&i|128):(n[t++]=i>>12|224,n[t++]=i>>6&63|128,n[t++]=63&i|128)}return n},xo={byteToCharMap_:null,charToByteMap_:null,byteToCharMapWebSafe_:null,charToByteMapWebSafe_:null,ENCODED_VALS_BASE:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",get ENCODED_VALS(){return this.ENCODED_VALS_BASE+"+/="},get ENCODED_VALS_WEBSAFE(){return this.ENCODED_VALS_BASE+"-_."},HAS_NATIVE_SUPPORT:"function"==typeof atob,encodeByteArray(e,n){if(!Array.isArray(e))throw Error("encodeByteArray takes an array as a parameter");this.init_();const t=n?this.byteToCharMapWebSafe_:this.byteToCharMap_,r=[];for(let n=0;n<e.length;n+=3){const i=e[n],a=n+1<e.length,s=a?e[n+1]:0,o=n+2<e.length,l=o?e[n+2]:0,d=i>>2,c=(3&i)<<4|s>>4;let u=(15&s)<<2|l>>6,p=63&l;o||(p=64,a||(u=64)),r.push(t[d],t[c],t[u],t[p])}return r.join("")},encodeString(e,n){return this.HAS_NATIVE_SUPPORT&&!n?btoa(e):this.encodeByteArray(Io(e),n)},decodeString(e,n){return this.HAS_NATIVE_SUPPORT&&!n?atob(e):function(e){const n=[];let t=0,r=0;for(;t<e.length;){const i=e[t++];if(i<128)n[r++]=String.fromCharCode(i);else if(i>191&&i<224){const a=e[t++];n[r++]=String.fromCharCode((31&i)<<6|63&a)}else if(i>239&&i<365){const a=((7&i)<<18|(63&e[t++])<<12|(63&e[t++])<<6|63&e[t++])-65536;n[r++]=String.fromCharCode(55296+(a>>10)),n[r++]=String.fromCharCode(56320+(1023&a))}else{const a=e[t++],s=e[t++];n[r++]=String.fromCharCode((15&i)<<12|(63&a)<<6|63&s)}}return n.join("")}(this.decodeStringToByteArray(e,n))},decodeStringToByteArray(e,n){this.init_();const t=n?this.charToByteMapWebSafe_:this.charToByteMap_,r=[];for(let n=0;n<e.length;){const i=t[e.charAt(n++)],a=n<e.length?t[e.charAt(n)]:0;++n;const s=n<e.length?t[e.charAt(n)]:64;++n;const o=n<e.length?t[e.charAt(n)]:64;if(++n,null==i||null==a||null==s||null==o)throw new Oo;const l=i<<2|a>>4;if(r.push(l),64!==s){const e=a<<4&240|s>>2;if(r.push(e),64!==o){const e=s<<6&192|o;r.push(e)}}}return r},init_(){if(!this.byteToCharMap_){this.byteToCharMap_={},this.charToByteMap_={},this.byteToCharMapWebSafe_={},this.charToByteMapWebSafe_={};for(let e=0;e<this.ENCODED_VALS.length;e++)this.byteToCharMap_[e]=this.ENCODED_VALS.charAt(e),this.charToByteMap_[this.byteToCharMap_[e]]=e,this.byteToCharMapWebSafe_[e]=this.ENCODED_VALS_WEBSAFE.charAt(e),this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[e]]=e,e>=this.ENCODED_VALS_BASE.length&&(this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(e)]=e,this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(e)]=e)}}};class Oo extends Error{constructor(){super(...arguments),this.name="DecodeBase64StringError"}}const ko=function(e){return function(e){const n=Io(e);return xo.encodeByteArray(n,!0)}(e).replace(/\./g,"")},Lo=function(e){try{return xo.decodeString(e,!0)}catch(e){console.error("base64Decode failed: ",e)}return null},Uo=()=>{try{return function(){if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if(void 0!==i.g)return i.g;throw new Error("Unable to locate global object.")}().__FIREBASE_DEFAULTS__||(()=>{if("undefined"==typeof process||void 0==={ALLUSERSPROFILE:"C:\\ProgramData",APPDATA:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming",ChocolateyInstall:"C:\\ProgramData\\chocolatey",ChocolateyLastPathUpdate:"133739169618057786",COLOR:"1",CommonProgramFiles:"C:\\Program Files\\Common Files","CommonProgramFiles(x86)":"C:\\Program Files (x86)\\Common Files",CommonProgramW6432:"C:\\Program Files\\Common Files",COMPUTERNAME:"IBT-WS-062679",ComSpec:"C:\\WINDOWS\\system32\\cmd.exe",DriverData:"C:\\Windows\\System32\\Drivers\\DriverData",EDITOR:"C:\\WINDOWS\\notepad.exe",EFC_9708:"1",FPS_BROWSER_APP_PROFILE_STRING:"Internet Explorer",FPS_BROWSER_USER_PROFILE_STRING:"Default",GoLand:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\GoLand 2023.2.5\\bin;",HOME:"C:\\Users\\mdorsi.tier2.admin",HOMEDRIVE:"C:",HOMEPATH:"\\Users\\mdorsi.tier2.admin",IDEA_INITIAL_DIRECTORY:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\WebStorm 2023.3\\bin",IGCCSVC_DB:"AQAAANCMnd8BFdERjHoAwE/Cl+sBAAAA7DqY1R3HX0aTSSlswK0VlgQAAAACAAAAAAAQZgAAAAEAACAAAABm65ppy4VnMFDUW4UsfN5HPI3yz9rnIpdfVGhrA4zgigAAAAAOgAAAAAIAACAAAABJpvp9a80y9IV5hP6fnCb1uKjNyrXZjdLmSwVxaoJylWAAAADYv8hOqBVUtjT1Cqsh1Xczhe4/q8hfUQ6SA5kSaemR37Yl+0aOG1FimG6uDSlGjhQDyeDwToU/XF4GyH7pVWO2rOVlfzMJbXLy8LJpGAn+JxZN3K0KK3+xDbw+vPjsczBAAAAA2Pth2w7+5O2/1E0Pt9N37mzbN3Q7/+oMWl+T3/m8hiS7sPgeMlEvoaBrgLXIlEi1j3+1o3rII1AJ3+7b3dSClA==",INIT_CWD:"C:\\Users\\mdorsi.tier2.admin\\charlotemichelpage","IntelliJ IDEA":"C:\\Program Files\\JetBrains\\IntelliJ IDEA 2024.1.4\\bin;",JAVA_HOME:"C:\\java\\jdk-17.0.10",LOCALAPPDATA:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local",LOGONSERVER:"\\\\AWW-W-ACADDC01",NODE:"C:\\Program Files\\nodejs\\node.exe",NODE_EXE:"C:\\Program Files\\nodejs\\\\node.exe",NPM_CLI_JS:"C:\\Program Files\\nodejs\\\\node_modules\\npm\\bin\\npm-cli.js",npm_command:"run-script",npm_config_cache:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\npm-cache",npm_config_globalconfig:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm\\etc\\npmrc",npm_config_global_prefix:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm",npm_config_init_module:"C:\\Users\\mdorsi.tier2.admin\\.npm-init.js",npm_config_local_prefix:"C:\\Users\\mdorsi.tier2.admin\\charlotemichelpage",npm_config_node_gyp:"C:\\Program Files\\nodejs\\node_modules\\npm\\node_modules\\node-gyp\\bin\\node-gyp.js",npm_config_noproxy:"",npm_config_npm_version:"10.5.0",npm_config_prefix:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm",npm_config_userconfig:"C:\\Users\\mdorsi.tier2.admin\\.npmrc",npm_config_user_agent:"npm/10.5.0 node/v20.12.2 win32 x64 workspaces/false",npm_execpath:"C:\\Program Files\\nodejs\\node_modules\\npm\\bin\\npm-cli.js",npm_lifecycle_event:"build",npm_lifecycle_script:"webpack --mode production",npm_node_execpath:"C:\\Program Files\\nodejs\\node.exe",npm_package_json:"C:\\Users\\mdorsi.tier2.admin\\charlotemichelpage\\package.json",npm_package_name:"charloterio",npm_package_version:"1.0.0",NPM_PREFIX_NPM_CLI_JS:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm\\node_modules\\npm\\bin\\npm-cli.js",NUMBER_OF_PROCESSORS:"8",OneDrive:"C:\\Users\\mdorsi.tier2.admin\\OneDrive - Corporativo",OneDriveCommercial:"C:\\Users\\mdorsi.tier2.admin\\OneDrive - Corporativo",OneDriveConsumer:"C:\\Users\\mdorsi.tier2.admin\\OneDrive",OS:"Windows_NT",Path:"C:\\Users\\mdorsi.tier2.admin\\charlotemichelpage\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\node_modules\\.bin;C:\\Users\\node_modules\\.bin;C:\\node_modules\\.bin;C:\\Program Files\\nodejs\\node_modules\\npm\\node_modules\\@npmcli\\run-script\\lib\\node-gyp-bin;C:\\Users\\mdorsi.tier2.admin\\charlotemichelpage\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\node_modules\\.bin;C:\\Users\\node_modules\\.bin;C:\\node_modules\\.bin;C:\\Program Files\\nodejs\\node_modules\\npm\\node_modules\\@npmcli\\run-script\\lib\\node-gyp-bin;C:\\Program Files (x86)\\Common Files\\Oracle\\Java\\javapath;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\WINDOWS\\System32\\OpenSSH\\;C:\\Program Files\\dotnet\\;C:\\Program Files (x86)\\Windows Kits\\10\\Windows Performance Toolkit\\;C:\\Program Files\\nodejs\\;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin;C:\\Program Files\\PostgreSQL\\16\\bin;C:\\Program Files\\vtex\\client\\bin;C:\\Program Files\\Git\\cmd;C:\\Users\\mdorsi.tier2.admin\\.fly\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm\\node_modules\\yarn;C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm\\node_modules\\yarn\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Launcher\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python311\\Scripts\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python311\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Microsoft\\WindowsApps;C:\\Program Files\\JetBrains\\IntelliJ IDEA 2024.1.4\\bin;;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python312\\Scripts;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Git\\cmd;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\PyCharm 2023.2.5\\bin;;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\GoLand 2023.2.5\\bin;;C:\\go;C:\\go\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\WebStorm 2023.3\\bin;;C:\\java\\jdk-17.0.10\\bin;C:\\java\\jdk-17.0.10\\lib;C:\\java\\jdk-17.0.10;C:\\java\\jdk-17.0.10\\bin;C:\\Program Files (x86)\\Common Files\\Oracle\\Java\\javapath;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\WINDOWS\\System32\\OpenSSH\\;C:\\Program Files\\dotnet\\;C:\\Program Files (x86)\\Windows Kits\\10\\Windows Performance Toolkit\\;C:\\Program Files\\nodejs\\;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin;C:\\Program Files\\PostgreSQL\\16\\bin;C:\\Program Files\\vtex\\client\\bin;C:\\Program Files\\Git\\cmd;C:\\Program Files\\Docker\\Docker\\resources\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Launcher\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python311\\Scripts\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python311\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Microsoft\\WindowsApps;C:\\Program Files\\JetBrains\\IntelliJ IDEA 2024.1.4\\bin;;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python312\\Scripts;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Git\\cmd;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\PyCharm 2023.2.5\\bin;;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\GoLand 2023.2.5\\bin;;C:\\go;C:\\go\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\WebStorm 2023.3\\bin;;C:\\java\\jdk-17.0.10\\bin;C:\\java\\jdk-17.0.10\\lib;C:\\java\\jdk-17.0.10;C:\\java\\jdk-17.0.10\\bin;C:\\Program Files (x86)\\Common Files\\Oracle\\Java\\javapath;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\WINDOWS\\System32\\OpenSSH\\;C:\\Program Files\\dotnet\\;C:\\Program Files (x86)\\Windows Kits\\10\\Windows Performance Toolkit\\;C:\\Program Files\\nodejs\\;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin;C:\\Program Files\\PostgreSQL\\16\\bin;C:\\Program Files\\vtex\\client\\bin;C:\\Program Files\\Git\\cmd;C:\\Program Files\\Docker\\Docker\\resources\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin;C:\\Users\\mdorsi.tier2.admin\\.cargo\\;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin\\rustup.exe;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\pessoal\\Aplicativos\\PdftoImage\\dependences\\poppler-23.08.0;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\pessoal\\Aplicativos\\PdftoImage\\dependences\\poppler-23.08.0\\Library\\bin;C:\\Users\\mdorsi.tier2.admin\\apache-maven-3.9.9;C:\\Users\\mdorsi.tier2.admin\\apache-maven-3.9.9\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Microsoft VS Code\\bin;;C:\\Program Files\\JetBrains\\PhpStorm 2024.3.1\\bin;;C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin;C:\\Users\\mdorsi.tier2.admin\\.cargo\\;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin\\rustup.exe;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\pessoal\\Aplicativos\\PdftoImage\\dependences\\poppler-23.08.0;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\pessoal\\Aplicativos\\PdftoImage\\dependences\\poppler-23.08.0\\Library\\bin;C:\\Users\\mdorsi.tier2.admin\\apache-maven-3.9.9;C:\\Users\\mdorsi.tier2.admin\\apache-maven-3.9.9\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Microsoft VS Code\\bin;;C:\\Program Files\\JetBrains\\PhpStorm 2024.3.1\\bin;;C:\\Users\\mdorsi.tier2.admin\\.fly\\bin;C:\\Users\\mdorsi.tier2.admin\\CharloteRio\\node_modules\\.bin",PATHEXT:".COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC;.CPL",PhpStorm:"C:\\Program Files\\JetBrains\\PhpStorm 2024.3.1\\bin;",PLMVIS_82_LIBPATH:"C:\\Program Files (x86)\\SAP\\FrontEnd\\SAPgui\\Program",PROCESSOR_ARCHITECTURE:"AMD64",PROCESSOR_IDENTIFIER:"Intel64 Family 6 Model 140 Stepping 1, GenuineIntel",PROCESSOR_LEVEL:"6",PROCESSOR_REVISION:"8c01",ProgramData:"C:\\ProgramData",ProgramFiles:"C:\\Program Files","ProgramFiles(x86)":"C:\\Program Files (x86)",ProgramW6432:"C:\\Program Files",PROMPT:"$P$G",PSExecutionPolicyPreference:"Bypass",PSModulePath:"C:\\Users\\mdorsi.tier2.admin\\OneDrive\\Documentos\\WindowsPowerShell\\Modules;C:\\Program Files\\WindowsPowerShell\\Modules;C:\\WINDOWS\\system32\\WindowsPowerShell\\v1.0\\Modules",PT8HOME:"C:\\Program Files\\Cisco Packet Tracer 8.2.2",PUBLIC:"C:\\Users\\Public",PyCharm:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\PyCharm 2023.2.5\\bin;",SESSIONNAME:"Console",SystemDrive:"C:",SystemRoot:"C:\\WINDOWS",TEMP:"C:\\Users\\MDORSI~1.ADM\\AppData\\Local\\Temp",TERMINAL_EMULATOR:"JetBrains-JediTerm",TERM_SESSION_ID:"f1913f5b-8352-4ffb-9a3e-e115e4486275",TMP:"C:\\Users\\MDORSI~1.ADM\\AppData\\Local\\Temp",USERDNSDOMAIN:"EDUC.ACAD",USERDOMAIN:"EDUCACAD",USERDOMAIN_ROAMINGPROFILE:"EDUCACAD",USERNAME:"mdorsi.tier2.admin",USERPROFILE:"C:\\Users\\mdorsi.tier2.admin",WebStorm:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\WebStorm 2023.3\\bin;",windir:"C:\\WINDOWS",ZES_ENABLE_SYSMAN:"1"})return;const e={ALLUSERSPROFILE:"C:\\ProgramData",APPDATA:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming",ChocolateyInstall:"C:\\ProgramData\\chocolatey",ChocolateyLastPathUpdate:"133739169618057786",COLOR:"1",CommonProgramFiles:"C:\\Program Files\\Common Files","CommonProgramFiles(x86)":"C:\\Program Files (x86)\\Common Files",CommonProgramW6432:"C:\\Program Files\\Common Files",COMPUTERNAME:"IBT-WS-062679",ComSpec:"C:\\WINDOWS\\system32\\cmd.exe",DriverData:"C:\\Windows\\System32\\Drivers\\DriverData",EDITOR:"C:\\WINDOWS\\notepad.exe",EFC_9708:"1",FPS_BROWSER_APP_PROFILE_STRING:"Internet Explorer",FPS_BROWSER_USER_PROFILE_STRING:"Default",GoLand:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\GoLand 2023.2.5\\bin;",HOME:"C:\\Users\\mdorsi.tier2.admin",HOMEDRIVE:"C:",HOMEPATH:"\\Users\\mdorsi.tier2.admin",IDEA_INITIAL_DIRECTORY:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\WebStorm 2023.3\\bin",IGCCSVC_DB:"AQAAANCMnd8BFdERjHoAwE/Cl+sBAAAA7DqY1R3HX0aTSSlswK0VlgQAAAACAAAAAAAQZgAAAAEAACAAAABm65ppy4VnMFDUW4UsfN5HPI3yz9rnIpdfVGhrA4zgigAAAAAOgAAAAAIAACAAAABJpvp9a80y9IV5hP6fnCb1uKjNyrXZjdLmSwVxaoJylWAAAADYv8hOqBVUtjT1Cqsh1Xczhe4/q8hfUQ6SA5kSaemR37Yl+0aOG1FimG6uDSlGjhQDyeDwToU/XF4GyH7pVWO2rOVlfzMJbXLy8LJpGAn+JxZN3K0KK3+xDbw+vPjsczBAAAAA2Pth2w7+5O2/1E0Pt9N37mzbN3Q7/+oMWl+T3/m8hiS7sPgeMlEvoaBrgLXIlEi1j3+1o3rII1AJ3+7b3dSClA==",INIT_CWD:"C:\\Users\\mdorsi.tier2.admin\\charlotemichelpage","IntelliJ IDEA":"C:\\Program Files\\JetBrains\\IntelliJ IDEA 2024.1.4\\bin;",JAVA_HOME:"C:\\java\\jdk-17.0.10",LOCALAPPDATA:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local",LOGONSERVER:"\\\\AWW-W-ACADDC01",NODE:"C:\\Program Files\\nodejs\\node.exe",NODE_EXE:"C:\\Program Files\\nodejs\\\\node.exe",NPM_CLI_JS:"C:\\Program Files\\nodejs\\\\node_modules\\npm\\bin\\npm-cli.js",npm_command:"run-script",npm_config_cache:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\npm-cache",npm_config_globalconfig:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm\\etc\\npmrc",npm_config_global_prefix:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm",npm_config_init_module:"C:\\Users\\mdorsi.tier2.admin\\.npm-init.js",npm_config_local_prefix:"C:\\Users\\mdorsi.tier2.admin\\charlotemichelpage",npm_config_node_gyp:"C:\\Program Files\\nodejs\\node_modules\\npm\\node_modules\\node-gyp\\bin\\node-gyp.js",npm_config_noproxy:"",npm_config_npm_version:"10.5.0",npm_config_prefix:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm",npm_config_userconfig:"C:\\Users\\mdorsi.tier2.admin\\.npmrc",npm_config_user_agent:"npm/10.5.0 node/v20.12.2 win32 x64 workspaces/false",npm_execpath:"C:\\Program Files\\nodejs\\node_modules\\npm\\bin\\npm-cli.js",npm_lifecycle_event:"build",npm_lifecycle_script:"webpack --mode production",npm_node_execpath:"C:\\Program Files\\nodejs\\node.exe",npm_package_json:"C:\\Users\\mdorsi.tier2.admin\\charlotemichelpage\\package.json",npm_package_name:"charloterio",npm_package_version:"1.0.0",NPM_PREFIX_NPM_CLI_JS:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm\\node_modules\\npm\\bin\\npm-cli.js",NUMBER_OF_PROCESSORS:"8",OneDrive:"C:\\Users\\mdorsi.tier2.admin\\OneDrive - Corporativo",OneDriveCommercial:"C:\\Users\\mdorsi.tier2.admin\\OneDrive - Corporativo",OneDriveConsumer:"C:\\Users\\mdorsi.tier2.admin\\OneDrive",OS:"Windows_NT",Path:"C:\\Users\\mdorsi.tier2.admin\\charlotemichelpage\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\node_modules\\.bin;C:\\Users\\node_modules\\.bin;C:\\node_modules\\.bin;C:\\Program Files\\nodejs\\node_modules\\npm\\node_modules\\@npmcli\\run-script\\lib\\node-gyp-bin;C:\\Users\\mdorsi.tier2.admin\\charlotemichelpage\\node_modules\\.bin;C:\\Users\\mdorsi.tier2.admin\\node_modules\\.bin;C:\\Users\\node_modules\\.bin;C:\\node_modules\\.bin;C:\\Program Files\\nodejs\\node_modules\\npm\\node_modules\\@npmcli\\run-script\\lib\\node-gyp-bin;C:\\Program Files (x86)\\Common Files\\Oracle\\Java\\javapath;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\WINDOWS\\System32\\OpenSSH\\;C:\\Program Files\\dotnet\\;C:\\Program Files (x86)\\Windows Kits\\10\\Windows Performance Toolkit\\;C:\\Program Files\\nodejs\\;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin;C:\\Program Files\\PostgreSQL\\16\\bin;C:\\Program Files\\vtex\\client\\bin;C:\\Program Files\\Git\\cmd;C:\\Users\\mdorsi.tier2.admin\\.fly\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm\\node_modules\\yarn;C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm\\node_modules\\yarn\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Launcher\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python311\\Scripts\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python311\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Microsoft\\WindowsApps;C:\\Program Files\\JetBrains\\IntelliJ IDEA 2024.1.4\\bin;;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python312\\Scripts;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Git\\cmd;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\PyCharm 2023.2.5\\bin;;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\GoLand 2023.2.5\\bin;;C:\\go;C:\\go\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\WebStorm 2023.3\\bin;;C:\\java\\jdk-17.0.10\\bin;C:\\java\\jdk-17.0.10\\lib;C:\\java\\jdk-17.0.10;C:\\java\\jdk-17.0.10\\bin;C:\\Program Files (x86)\\Common Files\\Oracle\\Java\\javapath;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\WINDOWS\\System32\\OpenSSH\\;C:\\Program Files\\dotnet\\;C:\\Program Files (x86)\\Windows Kits\\10\\Windows Performance Toolkit\\;C:\\Program Files\\nodejs\\;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin;C:\\Program Files\\PostgreSQL\\16\\bin;C:\\Program Files\\vtex\\client\\bin;C:\\Program Files\\Git\\cmd;C:\\Program Files\\Docker\\Docker\\resources\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Launcher\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python311\\Scripts\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python311\\;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Microsoft\\WindowsApps;C:\\Program Files\\JetBrains\\IntelliJ IDEA 2024.1.4\\bin;;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Python\\Python312\\Scripts;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Git\\cmd;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\PyCharm 2023.2.5\\bin;;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\GoLand 2023.2.5\\bin;;C:\\go;C:\\go\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\WebStorm 2023.3\\bin;;C:\\java\\jdk-17.0.10\\bin;C:\\java\\jdk-17.0.10\\lib;C:\\java\\jdk-17.0.10;C:\\java\\jdk-17.0.10\\bin;C:\\Program Files (x86)\\Common Files\\Oracle\\Java\\javapath;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\WINDOWS\\System32\\OpenSSH\\;C:\\Program Files\\dotnet\\;C:\\Program Files (x86)\\Windows Kits\\10\\Windows Performance Toolkit\\;C:\\Program Files\\nodejs\\;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin;C:\\Program Files\\PostgreSQL\\16\\bin;C:\\Program Files\\vtex\\client\\bin;C:\\Program Files\\Git\\cmd;C:\\Program Files\\Docker\\Docker\\resources\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin;C:\\Users\\mdorsi.tier2.admin\\.cargo\\;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin\\rustup.exe;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\pessoal\\Aplicativos\\PdftoImage\\dependences\\poppler-23.08.0;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\pessoal\\Aplicativos\\PdftoImage\\dependences\\poppler-23.08.0\\Library\\bin;C:\\Users\\mdorsi.tier2.admin\\apache-maven-3.9.9;C:\\Users\\mdorsi.tier2.admin\\apache-maven-3.9.9\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Microsoft VS Code\\bin;;C:\\Program Files\\JetBrains\\PhpStorm 2024.3.1\\bin;;C:\\Users\\mdorsi.tier2.admin\\AppData\\Roaming\\npm;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin;C:\\Users\\mdorsi.tier2.admin\\.cargo\\;C:\\Users\\mdorsi.tier2.admin\\.cargo\\bin\\rustup.exe;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\pessoal\\Aplicativos\\PdftoImage\\dependences\\poppler-23.08.0;C:\\Users\\mdorsi.tier2.admin\\OneDrive\\pessoal\\Aplicativos\\PdftoImage\\dependences\\poppler-23.08.0\\Library\\bin;C:\\Users\\mdorsi.tier2.admin\\apache-maven-3.9.9;C:\\Users\\mdorsi.tier2.admin\\apache-maven-3.9.9\\bin;C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\Programs\\Microsoft VS Code\\bin;;C:\\Program Files\\JetBrains\\PhpStorm 2024.3.1\\bin;;C:\\Users\\mdorsi.tier2.admin\\.fly\\bin;C:\\Users\\mdorsi.tier2.admin\\CharloteRio\\node_modules\\.bin",PATHEXT:".COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC;.CPL",PhpStorm:"C:\\Program Files\\JetBrains\\PhpStorm 2024.3.1\\bin;",PLMVIS_82_LIBPATH:"C:\\Program Files (x86)\\SAP\\FrontEnd\\SAPgui\\Program",PROCESSOR_ARCHITECTURE:"AMD64",PROCESSOR_IDENTIFIER:"Intel64 Family 6 Model 140 Stepping 1, GenuineIntel",PROCESSOR_LEVEL:"6",PROCESSOR_REVISION:"8c01",ProgramData:"C:\\ProgramData",ProgramFiles:"C:\\Program Files","ProgramFiles(x86)":"C:\\Program Files (x86)",ProgramW6432:"C:\\Program Files",PROMPT:"$P$G",PSExecutionPolicyPreference:"Bypass",PSModulePath:"C:\\Users\\mdorsi.tier2.admin\\OneDrive\\Documentos\\WindowsPowerShell\\Modules;C:\\Program Files\\WindowsPowerShell\\Modules;C:\\WINDOWS\\system32\\WindowsPowerShell\\v1.0\\Modules",PT8HOME:"C:\\Program Files\\Cisco Packet Tracer 8.2.2",PUBLIC:"C:\\Users\\Public",PyCharm:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\PyCharm 2023.2.5\\bin;",SESSIONNAME:"Console",SystemDrive:"C:",SystemRoot:"C:\\WINDOWS",TEMP:"C:\\Users\\MDORSI~1.ADM\\AppData\\Local\\Temp",TERMINAL_EMULATOR:"JetBrains-JediTerm",TERM_SESSION_ID:"f1913f5b-8352-4ffb-9a3e-e115e4486275",TMP:"C:\\Users\\MDORSI~1.ADM\\AppData\\Local\\Temp",USERDNSDOMAIN:"EDUC.ACAD",USERDOMAIN:"EDUCACAD",USERDOMAIN_ROAMINGPROFILE:"EDUCACAD",USERNAME:"mdorsi.tier2.admin",USERPROFILE:"C:\\Users\\mdorsi.tier2.admin",WebStorm:"C:\\Users\\mdorsi.tier2.admin\\AppData\\Local\\JetBrains\\WebStorm 2023.3\\bin;",windir:"C:\\WINDOWS",ZES_ENABLE_SYSMAN:"1"}.__FIREBASE_DEFAULTS__;return e?JSON.parse(e):void 0})()||(()=>{if("undefined"==typeof document)return;let e;try{e=document.cookie.match(/__FIREBASE_DEFAULTS__=([^;]+)/)}catch(e){return}const n=e&&Lo(e[1]);return n&&JSON.parse(n)})()}catch(e){return void console.info(`Unable to get __FIREBASE_DEFAULTS__ due to: ${e}`)}},To=()=>{var e;return null===(e=Uo())||void 0===e?void 0:e.config},Ro=e=>{var n;return null===(n=Uo())||void 0===n?void 0:n[`_${e}`]};class Fo{constructor(){this.reject=()=>{},this.resolve=()=>{},this.promise=new Promise(((e,n)=>{this.resolve=e,this.reject=n}))}wrapCallback(e){return(n,t)=>{n?this.reject(n):this.resolve(t),"function"==typeof e&&(this.promise.catch((()=>{})),1===e.length?e(n):e(n,t))}}}function Mo(){return"undefined"!=typeof navigator&&"string"==typeof navigator.userAgent?navigator.userAgent:""}class No extends Error{constructor(e,n,t){super(n),this.code=e,this.customData=t,this.name="FirebaseError",Object.setPrototypeOf(this,No.prototype),Error.captureStackTrace&&Error.captureStackTrace(this,Wo.prototype.create)}}class Wo{constructor(e,n,t){this.service=e,this.serviceName=n,this.errors=t}create(e,...n){const t=n[0]||{},r=`${this.service}/${e}`,i=this.errors[e],a=i?function(e,n){return e.replace(jo,((e,t)=>{const r=n[t];return null!=r?String(r):`<${t}?>`}))}(i,t):"Error",s=`${this.serviceName}: ${a} (${r}).`;return new No(r,s,t)}}const jo=/\{\$([^}]+)}/g;function Bo(e,n){if(e===n)return!0;const t=Object.keys(e),r=Object.keys(n);for(const i of t){if(!r.includes(i))return!1;const t=e[i],a=n[i];if(zo(t)&&zo(a)){if(!Bo(t,a))return!1}else if(t!==a)return!1}for(const e of r)if(!t.includes(e))return!1;return!0}function zo(e){return null!==e&&"object"==typeof e}function Vo(e){const n=[];for(const[t,r]of Object.entries(e))Array.isArray(r)?r.forEach((e=>{n.push(encodeURIComponent(t)+"="+encodeURIComponent(e))})):n.push(encodeURIComponent(t)+"="+encodeURIComponent(r));return n.length?"&"+n.join("&"):""}function Ho(e){const n={};return e.replace(/^\?/,"").split("&").forEach((e=>{if(e){const[t,r]=e.split("=");n[decodeURIComponent(t)]=decodeURIComponent(r)}})),n}function Jo(e){const n=e.indexOf("?");if(!n)return"";const t=e.indexOf("#",n);return e.substring(n,t>0?t:void 0)}class Go{constructor(e,n){this.observers=[],this.unsubscribes=[],this.observerCount=0,this.task=Promise.resolve(),this.finalized=!1,this.onNoObservers=n,this.task.then((()=>{e(this)})).catch((e=>{this.error(e)}))}next(e){this.forEachObserver((n=>{n.next(e)}))}error(e){this.forEachObserver((n=>{n.error(e)})),this.close(e)}complete(){this.forEachObserver((e=>{e.complete()})),this.close()}subscribe(e,n,t){let r;if(void 0===e&&void 0===n&&void 0===t)throw new Error("Missing Observer.");r=function(e,n){if("object"!=typeof e||null===e)return!1;for(const n of["next","error","complete"])if(n in e&&"function"==typeof e[n])return!0;return!1}(e)?e:{next:e,error:n,complete:t},void 0===r.next&&(r.next=$o),void 0===r.error&&(r.error=$o),void 0===r.complete&&(r.complete=$o);const i=this.unsubscribeOne.bind(this,this.observers.length);return this.finalized&&this.task.then((()=>{try{this.finalError?r.error(this.finalError):r.complete()}catch(e){}})),this.observers.push(r),i}unsubscribeOne(e){void 0!==this.observers&&void 0!==this.observers[e]&&(delete this.observers[e],this.observerCount-=1,0===this.observerCount&&void 0!==this.onNoObservers&&this.onNoObservers(this))}forEachObserver(e){if(!this.finalized)for(let n=0;n<this.observers.length;n++)this.sendOne(n,e)}sendOne(e,n){this.task.then((()=>{if(void 0!==this.observers&&void 0!==this.observers[e])try{n(this.observers[e])}catch(e){"undefined"!=typeof console&&console.error&&console.error(e)}}))}close(e){this.finalized||(this.finalized=!0,void 0!==e&&(this.finalError=e),this.task.then((()=>{this.observers=void 0,this.onNoObservers=void 0})))}}function $o(){}function Yo(e){return e&&e._delegate?e._delegate:e}class qo{constructor(e,n,t){this.name=e,this.instanceFactory=n,this.type=t,this.multipleInstances=!1,this.serviceProps={},this.instantiationMode="LAZY",this.onInstanceCreated=null}setInstantiationMode(e){return this.instantiationMode=e,this}setMultipleInstances(e){return this.multipleInstances=e,this}setServiceProps(e){return this.serviceProps=e,this}setInstanceCreatedCallback(e){return this.onInstanceCreated=e,this}}const Zo="[DEFAULT]";class Qo{constructor(e,n){this.name=e,this.container=n,this.component=null,this.instances=new Map,this.instancesDeferred=new Map,this.instancesOptions=new Map,this.onInitCallbacks=new Map}get(e){const n=this.normalizeInstanceIdentifier(e);if(!this.instancesDeferred.has(n)){const e=new Fo;if(this.instancesDeferred.set(n,e),this.isInitialized(n)||this.shouldAutoInitialize())try{const t=this.getOrInitializeService({instanceIdentifier:n});t&&e.resolve(t)}catch(e){}}return this.instancesDeferred.get(n).promise}getImmediate(e){var n;const t=this.normalizeInstanceIdentifier(null==e?void 0:e.identifier),r=null!==(n=null==e?void 0:e.optional)&&void 0!==n&&n;if(!this.isInitialized(t)&&!this.shouldAutoInitialize()){if(r)return null;throw Error(`Service ${this.name} is not available`)}try{return this.getOrInitializeService({instanceIdentifier:t})}catch(e){if(r)return null;throw e}}getComponent(){return this.component}setComponent(e){if(e.name!==this.name)throw Error(`Mismatching Component ${e.name} for Provider ${this.name}.`);if(this.component)throw Error(`Component for ${this.name} has already been provided`);if(this.component=e,this.shouldAutoInitialize()){if(function(e){return"EAGER"===e.instantiationMode}(e))try{this.getOrInitializeService({instanceIdentifier:Zo})}catch(e){}for(const[e,n]of this.instancesDeferred.entries()){const t=this.normalizeInstanceIdentifier(e);try{const e=this.getOrInitializeService({instanceIdentifier:t});n.resolve(e)}catch(e){}}}}clearInstance(e=Zo){this.instancesDeferred.delete(e),this.instancesOptions.delete(e),this.instances.delete(e)}async delete(){const e=Array.from(this.instances.values());await Promise.all([...e.filter((e=>"INTERNAL"in e)).map((e=>e.INTERNAL.delete())),...e.filter((e=>"_delete"in e)).map((e=>e._delete()))])}isComponentSet(){return null!=this.component}isInitialized(e=Zo){return this.instances.has(e)}getOptions(e=Zo){return this.instancesOptions.get(e)||{}}initialize(e={}){const{options:n={}}=e,t=this.normalizeInstanceIdentifier(e.instanceIdentifier);if(this.isInitialized(t))throw Error(`${this.name}(${t}) has already been initialized`);if(!this.isComponentSet())throw Error(`Component ${this.name} has not been registered yet`);const r=this.getOrInitializeService({instanceIdentifier:t,options:n});for(const[e,n]of this.instancesDeferred.entries())t===this.normalizeInstanceIdentifier(e)&&n.resolve(r);return r}onInit(e,n){var t;const r=this.normalizeInstanceIdentifier(n),i=null!==(t=this.onInitCallbacks.get(r))&&void 0!==t?t:new Set;i.add(e),this.onInitCallbacks.set(r,i);const a=this.instances.get(r);return a&&e(a,r),()=>{i.delete(e)}}invokeOnInitCallbacks(e,n){const t=this.onInitCallbacks.get(n);if(t)for(const r of t)try{r(e,n)}catch(e){}}getOrInitializeService({instanceIdentifier:e,options:n={}}){let t=this.instances.get(e);if(!t&&this.component&&(t=this.component.instanceFactory(this.container,{instanceIdentifier:Ko(e),options:n}),this.instances.set(e,t),this.instancesOptions.set(e,n),this.invokeOnInitCallbacks(t,e),this.component.onInstanceCreated))try{this.component.onInstanceCreated(this.container,e,t)}catch(e){}return t||null}normalizeInstanceIdentifier(e=Zo){return this.component?this.component.multipleInstances?e:Zo:e}shouldAutoInitialize(){return!!this.component&&"EXPLICIT"!==this.component.instantiationMode}}function Ko(e){return e===Zo?void 0:e}class Xo{constructor(e){this.name=e,this.providers=new Map}addComponent(e){const n=this.getProvider(e.name);if(n.isComponentSet())throw new Error(`Component ${e.name} has already been registered with ${this.name}`);n.setComponent(e)}addOrOverwriteComponent(e){this.getProvider(e.name).isComponentSet()&&this.providers.delete(e.name),this.addComponent(e)}getProvider(e){if(this.providers.has(e))return this.providers.get(e);const n=new Qo(e,this);return this.providers.set(e,n),n}getProviders(){return Array.from(this.providers.values())}}const el=[];var nl;!function(e){e[e.DEBUG=0]="DEBUG",e[e.VERBOSE=1]="VERBOSE",e[e.INFO=2]="INFO",e[e.WARN=3]="WARN",e[e.ERROR=4]="ERROR",e[e.SILENT=5]="SILENT"}(nl||(nl={}));const tl={debug:nl.DEBUG,verbose:nl.VERBOSE,info:nl.INFO,warn:nl.WARN,error:nl.ERROR,silent:nl.SILENT},rl=nl.INFO,il={[nl.DEBUG]:"log",[nl.VERBOSE]:"log",[nl.INFO]:"info",[nl.WARN]:"warn",[nl.ERROR]:"error"},al=(e,n,...t)=>{if(n<e.logLevel)return;const r=(new Date).toISOString(),i=il[n];if(!i)throw new Error(`Attempted to log a message with an invalid logType (value: ${n})`);console[i](`[${r}]  ${e.name}:`,...t)};class sl{constructor(e){this.name=e,this._logLevel=rl,this._logHandler=al,this._userLogHandler=null,el.push(this)}get logLevel(){return this._logLevel}set logLevel(e){if(!(e in nl))throw new TypeError(`Invalid value "${e}" assigned to \`logLevel\``);this._logLevel=e}setLogLevel(e){this._logLevel="string"==typeof e?tl[e]:e}get logHandler(){return this._logHandler}set logHandler(e){if("function"!=typeof e)throw new TypeError("Value assigned to `logHandler` must be a function");this._logHandler=e}get userLogHandler(){return this._userLogHandler}set userLogHandler(e){this._userLogHandler=e}debug(...e){this._userLogHandler&&this._userLogHandler(this,nl.DEBUG,...e),this._logHandler(this,nl.DEBUG,...e)}log(...e){this._userLogHandler&&this._userLogHandler(this,nl.VERBOSE,...e),this._logHandler(this,nl.VERBOSE,...e)}info(...e){this._userLogHandler&&this._userLogHandler(this,nl.INFO,...e),this._logHandler(this,nl.INFO,...e)}warn(...e){this._userLogHandler&&this._userLogHandler(this,nl.WARN,...e),this._logHandler(this,nl.WARN,...e)}error(...e){this._userLogHandler&&this._userLogHandler(this,nl.ERROR,...e),this._logHandler(this,nl.ERROR,...e)}}const ol=(e,n)=>n.some((n=>e instanceof n));let ll,dl;const cl=new WeakMap,ul=new WeakMap,pl=new WeakMap,ml=new WeakMap,hl=new WeakMap;let fl={get(e,n,t){if(e instanceof IDBTransaction){if("done"===n)return ul.get(e);if("objectStoreNames"===n)return e.objectStoreNames||pl.get(e);if("store"===n)return t.objectStoreNames[1]?void 0:t.objectStore(t.objectStoreNames[0])}return Cl(e[n])},set:(e,n,t)=>(e[n]=t,!0),has:(e,n)=>e instanceof IDBTransaction&&("done"===n||"store"===n)||n in e};function gl(e){return"function"==typeof e?(n=e)!==IDBDatabase.prototype.transaction||"objectStoreNames"in IDBTransaction.prototype?(dl||(dl=[IDBCursor.prototype.advance,IDBCursor.prototype.continue,IDBCursor.prototype.continuePrimaryKey])).includes(n)?function(...e){return n.apply(Al(this),e),Cl(cl.get(this))}:function(...e){return Cl(n.apply(Al(this),e))}:function(e,...t){const r=n.call(Al(this),e,...t);return pl.set(r,e.sort?e.sort():[e]),Cl(r)}:(e instanceof IDBTransaction&&function(e){if(ul.has(e))return;const n=new Promise(((n,t)=>{const r=()=>{e.removeEventListener("complete",i),e.removeEventListener("error",a),e.removeEventListener("abort",a)},i=()=>{n(),r()},a=()=>{t(e.error||new DOMException("AbortError","AbortError")),r()};e.addEventListener("complete",i),e.addEventListener("error",a),e.addEventListener("abort",a)}));ul.set(e,n)}(e),ol(e,ll||(ll=[IDBDatabase,IDBObjectStore,IDBIndex,IDBCursor,IDBTransaction]))?new Proxy(e,fl):e);var n}function Cl(e){if(e instanceof IDBRequest)return function(e){const n=new Promise(((n,t)=>{const r=()=>{e.removeEventListener("success",i),e.removeEventListener("error",a)},i=()=>{n(Cl(e.result)),r()},a=()=>{t(e.error),r()};e.addEventListener("success",i),e.addEventListener("error",a)}));return n.then((n=>{n instanceof IDBCursor&&cl.set(n,e)})).catch((()=>{})),hl.set(n,e),n}(e);if(ml.has(e))return ml.get(e);const n=gl(e);return n!==e&&(ml.set(e,n),hl.set(n,e)),n}const Al=e=>hl.get(e),vl=["get","getKey","getAll","getAllKeys","count"],bl=["put","add","delete","clear"],yl=new Map;function wl(e,n){if(!(e instanceof IDBDatabase)||n in e||"string"!=typeof n)return;if(yl.get(n))return yl.get(n);const t=n.replace(/FromIndex$/,""),r=n!==t,i=bl.includes(t);if(!(t in(r?IDBIndex:IDBObjectStore).prototype)||!i&&!vl.includes(t))return;const a=async function(e,...n){const a=this.transaction(e,i?"readwrite":"readonly");let s=a.store;return r&&(s=s.index(n.shift())),(await Promise.all([s[t](...n),i&&a.done]))[0]};return yl.set(n,a),a}var Sl;Sl=fl,fl={...Sl,get:(e,n,t)=>wl(e,n)||Sl.get(e,n,t),has:(e,n)=>!!wl(e,n)||Sl.has(e,n)};class Pl{constructor(e){this.container=e}getPlatformInfoString(){return this.container.getProviders().map((e=>{if(function(e){const n=e.getComponent();return"VERSION"===(null==n?void 0:n.type)}(e)){const n=e.getImmediate();return`${n.library}/${n.version}`}return null})).filter((e=>e)).join(" ")}}const El="@firebase/app",_l="0.9.23",Dl=new sl("@firebase/app"),Il="[DEFAULT]",xl={[El]:"fire-core","@firebase/app-compat":"fire-core-compat","@firebase/analytics":"fire-analytics","@firebase/analytics-compat":"fire-analytics-compat","@firebase/app-check":"fire-app-check","@firebase/app-check-compat":"fire-app-check-compat","@firebase/auth":"fire-auth","@firebase/auth-compat":"fire-auth-compat","@firebase/database":"fire-rtdb","@firebase/database-compat":"fire-rtdb-compat","@firebase/functions":"fire-fn","@firebase/functions-compat":"fire-fn-compat","@firebase/installations":"fire-iid","@firebase/installations-compat":"fire-iid-compat","@firebase/messaging":"fire-fcm","@firebase/messaging-compat":"fire-fcm-compat","@firebase/performance":"fire-perf","@firebase/performance-compat":"fire-perf-compat","@firebase/remote-config":"fire-rc","@firebase/remote-config-compat":"fire-rc-compat","@firebase/storage":"fire-gcs","@firebase/storage-compat":"fire-gcs-compat","@firebase/firestore":"fire-fst","@firebase/firestore-compat":"fire-fst-compat","fire-js":"fire-js",firebase:"fire-js-all"},Ol=new Map,kl=new Map;function Ll(e,n){try{e.container.addComponent(n)}catch(t){Dl.debug(`Component ${n.name} failed to register with FirebaseApp ${e.name}`,t)}}function Ul(e){const n=e.name;if(kl.has(n))return Dl.debug(`There were multiple attempts to register component ${n}.`),!1;kl.set(n,e);for(const n of Ol.values())Ll(n,e);return!0}function Tl(e,n){const t=e.container.getProvider("heartbeat").getImmediate({optional:!0});return t&&t.triggerHeartbeat(),e.container.getProvider(n)}const Rl=new Wo("app","Firebase",{"no-app":"No Firebase App '{$appName}' has been created - call initializeApp() first","bad-app-name":"Illegal App name: '{$appName}","duplicate-app":"Firebase App named '{$appName}' already exists with different options or config","app-deleted":"Firebase App named '{$appName}' already deleted","no-options":"Need to provide options, when not being deployed to hosting via source.","invalid-app-argument":"firebase.{$appName}() takes either no argument or a Firebase App instance.","invalid-log-argument":"First argument to `onLog` must be null or a function.","idb-open":"Error thrown when opening IndexedDB. Original error: {$originalErrorMessage}.","idb-get":"Error thrown when reading from IndexedDB. Original error: {$originalErrorMessage}.","idb-set":"Error thrown when writing to IndexedDB. Original error: {$originalErrorMessage}.","idb-delete":"Error thrown when deleting from IndexedDB. Original error: {$originalErrorMessage}."});class Fl{constructor(e,n,t){this._isDeleted=!1,this._options=Object.assign({},e),this._config=Object.assign({},n),this._name=n.name,this._automaticDataCollectionEnabled=n.automaticDataCollectionEnabled,this._container=t,this.container.addComponent(new qo("app",(()=>this),"PUBLIC"))}get automaticDataCollectionEnabled(){return this.checkDestroyed(),this._automaticDataCollectionEnabled}set automaticDataCollectionEnabled(e){this.checkDestroyed(),this._automaticDataCollectionEnabled=e}get name(){return this.checkDestroyed(),this._name}get options(){return this.checkDestroyed(),this._options}get config(){return this.checkDestroyed(),this._config}get container(){return this._container}get isDeleted(){return this._isDeleted}set isDeleted(e){this._isDeleted=e}checkDestroyed(){if(this.isDeleted)throw Rl.create("app-deleted",{appName:this._name})}}const Ml="10.6.0";function Nl(e,n={}){let t=e;"object"!=typeof n&&(n={name:n});const r=Object.assign({name:Il,automaticDataCollectionEnabled:!1},n),i=r.name;if("string"!=typeof i||!i)throw Rl.create("bad-app-name",{appName:String(i)});if(t||(t=To()),!t)throw Rl.create("no-options");const a=Ol.get(i);if(a){if(Bo(t,a.options)&&Bo(r,a.config))return a;throw Rl.create("duplicate-app",{appName:i})}const s=new Xo(i);for(const e of kl.values())s.addComponent(e);const o=new Fl(t,r,s);return Ol.set(i,o),o}function Wl(e,n,t){var r;let i=null!==(r=xl[e])&&void 0!==r?r:e;t&&(i+=`-${t}`);const a=i.match(/\s|\//),s=n.match(/\s|\//);if(a||s){const e=[`Unable to register library "${i}" with version "${n}":`];return a&&e.push(`library name "${i}" contains illegal characters (whitespace or "/")`),a&&s&&e.push("and"),s&&e.push(`version name "${n}" contains illegal characters (whitespace or "/")`),void Dl.warn(e.join(" "))}Ul(new qo(`${i}-version`,(()=>({library:i,version:n})),"VERSION"))}const jl="firebase-heartbeat-database",Bl=1,zl="firebase-heartbeat-store";let Vl=null;function Hl(){return Vl||(Vl=function(e,n,{blocked:t,upgrade:r,blocking:i,terminated:a}={}){const s=indexedDB.open(e,n),o=Cl(s);return r&&s.addEventListener("upgradeneeded",(e=>{r(Cl(s.result),e.oldVersion,e.newVersion,Cl(s.transaction),e)})),t&&s.addEventListener("blocked",(e=>t(e.oldVersion,e.newVersion,e))),o.then((e=>{a&&e.addEventListener("close",(()=>a())),i&&e.addEventListener("versionchange",(e=>i(e.oldVersion,e.newVersion,e)))})).catch((()=>{})),o}(jl,Bl,{upgrade:(e,n)=>{0===n&&e.createObjectStore(zl)}}).catch((e=>{throw Rl.create("idb-open",{originalErrorMessage:e.message})}))),Vl}async function Jl(e,n){try{const t=(await Hl()).transaction(zl,"readwrite"),r=t.objectStore(zl);await r.put(n,Gl(e)),await t.done}catch(e){if(e instanceof No)Dl.warn(e.message);else{const n=Rl.create("idb-set",{originalErrorMessage:null==e?void 0:e.message});Dl.warn(n.message)}}}function Gl(e){return`${e.name}!${e.options.appId}`}class $l{constructor(e){this.container=e,this._heartbeatsCache=null;const n=this.container.getProvider("app").getImmediate();this._storage=new ql(n),this._heartbeatsCachePromise=this._storage.read().then((e=>(this._heartbeatsCache=e,e)))}async triggerHeartbeat(){var e;const n=this.container.getProvider("platform-logger").getImmediate().getPlatformInfoString(),t=Yl();if(null==(null===(e=this._heartbeatsCache)||void 0===e?void 0:e.heartbeats)&&(this._heartbeatsCache=await this._heartbeatsCachePromise),this._heartbeatsCache.lastSentHeartbeatDate!==t&&!this._heartbeatsCache.heartbeats.some((e=>e.date===t)))return this._heartbeatsCache.heartbeats.push({date:t,agent:n}),this._heartbeatsCache.heartbeats=this._heartbeatsCache.heartbeats.filter((e=>{const n=new Date(e.date).valueOf();return Date.now()-n<=2592e6})),this._storage.overwrite(this._heartbeatsCache)}async getHeartbeatsHeader(){var e;if(null===this._heartbeatsCache&&await this._heartbeatsCachePromise,null==(null===(e=this._heartbeatsCache)||void 0===e?void 0:e.heartbeats)||0===this._heartbeatsCache.heartbeats.length)return"";const n=Yl(),{heartbeatsToSend:t,unsentEntries:r}=function(e,n=1024){const t=[];let r=e.slice();for(const i of e){const e=t.find((e=>e.agent===i.agent));if(e){if(e.dates.push(i.date),Zl(t)>n){e.dates.pop();break}}else if(t.push({agent:i.agent,dates:[i.date]}),Zl(t)>n){t.pop();break}r=r.slice(1)}return{heartbeatsToSend:t,unsentEntries:r}}(this._heartbeatsCache.heartbeats),i=ko(JSON.stringify({version:2,heartbeats:t}));return this._heartbeatsCache.lastSentHeartbeatDate=n,r.length>0?(this._heartbeatsCache.heartbeats=r,await this._storage.overwrite(this._heartbeatsCache)):(this._heartbeatsCache.heartbeats=[],this._storage.overwrite(this._heartbeatsCache)),i}}function Yl(){return(new Date).toISOString().substring(0,10)}class ql{constructor(e){this.app=e,this._canUseIndexedDBPromise=this.runIndexedDBEnvironmentCheck()}async runIndexedDBEnvironmentCheck(){return!!function(){try{return"object"==typeof indexedDB}catch(e){return!1}}()&&new Promise(((e,n)=>{try{let t=!0;const r="validate-browser-context-for-indexeddb-analytics-module",i=self.indexedDB.open(r);i.onsuccess=()=>{i.result.close(),t||self.indexedDB.deleteDatabase(r),e(!0)},i.onupgradeneeded=()=>{t=!1},i.onerror=()=>{var e;n((null===(e=i.error)||void 0===e?void 0:e.message)||"")}}catch(e){n(e)}})).then((()=>!0)).catch((()=>!1))}async read(){if(await this._canUseIndexedDBPromise){const e=await async function(e){try{const n=await Hl();return await n.transaction(zl).objectStore(zl).get(Gl(e))}catch(e){if(e instanceof No)Dl.warn(e.message);else{const n=Rl.create("idb-get",{originalErrorMessage:null==e?void 0:e.message});Dl.warn(n.message)}}}(this.app);return e||{heartbeats:[]}}return{heartbeats:[]}}async overwrite(e){var n;if(await this._canUseIndexedDBPromise){const t=await this.read();return Jl(this.app,{lastSentHeartbeatDate:null!==(n=e.lastSentHeartbeatDate)&&void 0!==n?n:t.lastSentHeartbeatDate,heartbeats:e.heartbeats})}}async add(e){var n;if(await this._canUseIndexedDBPromise){const t=await this.read();return Jl(this.app,{lastSentHeartbeatDate:null!==(n=e.lastSentHeartbeatDate)&&void 0!==n?n:t.lastSentHeartbeatDate,heartbeats:[...t.heartbeats,...e.heartbeats]})}}}function Zl(e){return ko(JSON.stringify({version:2,heartbeats:e})).length}Ul(new qo("platform-logger",(e=>new Pl(e)),"PRIVATE")),Ul(new qo("heartbeat",(e=>new $l(e)),"PRIVATE")),Wl(El,_l,""),Wl(El,_l,"esm2017"),Wl("fire-js",""),Wl("firebase","10.6.0","app");const Ql=function(){return{"dependent-sdk-initialized-before-auth":"Another Firebase SDK was initialized and is trying to use Auth before Auth is initialized. Please be sure to call `initializeAuth` or `getAuth` before starting any other Firebase SDK."}},Kl=new Wo("auth","Firebase",{"dependent-sdk-initialized-before-auth":"Another Firebase SDK was initialized and is trying to use Auth before Auth is initialized. Please be sure to call `initializeAuth` or `getAuth` before starting any other Firebase SDK."}),Xl=new sl("@firebase/auth");function ed(e,...n){Xl.logLevel<=nl.ERROR&&Xl.error(`Auth (${Ml}): ${e}`,...n)}function nd(e,...n){throw rd(e,...n)}function td(e,...n){return rd(e,...n)}function rd(e,...n){if("string"!=typeof e){const t=n[0],r=[...n.slice(1)];return r[0]&&(r[0].appName=e.name),e._errorFactory.create(t,...r)}return Kl.create(e,...n)}function id(e,n,...t){if(!e)throw rd(n,...t)}function ad(e){const n="INTERNAL ASSERTION FAILED: "+e;throw ed(n),new Error(n)}function sd(e,n){e||ad(n)}function od(){var e;return"undefined"!=typeof self&&(null===(e=self.location)||void 0===e?void 0:e.href)||""}function ld(){var e;return"undefined"!=typeof self&&(null===(e=self.location)||void 0===e?void 0:e.protocol)||null}function dd(){return!("undefined"!=typeof navigator&&navigator&&"onLine"in navigator&&"boolean"==typeof navigator.onLine&&("http:"===ld()||"https:"===ld()||function(){const e="object"==typeof chrome?chrome.runtime:"object"==typeof browser?browser.runtime:void 0;return"object"==typeof e&&void 0!==e.id}()||"connection"in navigator))||navigator.onLine}class cd{constructor(e,n){this.shortDelay=e,this.longDelay=n,sd(n>e,"Short delay should be less than long delay!"),this.isMobile="undefined"!=typeof window&&!!(window.cordova||window.phonegap||window.PhoneGap)&&/ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(Mo())||"object"==typeof navigator&&"ReactNative"===navigator.product}get(){return dd()?this.isMobile?this.longDelay:this.shortDelay:Math.min(5e3,this.shortDelay)}}function ud(e,n){sd(e.emulator,"Emulator should always be set here");const{url:t}=e.emulator;return n?`${t}${n.startsWith("/")?n.slice(1):n}`:t}class pd{static initialize(e,n,t){this.fetchImpl=e,n&&(this.headersImpl=n),t&&(this.responseImpl=t)}static fetch(){return this.fetchImpl?this.fetchImpl:"undefined"!=typeof self&&"fetch"in self?self.fetch:"undefined"!=typeof globalThis&&globalThis.fetch?globalThis.fetch:"undefined"!=typeof fetch?fetch:void ad("Could not find fetch implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill")}static headers(){return this.headersImpl?this.headersImpl:"undefined"!=typeof self&&"Headers"in self?self.Headers:"undefined"!=typeof globalThis&&globalThis.Headers?globalThis.Headers:"undefined"!=typeof Headers?Headers:void ad("Could not find Headers implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill")}static response(){return this.responseImpl?this.responseImpl:"undefined"!=typeof self&&"Response"in self?self.Response:"undefined"!=typeof globalThis&&globalThis.Response?globalThis.Response:"undefined"!=typeof Response?Response:void ad("Could not find Response implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill")}}const md={CREDENTIAL_MISMATCH:"custom-token-mismatch",MISSING_CUSTOM_TOKEN:"internal-error",INVALID_IDENTIFIER:"invalid-email",MISSING_CONTINUE_URI:"internal-error",INVALID_PASSWORD:"wrong-password",MISSING_PASSWORD:"missing-password",EMAIL_EXISTS:"email-already-in-use",PASSWORD_LOGIN_DISABLED:"operation-not-allowed",INVALID_IDP_RESPONSE:"invalid-credential",INVALID_PENDING_TOKEN:"invalid-credential",FEDERATED_USER_ID_ALREADY_LINKED:"credential-already-in-use",MISSING_REQ_TYPE:"internal-error",EMAIL_NOT_FOUND:"user-not-found",RESET_PASSWORD_EXCEED_LIMIT:"too-many-requests",EXPIRED_OOB_CODE:"expired-action-code",INVALID_OOB_CODE:"invalid-action-code",MISSING_OOB_CODE:"internal-error",CREDENTIAL_TOO_OLD_LOGIN_AGAIN:"requires-recent-login",INVALID_ID_TOKEN:"invalid-user-token",TOKEN_EXPIRED:"user-token-expired",USER_NOT_FOUND:"user-token-expired",TOO_MANY_ATTEMPTS_TRY_LATER:"too-many-requests",PASSWORD_DOES_NOT_MEET_REQUIREMENTS:"password-does-not-meet-requirements",INVALID_CODE:"invalid-verification-code",INVALID_SESSION_INFO:"invalid-verification-id",INVALID_TEMPORARY_PROOF:"invalid-credential",MISSING_SESSION_INFO:"missing-verification-id",SESSION_EXPIRED:"code-expired",MISSING_ANDROID_PACKAGE_NAME:"missing-android-pkg-name",UNAUTHORIZED_DOMAIN:"unauthorized-continue-uri",INVALID_OAUTH_CLIENT_ID:"invalid-oauth-client-id",ADMIN_ONLY_OPERATION:"admin-restricted-operation",INVALID_MFA_PENDING_CREDENTIAL:"invalid-multi-factor-session",MFA_ENROLLMENT_NOT_FOUND:"multi-factor-info-not-found",MISSING_MFA_ENROLLMENT_ID:"missing-multi-factor-info",MISSING_MFA_PENDING_CREDENTIAL:"missing-multi-factor-session",SECOND_FACTOR_EXISTS:"second-factor-already-in-use",SECOND_FACTOR_LIMIT_EXCEEDED:"maximum-second-factor-count-exceeded",BLOCKING_FUNCTION_ERROR_RESPONSE:"internal-error",RECAPTCHA_NOT_ENABLED:"recaptcha-not-enabled",MISSING_RECAPTCHA_TOKEN:"missing-recaptcha-token",INVALID_RECAPTCHA_TOKEN:"invalid-recaptcha-token",INVALID_RECAPTCHA_ACTION:"invalid-recaptcha-action",MISSING_CLIENT_TYPE:"missing-client-type",MISSING_RECAPTCHA_VERSION:"missing-recaptcha-version",INVALID_RECAPTCHA_VERSION:"invalid-recaptcha-version",INVALID_REQ_TYPE:"invalid-req-type"},hd=new cd(3e4,6e4);function fd(e,n){return e.tenantId&&!n.tenantId?Object.assign(Object.assign({},n),{tenantId:e.tenantId}):n}async function gd(e,n,t,r,i={}){return Cd(e,i,(async()=>{let i={},a={};r&&("GET"===n?a=r:i={body:JSON.stringify(r)});const s=Vo(Object.assign({key:e.config.apiKey},a)).slice(1),o=await e._getAdditionalHeaders();return o["Content-Type"]="application/json",e.languageCode&&(o["X-Firebase-Locale"]=e.languageCode),pd.fetch()(vd(e,e.config.apiHost,t,s),Object.assign({method:n,headers:o,referrerPolicy:"no-referrer"},i))}))}async function Cd(e,n,t){e._canInitEmulator=!1;const r=Object.assign(Object.assign({},md),n);try{const n=new yd(e),i=await Promise.race([t(),n.promise]);n.clearNetworkTimeout();const a=await i.json();if("needConfirmation"in a)throw wd(e,"account-exists-with-different-credential",a);if(i.ok&&!("errorMessage"in a))return a;{const n=i.ok?a.errorMessage:a.error.message,[t,s]=n.split(" : ");if("FEDERATED_USER_ID_ALREADY_LINKED"===t)throw wd(e,"credential-already-in-use",a);if("EMAIL_EXISTS"===t)throw wd(e,"email-already-in-use",a);if("USER_DISABLED"===t)throw wd(e,"user-disabled",a);const o=r[t]||t.toLowerCase().replace(/[_\s]+/g,"-");if(s)throw function(e,n,t){const r=Object.assign(Object.assign({},Ql()),{[n]:t});return new Wo("auth","Firebase",r).create(n,{appName:e.name})}(e,o,s);nd(e,o)}}catch(n){if(n instanceof No)throw n;nd(e,"network-request-failed",{message:String(n)})}}async function Ad(e,n,t,r,i={}){const a=await gd(e,n,t,r,i);return"mfaPendingCredential"in a&&nd(e,"multi-factor-auth-required",{_serverResponse:a}),a}function vd(e,n,t,r){const i=`${n}${t}?${r}`;return e.config.emulator?ud(e.config,i):`${e.config.apiScheme}://${i}`}function bd(e){switch(e){case"ENFORCE":return"ENFORCE";case"AUDIT":return"AUDIT";case"OFF":return"OFF";default:return"ENFORCEMENT_STATE_UNSPECIFIED"}}class yd{constructor(e){this.auth=e,this.timer=null,this.promise=new Promise(((e,n)=>{this.timer=setTimeout((()=>n(td(this.auth,"network-request-failed"))),hd.get())}))}clearNetworkTimeout(){clearTimeout(this.timer)}}function wd(e,n,t){const r={appName:e.name};t.email&&(r.email=t.email),t.phoneNumber&&(r.phoneNumber=t.phoneNumber);const i=td(e,n,r);return i.customData._tokenResponse=t,i}function Sd(e){return void 0!==e&&void 0!==e.enterprise}class Pd{constructor(e){if(this.siteKey="",this.recaptchaEnforcementState=[],void 0===e.recaptchaKey)throw new Error("recaptchaKey undefined");this.siteKey=e.recaptchaKey.split("/")[3],this.recaptchaEnforcementState=e.recaptchaEnforcementState}getProviderEnforcementState(e){if(!this.recaptchaEnforcementState||0===this.recaptchaEnforcementState.length)return null;for(const n of this.recaptchaEnforcementState)if(n.provider&&n.provider===e)return bd(n.enforcementState);return null}isProviderEnabled(e){return"ENFORCE"===this.getProviderEnforcementState(e)||"AUDIT"===this.getProviderEnforcementState(e)}}function Ed(e){if(e)try{const n=new Date(Number(e));if(!isNaN(n.getTime()))return n.toUTCString()}catch(e){}}function _d(e){return 1e3*Number(e)}function Dd(e){const[n,t,r]=e.split(".");if(void 0===n||void 0===t||void 0===r)return ed("JWT malformed, contained fewer than 3 sections"),null;try{const e=Lo(t);return e?JSON.parse(e):(ed("Failed to decode base64 JWT payload"),null)}catch(e){return ed("Caught error parsing JWT payload as JSON",null==e?void 0:e.toString()),null}}async function Id(e,n,t=!1){if(t)return n;try{return await n}catch(n){throw n instanceof No&&function({code:e}){return"auth/user-disabled"===e||"auth/user-token-expired"===e}(n)&&e.auth.currentUser===e&&await e.auth.signOut(),n}}class xd{constructor(e){this.user=e,this.isRunning=!1,this.timerId=null,this.errorBackoff=3e4}_start(){this.isRunning||(this.isRunning=!0,this.schedule())}_stop(){this.isRunning&&(this.isRunning=!1,null!==this.timerId&&clearTimeout(this.timerId))}getInterval(e){var n;if(e){const e=this.errorBackoff;return this.errorBackoff=Math.min(2*this.errorBackoff,96e4),e}{this.errorBackoff=3e4;const e=(null!==(n=this.user.stsTokenManager.expirationTime)&&void 0!==n?n:0)-Date.now()-3e5;return Math.max(0,e)}}schedule(e=!1){if(!this.isRunning)return;const n=this.getInterval(e);this.timerId=setTimeout((async()=>{await this.iteration()}),n)}async iteration(){try{await this.user.getIdToken(!0)}catch(e){return void("auth/network-request-failed"===(null==e?void 0:e.code)&&this.schedule(!0))}this.schedule()}}class Od{constructor(e,n){this.createdAt=e,this.lastLoginAt=n,this._initializeTime()}_initializeTime(){this.lastSignInTime=Ed(this.lastLoginAt),this.creationTime=Ed(this.createdAt)}_copy(e){this.createdAt=e.createdAt,this.lastLoginAt=e.lastLoginAt,this._initializeTime()}toJSON(){return{createdAt:this.createdAt,lastLoginAt:this.lastLoginAt}}}async function kd(e){var n;const t=e.auth,r=await e.getIdToken(),i=await Id(e,async function(e,n){return gd(e,"POST","/v1/accounts:lookup",n)}(t,{idToken:r}));id(null==i?void 0:i.users.length,t,"internal-error");const a=i.users[0];e._notifyReloadListener(a);const s=(null===(n=a.providerUserInfo)||void 0===n?void 0:n.length)?a.providerUserInfo.map((e=>{var{providerId:n}=e,t=be(e,["providerId"]);return{providerId:n,uid:t.rawId||"",displayName:t.displayName||null,email:t.email||null,phoneNumber:t.phoneNumber||null,photoURL:t.photoUrl||null}})):[],o=(l=e.providerData,d=s,[...l.filter((e=>!d.some((n=>n.providerId===e.providerId)))),...d]);var l,d;const c=e.isAnonymous,u=!(e.email&&a.passwordHash||(null==o?void 0:o.length)),p=!!c&&u,m={uid:a.localId,displayName:a.displayName||null,photoURL:a.photoUrl||null,email:a.email||null,emailVerified:a.emailVerified||!1,phoneNumber:a.phoneNumber||null,tenantId:a.tenantId||null,providerData:o,metadata:new Od(a.createdAt,a.lastLoginAt),isAnonymous:p};Object.assign(e,m)}class Ld{constructor(){this.refreshToken=null,this.accessToken=null,this.expirationTime=null}get isExpired(){return!this.expirationTime||Date.now()>this.expirationTime-3e4}updateFromServerResponse(e){id(e.idToken,"internal-error"),id(void 0!==e.idToken,"internal-error"),id(void 0!==e.refreshToken,"internal-error");const n="expiresIn"in e&&void 0!==e.expiresIn?Number(e.expiresIn):function(e){const n=Dd(e);return id(n,"internal-error"),id(void 0!==n.exp,"internal-error"),id(void 0!==n.iat,"internal-error"),Number(n.exp)-Number(n.iat)}(e.idToken);this.updateTokensAndExpiration(e.idToken,e.refreshToken,n)}async getToken(e,n=!1){return id(!this.accessToken||this.refreshToken,e,"user-token-expired"),n||!this.accessToken||this.isExpired?this.refreshToken?(await this.refresh(e,this.refreshToken),this.accessToken):null:this.accessToken}clearRefreshToken(){this.refreshToken=null}async refresh(e,n){const{accessToken:t,refreshToken:r,expiresIn:i}=await async function(e,n){const t=await Cd(e,{},(async()=>{const t=Vo({grant_type:"refresh_token",refresh_token:n}).slice(1),{tokenApiHost:r,apiKey:i}=e.config,a=vd(e,r,"/v1/token",`key=${i}`),s=await e._getAdditionalHeaders();return s["Content-Type"]="application/x-www-form-urlencoded",pd.fetch()(a,{method:"POST",headers:s,body:t})}));return{accessToken:t.access_token,expiresIn:t.expires_in,refreshToken:t.refresh_token}}(e,n);this.updateTokensAndExpiration(t,r,Number(i))}updateTokensAndExpiration(e,n,t){this.refreshToken=n||null,this.accessToken=e||null,this.expirationTime=Date.now()+1e3*t}static fromJSON(e,n){const{refreshToken:t,accessToken:r,expirationTime:i}=n,a=new Ld;return t&&(id("string"==typeof t,"internal-error",{appName:e}),a.refreshToken=t),r&&(id("string"==typeof r,"internal-error",{appName:e}),a.accessToken=r),i&&(id("number"==typeof i,"internal-error",{appName:e}),a.expirationTime=i),a}toJSON(){return{refreshToken:this.refreshToken,accessToken:this.accessToken,expirationTime:this.expirationTime}}_assign(e){this.accessToken=e.accessToken,this.refreshToken=e.refreshToken,this.expirationTime=e.expirationTime}_clone(){return Object.assign(new Ld,this.toJSON())}_performRefresh(){return ad("not implemented")}}function Ud(e,n){id("string"==typeof e||void 0===e,"internal-error",{appName:n})}class Td{constructor(e){var{uid:n,auth:t,stsTokenManager:r}=e,i=be(e,["uid","auth","stsTokenManager"]);this.providerId="firebase",this.proactiveRefresh=new xd(this),this.reloadUserInfo=null,this.reloadListener=null,this.uid=n,this.auth=t,this.stsTokenManager=r,this.accessToken=r.accessToken,this.displayName=i.displayName||null,this.email=i.email||null,this.emailVerified=i.emailVerified||!1,this.phoneNumber=i.phoneNumber||null,this.photoURL=i.photoURL||null,this.isAnonymous=i.isAnonymous||!1,this.tenantId=i.tenantId||null,this.providerData=i.providerData?[...i.providerData]:[],this.metadata=new Od(i.createdAt||void 0,i.lastLoginAt||void 0)}async getIdToken(e){const n=await Id(this,this.stsTokenManager.getToken(this.auth,e));return id(n,this.auth,"internal-error"),this.accessToken!==n&&(this.accessToken=n,await this.auth._persistUserIfCurrent(this),this.auth._notifyListenersIfCurrent(this)),n}getIdTokenResult(e){return async function(e,n=!1){const t=Yo(e),r=await t.getIdToken(n),i=Dd(r);id(i&&i.exp&&i.auth_time&&i.iat,t.auth,"internal-error");const a="object"==typeof i.firebase?i.firebase:void 0,s=null==a?void 0:a.sign_in_provider;return{claims:i,token:r,authTime:Ed(_d(i.auth_time)),issuedAtTime:Ed(_d(i.iat)),expirationTime:Ed(_d(i.exp)),signInProvider:s||null,signInSecondFactor:(null==a?void 0:a.sign_in_second_factor)||null}}(this,e)}reload(){return async function(e){const n=Yo(e);await kd(n),await n.auth._persistUserIfCurrent(n),n.auth._notifyListenersIfCurrent(n)}(this)}_assign(e){this!==e&&(id(this.uid===e.uid,this.auth,"internal-error"),this.displayName=e.displayName,this.photoURL=e.photoURL,this.email=e.email,this.emailVerified=e.emailVerified,this.phoneNumber=e.phoneNumber,this.isAnonymous=e.isAnonymous,this.tenantId=e.tenantId,this.providerData=e.providerData.map((e=>Object.assign({},e))),this.metadata._copy(e.metadata),this.stsTokenManager._assign(e.stsTokenManager))}_clone(e){const n=new Td(Object.assign(Object.assign({},this),{auth:e,stsTokenManager:this.stsTokenManager._clone()}));return n.metadata._copy(this.metadata),n}_onReload(e){id(!this.reloadListener,this.auth,"internal-error"),this.reloadListener=e,this.reloadUserInfo&&(this._notifyReloadListener(this.reloadUserInfo),this.reloadUserInfo=null)}_notifyReloadListener(e){this.reloadListener?this.reloadListener(e):this.reloadUserInfo=e}_startProactiveRefresh(){this.proactiveRefresh._start()}_stopProactiveRefresh(){this.proactiveRefresh._stop()}async _updateTokensIfNecessary(e,n=!1){let t=!1;e.idToken&&e.idToken!==this.stsTokenManager.accessToken&&(this.stsTokenManager.updateFromServerResponse(e),t=!0),n&&await kd(this),await this.auth._persistUserIfCurrent(this),t&&this.auth._notifyListenersIfCurrent(this)}async delete(){const e=await this.getIdToken();return await Id(this,async function(e,n){return gd(e,"POST","/v1/accounts:delete",n)}(this.auth,{idToken:e})),this.stsTokenManager.clearRefreshToken(),this.auth.signOut()}toJSON(){return Object.assign(Object.assign({uid:this.uid,email:this.email||void 0,emailVerified:this.emailVerified,displayName:this.displayName||void 0,isAnonymous:this.isAnonymous,photoURL:this.photoURL||void 0,phoneNumber:this.phoneNumber||void 0,tenantId:this.tenantId||void 0,providerData:this.providerData.map((e=>Object.assign({},e))),stsTokenManager:this.stsTokenManager.toJSON(),_redirectEventId:this._redirectEventId},this.metadata.toJSON()),{apiKey:this.auth.config.apiKey,appName:this.auth.name})}get refreshToken(){return this.stsTokenManager.refreshToken||""}static _fromJSON(e,n){var t,r,i,a,s,o,l,d;const c=null!==(t=n.displayName)&&void 0!==t?t:void 0,u=null!==(r=n.email)&&void 0!==r?r:void 0,p=null!==(i=n.phoneNumber)&&void 0!==i?i:void 0,m=null!==(a=n.photoURL)&&void 0!==a?a:void 0,h=null!==(s=n.tenantId)&&void 0!==s?s:void 0,f=null!==(o=n._redirectEventId)&&void 0!==o?o:void 0,g=null!==(l=n.createdAt)&&void 0!==l?l:void 0,C=null!==(d=n.lastLoginAt)&&void 0!==d?d:void 0,{uid:A,emailVerified:v,isAnonymous:b,providerData:y,stsTokenManager:w}=n;id(A&&w,e,"internal-error");const S=Ld.fromJSON(this.name,w);id("string"==typeof A,e,"internal-error"),Ud(c,e.name),Ud(u,e.name),id("boolean"==typeof v,e,"internal-error"),id("boolean"==typeof b,e,"internal-error"),Ud(p,e.name),Ud(m,e.name),Ud(h,e.name),Ud(f,e.name),Ud(g,e.name),Ud(C,e.name);const P=new Td({uid:A,auth:e,email:u,emailVerified:v,displayName:c,isAnonymous:b,photoURL:m,phoneNumber:p,tenantId:h,stsTokenManager:S,createdAt:g,lastLoginAt:C});return y&&Array.isArray(y)&&(P.providerData=y.map((e=>Object.assign({},e)))),f&&(P._redirectEventId=f),P}static async _fromIdTokenResponse(e,n,t=!1){const r=new Ld;r.updateFromServerResponse(n);const i=new Td({uid:n.localId,auth:e,stsTokenManager:r,isAnonymous:t});return await kd(i),i}}const Rd=new Map;function Fd(e){sd(e instanceof Function,"Expected a class definition");let n=Rd.get(e);return n?(sd(n instanceof e,"Instance stored in cache mismatched with class"),n):(n=new e,Rd.set(e,n),n)}class Md{constructor(){this.type="NONE",this.storage={}}async _isAvailable(){return!0}async _set(e,n){this.storage[e]=n}async _get(e){const n=this.storage[e];return void 0===n?null:n}async _remove(e){delete this.storage[e]}_addListener(e,n){}_removeListener(e,n){}}Md.type="NONE";const Nd=Md;function Wd(e,n,t){return`firebase:${e}:${n}:${t}`}class jd{constructor(e,n,t){this.persistence=e,this.auth=n,this.userKey=t;const{config:r,name:i}=this.auth;this.fullUserKey=Wd(this.userKey,r.apiKey,i),this.fullPersistenceKey=Wd("persistence",r.apiKey,i),this.boundEventHandler=n._onStorageEvent.bind(n),this.persistence._addListener(this.fullUserKey,this.boundEventHandler)}setCurrentUser(e){return this.persistence._set(this.fullUserKey,e.toJSON())}async getCurrentUser(){const e=await this.persistence._get(this.fullUserKey);return e?Td._fromJSON(this.auth,e):null}removeCurrentUser(){return this.persistence._remove(this.fullUserKey)}savePersistenceForRedirect(){return this.persistence._set(this.fullPersistenceKey,this.persistence.type)}async setPersistence(e){if(this.persistence===e)return;const n=await this.getCurrentUser();return await this.removeCurrentUser(),this.persistence=e,n?this.setCurrentUser(n):void 0}delete(){this.persistence._removeListener(this.fullUserKey,this.boundEventHandler)}static async create(e,n,t="authUser"){if(!n.length)return new jd(Fd(Nd),e,t);const r=(await Promise.all(n.map((async e=>{if(await e._isAvailable())return e})))).filter((e=>e));let i=r[0]||Fd(Nd);const a=Wd(t,e.config.apiKey,e.name);let s=null;for(const t of n)try{const n=await t._get(a);if(n){const r=Td._fromJSON(e,n);t!==i&&(s=r),i=t;break}}catch(e){}const o=r.filter((e=>e._shouldAllowMigration));return i._shouldAllowMigration&&o.length?(i=o[0],s&&await i._set(a,s.toJSON()),await Promise.all(n.map((async e=>{if(e!==i)try{await e._remove(a)}catch(e){}}))),new jd(i,e,t)):new jd(i,e,t)}}function Bd(e){const n=e.toLowerCase();if(n.includes("opera/")||n.includes("opr/")||n.includes("opios/"))return"Opera";if(Jd(n))return"IEMobile";if(n.includes("msie")||n.includes("trident/"))return"IE";if(n.includes("edge/"))return"Edge";if(zd(n))return"Firefox";if(n.includes("silk/"))return"Silk";if($d(n))return"Blackberry";if(Yd(n))return"Webos";if(Vd(n))return"Safari";if((n.includes("chrome/")||Hd(n))&&!n.includes("edge/"))return"Chrome";if(Gd(n))return"Android";{const n=/([a-zA-Z\d\.]+)\/[a-zA-Z\d\.]*$/,t=e.match(n);if(2===(null==t?void 0:t.length))return t[1]}return"Other"}function zd(e=Mo()){return/firefox\//i.test(e)}function Vd(e=Mo()){const n=e.toLowerCase();return n.includes("safari/")&&!n.includes("chrome/")&&!n.includes("crios/")&&!n.includes("android")}function Hd(e=Mo()){return/crios\//i.test(e)}function Jd(e=Mo()){return/iemobile/i.test(e)}function Gd(e=Mo()){return/android/i.test(e)}function $d(e=Mo()){return/blackberry/i.test(e)}function Yd(e=Mo()){return/webos/i.test(e)}function qd(e=Mo()){return/iphone|ipad|ipod/i.test(e)||/macintosh/i.test(e)&&/mobile/i.test(e)}function Zd(e=Mo()){return qd(e)||Gd(e)||Yd(e)||$d(e)||/windows phone/i.test(e)||Jd(e)}function Qd(e,n=[]){let t;switch(e){case"Browser":t=Bd(Mo());break;case"Worker":t=`${Bd(Mo())}-${e}`;break;default:t=e}const r=n.length?n.join(","):"FirebaseCore-web";return`${t}/JsCore/${Ml}/${r}`}class Kd{constructor(e){this.auth=e,this.queue=[]}pushCallback(e,n){const t=n=>new Promise(((t,r)=>{try{t(e(n))}catch(e){r(e)}}));t.onAbort=n,this.queue.push(t);const r=this.queue.length-1;return()=>{this.queue[r]=()=>Promise.resolve()}}async runMiddleware(e){if(this.auth.currentUser===e)return;const n=[];try{for(const t of this.queue)await t(e),t.onAbort&&n.push(t.onAbort)}catch(e){n.reverse();for(const e of n)try{e()}catch(e){}throw this.auth._errorFactory.create("login-blocked",{originalMessage:null==e?void 0:e.message})}}}class Xd{constructor(e){var n,t,r,i;const a=e.customStrengthOptions;this.customStrengthOptions={},this.customStrengthOptions.minPasswordLength=null!==(n=a.minPasswordLength)&&void 0!==n?n:6,a.maxPasswordLength&&(this.customStrengthOptions.maxPasswordLength=a.maxPasswordLength),void 0!==a.containsLowercaseCharacter&&(this.customStrengthOptions.containsLowercaseLetter=a.containsLowercaseCharacter),void 0!==a.containsUppercaseCharacter&&(this.customStrengthOptions.containsUppercaseLetter=a.containsUppercaseCharacter),void 0!==a.containsNumericCharacter&&(this.customStrengthOptions.containsNumericCharacter=a.containsNumericCharacter),void 0!==a.containsNonAlphanumericCharacter&&(this.customStrengthOptions.containsNonAlphanumericCharacter=a.containsNonAlphanumericCharacter),this.enforcementState=e.enforcementState,"ENFORCEMENT_STATE_UNSPECIFIED"===this.enforcementState&&(this.enforcementState="OFF"),this.allowedNonAlphanumericCharacters=null!==(r=null===(t=e.allowedNonAlphanumericCharacters)||void 0===t?void 0:t.join(""))&&void 0!==r?r:"",this.forceUpgradeOnSignin=null!==(i=e.forceUpgradeOnSignin)&&void 0!==i&&i,this.schemaVersion=e.schemaVersion}validatePassword(e){var n,t,r,i,a,s;const o={isValid:!0,passwordPolicy:this};return this.validatePasswordLengthOptions(e,o),this.validatePasswordCharacterOptions(e,o),o.isValid&&(o.isValid=null===(n=o.meetsMinPasswordLength)||void 0===n||n),o.isValid&&(o.isValid=null===(t=o.meetsMaxPasswordLength)||void 0===t||t),o.isValid&&(o.isValid=null===(r=o.containsLowercaseLetter)||void 0===r||r),o.isValid&&(o.isValid=null===(i=o.containsUppercaseLetter)||void 0===i||i),o.isValid&&(o.isValid=null===(a=o.containsNumericCharacter)||void 0===a||a),o.isValid&&(o.isValid=null===(s=o.containsNonAlphanumericCharacter)||void 0===s||s),o}validatePasswordLengthOptions(e,n){const t=this.customStrengthOptions.minPasswordLength,r=this.customStrengthOptions.maxPasswordLength;t&&(n.meetsMinPasswordLength=e.length>=t),r&&(n.meetsMaxPasswordLength=e.length<=r)}validatePasswordCharacterOptions(e,n){let t;this.updatePasswordCharacterOptionsStatuses(n,!1,!1,!1,!1);for(let r=0;r<e.length;r++)t=e.charAt(r),this.updatePasswordCharacterOptionsStatuses(n,t>="a"&&t<="z",t>="A"&&t<="Z",t>="0"&&t<="9",this.allowedNonAlphanumericCharacters.includes(t))}updatePasswordCharacterOptionsStatuses(e,n,t,r,i){this.customStrengthOptions.containsLowercaseLetter&&(e.containsLowercaseLetter||(e.containsLowercaseLetter=n)),this.customStrengthOptions.containsUppercaseLetter&&(e.containsUppercaseLetter||(e.containsUppercaseLetter=t)),this.customStrengthOptions.containsNumericCharacter&&(e.containsNumericCharacter||(e.containsNumericCharacter=r)),this.customStrengthOptions.containsNonAlphanumericCharacter&&(e.containsNonAlphanumericCharacter||(e.containsNonAlphanumericCharacter=i))}}class ec{constructor(e,n,t,r){this.app=e,this.heartbeatServiceProvider=n,this.appCheckServiceProvider=t,this.config=r,this.currentUser=null,this.emulatorConfig=null,this.operations=Promise.resolve(),this.authStateSubscription=new tc(this),this.idTokenSubscription=new tc(this),this.beforeStateQueue=new Kd(this),this.redirectUser=null,this.isProactiveRefreshEnabled=!1,this.EXPECTED_PASSWORD_POLICY_SCHEMA_VERSION=1,this._canInitEmulator=!0,this._isInitialized=!1,this._deleted=!1,this._initializationPromise=null,this._popupRedirectResolver=null,this._errorFactory=Kl,this._agentRecaptchaConfig=null,this._tenantRecaptchaConfigs={},this._projectPasswordPolicy=null,this._tenantPasswordPolicies={},this.lastNotifiedUid=void 0,this.languageCode=null,this.tenantId=null,this.settings={appVerificationDisabledForTesting:!1},this.frameworks=[],this.name=e.name,this.clientVersion=r.sdkClientVersion}_initializeWithPersistence(e,n){return n&&(this._popupRedirectResolver=Fd(n)),this._initializationPromise=this.queue((async()=>{var t,r;if(!this._deleted&&(this.persistenceManager=await jd.create(this,e),!this._deleted)){if(null===(t=this._popupRedirectResolver)||void 0===t?void 0:t._shouldInitProactively)try{await this._popupRedirectResolver._initialize(this)}catch(e){}await this.initializeCurrentUser(n),this.lastNotifiedUid=(null===(r=this.currentUser)||void 0===r?void 0:r.uid)||null,this._deleted||(this._isInitialized=!0)}})),this._initializationPromise}async _onStorageEvent(){if(this._deleted)return;const e=await this.assertedPersistence.getCurrentUser();return this.currentUser||e?this.currentUser&&e&&this.currentUser.uid===e.uid?(this._currentUser._assign(e),void await this.currentUser.getIdToken()):void await this._updateCurrentUser(e,!0):void 0}async initializeCurrentUser(e){var n;const t=await this.assertedPersistence.getCurrentUser();let r=t,i=!1;if(e&&this.config.authDomain){await this.getOrInitRedirectPersistenceManager();const t=null===(n=this.redirectUser)||void 0===n?void 0:n._redirectEventId,a=null==r?void 0:r._redirectEventId,s=await this.tryRedirectSignIn(e);t&&t!==a||!(null==s?void 0:s.user)||(r=s.user,i=!0)}if(!r)return this.directlySetCurrentUser(null);if(!r._redirectEventId){if(i)try{await this.beforeStateQueue.runMiddleware(r)}catch(e){r=t,this._popupRedirectResolver._overrideRedirectResult(this,(()=>Promise.reject(e)))}return r?this.reloadAndSetCurrentUserOrClear(r):this.directlySetCurrentUser(null)}return id(this._popupRedirectResolver,this,"argument-error"),await this.getOrInitRedirectPersistenceManager(),this.redirectUser&&this.redirectUser._redirectEventId===r._redirectEventId?this.directlySetCurrentUser(r):this.reloadAndSetCurrentUserOrClear(r)}async tryRedirectSignIn(e){let n=null;try{n=await this._popupRedirectResolver._completeRedirectFn(this,e,!0)}catch(e){await this._setRedirectUser(null)}return n}async reloadAndSetCurrentUserOrClear(e){try{await kd(e)}catch(e){if("auth/network-request-failed"!==(null==e?void 0:e.code))return this.directlySetCurrentUser(null)}return this.directlySetCurrentUser(e)}useDeviceLanguage(){this.languageCode=function(){if("undefined"==typeof navigator)return null;const e=navigator;return e.languages&&e.languages[0]||e.language||null}()}async _delete(){this._deleted=!0}async updateCurrentUser(e){const n=e?Yo(e):null;return n&&id(n.auth.config.apiKey===this.config.apiKey,this,"invalid-user-token"),this._updateCurrentUser(n&&n._clone(this))}async _updateCurrentUser(e,n=!1){if(!this._deleted)return e&&id(this.tenantId===e.tenantId,this,"tenant-id-mismatch"),n||await this.beforeStateQueue.runMiddleware(e),this.queue((async()=>{await this.directlySetCurrentUser(e),this.notifyAuthListeners()}))}async signOut(){return await this.beforeStateQueue.runMiddleware(null),(this.redirectPersistenceManager||this._popupRedirectResolver)&&await this._setRedirectUser(null),this._updateCurrentUser(null,!0)}setPersistence(e){return this.queue((async()=>{await this.assertedPersistence.setPersistence(Fd(e))}))}_getRecaptchaConfig(){return null==this.tenantId?this._agentRecaptchaConfig:this._tenantRecaptchaConfigs[this.tenantId]}async validatePassword(e){this._getPasswordPolicyInternal()||await this._updatePasswordPolicy();const n=this._getPasswordPolicyInternal();return n.schemaVersion!==this.EXPECTED_PASSWORD_POLICY_SCHEMA_VERSION?Promise.reject(this._errorFactory.create("unsupported-password-policy-schema-version",{})):n.validatePassword(e)}_getPasswordPolicyInternal(){return null===this.tenantId?this._projectPasswordPolicy:this._tenantPasswordPolicies[this.tenantId]}async _updatePasswordPolicy(){const e=await async function(e,n={}){return gd(e,"GET","/v2/passwordPolicy",fd(e,n))}(this),n=new Xd(e);null===this.tenantId?this._projectPasswordPolicy=n:this._tenantPasswordPolicies[this.tenantId]=n}_getPersistence(){return this.assertedPersistence.persistence.type}_updateErrorMap(e){this._errorFactory=new Wo("auth","Firebase",e())}onAuthStateChanged(e,n,t){return this.registerStateListener(this.authStateSubscription,e,n,t)}beforeAuthStateChanged(e,n){return this.beforeStateQueue.pushCallback(e,n)}onIdTokenChanged(e,n,t){return this.registerStateListener(this.idTokenSubscription,e,n,t)}authStateReady(){return new Promise(((e,n)=>{if(this.currentUser)e();else{const t=this.onAuthStateChanged((()=>{t(),e()}),n)}}))}async revokeAccessToken(e){if(this.currentUser){const n={providerId:"apple.com",tokenType:"ACCESS_TOKEN",token:e,idToken:await this.currentUser.getIdToken()};null!=this.tenantId&&(n.tenantId=this.tenantId),await async function(e,n){return gd(e,"POST","/v2/accounts:revokeToken",fd(e,n))}(this,n)}}toJSON(){var e;return{apiKey:this.config.apiKey,authDomain:this.config.authDomain,appName:this.name,currentUser:null===(e=this._currentUser)||void 0===e?void 0:e.toJSON()}}async _setRedirectUser(e,n){const t=await this.getOrInitRedirectPersistenceManager(n);return null===e?t.removeCurrentUser():t.setCurrentUser(e)}async getOrInitRedirectPersistenceManager(e){if(!this.redirectPersistenceManager){const n=e&&Fd(e)||this._popupRedirectResolver;id(n,this,"argument-error"),this.redirectPersistenceManager=await jd.create(this,[Fd(n._redirectPersistence)],"redirectUser"),this.redirectUser=await this.redirectPersistenceManager.getCurrentUser()}return this.redirectPersistenceManager}async _redirectUserForId(e){var n,t;return this._isInitialized&&await this.queue((async()=>{})),(null===(n=this._currentUser)||void 0===n?void 0:n._redirectEventId)===e?this._currentUser:(null===(t=this.redirectUser)||void 0===t?void 0:t._redirectEventId)===e?this.redirectUser:null}async _persistUserIfCurrent(e){if(e===this.currentUser)return this.queue((async()=>this.directlySetCurrentUser(e)))}_notifyListenersIfCurrent(e){e===this.currentUser&&this.notifyAuthListeners()}_key(){return`${this.config.authDomain}:${this.config.apiKey}:${this.name}`}_startProactiveRefresh(){this.isProactiveRefreshEnabled=!0,this.currentUser&&this._currentUser._startProactiveRefresh()}_stopProactiveRefresh(){this.isProactiveRefreshEnabled=!1,this.currentUser&&this._currentUser._stopProactiveRefresh()}get _currentUser(){return this.currentUser}notifyAuthListeners(){var e,n;if(!this._isInitialized)return;this.idTokenSubscription.next(this.currentUser);const t=null!==(n=null===(e=this.currentUser)||void 0===e?void 0:e.uid)&&void 0!==n?n:null;this.lastNotifiedUid!==t&&(this.lastNotifiedUid=t,this.authStateSubscription.next(this.currentUser))}registerStateListener(e,n,t,r){if(this._deleted)return()=>{};const i="function"==typeof n?n:n.next.bind(n);let a=!1;const s=this._isInitialized?Promise.resolve():this._initializationPromise;if(id(s,this,"internal-error"),s.then((()=>{a||i(this.currentUser)})),"function"==typeof n){const i=e.addObserver(n,t,r);return()=>{a=!0,i()}}{const t=e.addObserver(n);return()=>{a=!0,t()}}}async directlySetCurrentUser(e){this.currentUser&&this.currentUser!==e&&this._currentUser._stopProactiveRefresh(),e&&this.isProactiveRefreshEnabled&&e._startProactiveRefresh(),this.currentUser=e,e?await this.assertedPersistence.setCurrentUser(e):await this.assertedPersistence.removeCurrentUser()}queue(e){return this.operations=this.operations.then(e,e),this.operations}get assertedPersistence(){return id(this.persistenceManager,this,"internal-error"),this.persistenceManager}_logFramework(e){e&&!this.frameworks.includes(e)&&(this.frameworks.push(e),this.frameworks.sort(),this.clientVersion=Qd(this.config.clientPlatform,this._getFrameworks()))}_getFrameworks(){return this.frameworks}async _getAdditionalHeaders(){var e;const n={"X-Client-Version":this.clientVersion};this.app.options.appId&&(n["X-Firebase-gmpid"]=this.app.options.appId);const t=await(null===(e=this.heartbeatServiceProvider.getImmediate({optional:!0}))||void 0===e?void 0:e.getHeartbeatsHeader());t&&(n["X-Firebase-Client"]=t);const r=await this._getAppCheckToken();return r&&(n["X-Firebase-AppCheck"]=r),n}async _getAppCheckToken(){var e;const n=await(null===(e=this.appCheckServiceProvider.getImmediate({optional:!0}))||void 0===e?void 0:e.getToken());return(null==n?void 0:n.error)&&function(e,...n){Xl.logLevel<=nl.WARN&&Xl.warn(`Auth (${Ml}): ${e}`,...n)}(`Error while retrieving App Check token: ${n.error}`),null==n?void 0:n.token}}function nc(e){return Yo(e)}class tc{constructor(e){this.auth=e,this.observer=null,this.addObserver=function(e,n){const t=new Go(e,void 0);return t.subscribe.bind(t)}((e=>this.observer=e))}get next(){return id(this.observer,this.auth,"internal-error"),this.observer.next.bind(this.observer)}}function rc(e){return new Promise(((n,t)=>{const r=document.createElement("script");var i,a;r.setAttribute("src",e),r.onload=n,r.onerror=e=>{const n=td("internal-error");n.customData=e,t(n)},r.type="text/javascript",r.charset="UTF-8",(null!==(a=null===(i=document.getElementsByTagName("head"))||void 0===i?void 0:i[0])&&void 0!==a?a:document).appendChild(r)}))}function ic(e){return`__${e}${Math.floor(1e6*Math.random())}`}class ac{constructor(e){this.type="recaptcha-enterprise",this.auth=nc(e)}async verify(e="verify",n=!1){function t(n,t,r){const i=window.grecaptcha;Sd(i)?i.enterprise.ready((()=>{i.enterprise.execute(n,{action:e}).then((e=>{t(e)})).catch((()=>{t("NO_RECAPTCHA")}))})):r(Error("No reCAPTCHA enterprise script loaded."))}return new Promise(((e,r)=>{(async function(e){if(!n){if(null==e.tenantId&&null!=e._agentRecaptchaConfig)return e._agentRecaptchaConfig.siteKey;if(null!=e.tenantId&&void 0!==e._tenantRecaptchaConfigs[e.tenantId])return e._tenantRecaptchaConfigs[e.tenantId].siteKey}return new Promise((async(n,t)=>{(async function(e,n){return gd(e,"GET","/v2/recaptchaConfig",fd(e,n))})(e,{clientType:"CLIENT_TYPE_WEB",version:"RECAPTCHA_ENTERPRISE"}).then((r=>{if(void 0!==r.recaptchaKey){const t=new Pd(r);return null==e.tenantId?e._agentRecaptchaConfig=t:e._tenantRecaptchaConfigs[e.tenantId]=t,n(t.siteKey)}t(new Error("recaptcha Enterprise site key undefined"))})).catch((e=>{t(e)}))}))})(this.auth).then((i=>{if(!n&&Sd(window.grecaptcha))t(i,e,r);else{if("undefined"==typeof window)return void r(new Error("RecaptchaVerifier is only supported in browser"));rc("https://www.google.com/recaptcha/enterprise.js?render="+i).then((()=>{t(i,e,r)})).catch((e=>{r(e)}))}})).catch((e=>{r(e)}))}))}}async function sc(e,n,t,r=!1){const i=new ac(e);let a;try{a=await i.verify(t)}catch(e){a=await i.verify(t,!0)}const s=Object.assign({},n);return r?Object.assign(s,{captchaResp:a}):Object.assign(s,{captchaResponse:a}),Object.assign(s,{clientType:"CLIENT_TYPE_WEB"}),Object.assign(s,{recaptchaVersion:"RECAPTCHA_ENTERPRISE"}),s}async function oc(e,n,t,r){var i;if(null===(i=e._getRecaptchaConfig())||void 0===i?void 0:i.isProviderEnabled("EMAIL_PASSWORD_PROVIDER")){const i=await sc(e,n,t,"getOobCode"===t);return r(e,i)}return r(e,n).catch((async i=>{if("auth/missing-recaptcha-token"===i.code){console.log(`${t} is protected by reCAPTCHA Enterprise for this project. Automatically triggering the reCAPTCHA flow and restarting the flow.`);const i=await sc(e,n,t,"getOobCode"===t);return r(e,i)}return Promise.reject(i)}))}function lc(e){const n=e.indexOf(":");return n<0?"":e.substr(0,n+1)}function dc(e){if(!e)return null;const n=Number(e);return isNaN(n)?null:n}class cc{constructor(e,n){this.providerId=e,this.signInMethod=n}toJSON(){return ad("not implemented")}_getIdTokenResponse(e){return ad("not implemented")}_linkToIdToken(e,n){return ad("not implemented")}_getReauthenticationResolver(e){return ad("not implemented")}}async function uc(e,n){return gd(e,"POST","/v1/accounts:signUp",n)}async function pc(e,n){return Ad(e,"POST","/v1/accounts:signInWithPassword",fd(e,n))}class mc extends cc{constructor(e,n,t,r=null){super("password",t),this._email=e,this._password=n,this._tenantId=r}static _fromEmailAndPassword(e,n){return new mc(e,n,"password")}static _fromEmailAndCode(e,n,t=null){return new mc(e,n,"emailLink",t)}toJSON(){return{email:this._email,password:this._password,signInMethod:this.signInMethod,tenantId:this._tenantId}}static fromJSON(e){const n="string"==typeof e?JSON.parse(e):e;if((null==n?void 0:n.email)&&(null==n?void 0:n.password)){if("password"===n.signInMethod)return this._fromEmailAndPassword(n.email,n.password);if("emailLink"===n.signInMethod)return this._fromEmailAndCode(n.email,n.password,n.tenantId)}return null}async _getIdTokenResponse(e){switch(this.signInMethod){case"password":return oc(e,{returnSecureToken:!0,email:this._email,password:this._password,clientType:"CLIENT_TYPE_WEB"},"signInWithPassword",pc);case"emailLink":return async function(e,n){return Ad(e,"POST","/v1/accounts:signInWithEmailLink",fd(e,n))}(e,{email:this._email,oobCode:this._password});default:nd(e,"internal-error")}}async _linkToIdToken(e,n){switch(this.signInMethod){case"password":return oc(e,{idToken:n,returnSecureToken:!0,email:this._email,password:this._password,clientType:"CLIENT_TYPE_WEB"},"signUpPassword",uc);case"emailLink":return async function(e,n){return Ad(e,"POST","/v1/accounts:signInWithEmailLink",fd(e,n))}(e,{idToken:n,email:this._email,oobCode:this._password});default:nd(e,"internal-error")}}_getReauthenticationResolver(e){return this._getIdTokenResponse(e)}}async function hc(e,n){return Ad(e,"POST","/v1/accounts:signInWithIdp",fd(e,n))}class fc extends cc{constructor(){super(...arguments),this.pendingToken=null}static _fromParams(e){const n=new fc(e.providerId,e.signInMethod);return e.idToken||e.accessToken?(e.idToken&&(n.idToken=e.idToken),e.accessToken&&(n.accessToken=e.accessToken),e.nonce&&!e.pendingToken&&(n.nonce=e.nonce),e.pendingToken&&(n.pendingToken=e.pendingToken)):e.oauthToken&&e.oauthTokenSecret?(n.accessToken=e.oauthToken,n.secret=e.oauthTokenSecret):nd("argument-error"),n}toJSON(){return{idToken:this.idToken,accessToken:this.accessToken,secret:this.secret,nonce:this.nonce,pendingToken:this.pendingToken,providerId:this.providerId,signInMethod:this.signInMethod}}static fromJSON(e){const n="string"==typeof e?JSON.parse(e):e,{providerId:t,signInMethod:r}=n,i=be(n,["providerId","signInMethod"]);if(!t||!r)return null;const a=new fc(t,r);return a.idToken=i.idToken||void 0,a.accessToken=i.accessToken||void 0,a.secret=i.secret,a.nonce=i.nonce,a.pendingToken=i.pendingToken||null,a}_getIdTokenResponse(e){return hc(e,this.buildRequest())}_linkToIdToken(e,n){const t=this.buildRequest();return t.idToken=n,hc(e,t)}_getReauthenticationResolver(e){const n=this.buildRequest();return n.autoCreate=!1,hc(e,n)}buildRequest(){const e={requestUri:"http://localhost",returnSecureToken:!0};if(this.pendingToken)e.pendingToken=this.pendingToken;else{const n={};this.idToken&&(n.id_token=this.idToken),this.accessToken&&(n.access_token=this.accessToken),this.secret&&(n.oauth_token_secret=this.secret),n.providerId=this.providerId,this.nonce&&!this.pendingToken&&(n.nonce=this.nonce),e.postBody=Vo(n)}return e}}const gc={USER_NOT_FOUND:"user-not-found"};class Cc extends cc{constructor(e){super("phone","phone"),this.params=e}static _fromVerification(e,n){return new Cc({verificationId:e,verificationCode:n})}static _fromTokenResponse(e,n){return new Cc({phoneNumber:e,temporaryProof:n})}_getIdTokenResponse(e){return async function(e,n){return Ad(e,"POST","/v1/accounts:signInWithPhoneNumber",fd(e,n))}(e,this._makeVerificationRequest())}_linkToIdToken(e,n){return async function(e,n){const t=await Ad(e,"POST","/v1/accounts:signInWithPhoneNumber",fd(e,n));if(t.temporaryProof)throw wd(e,"account-exists-with-different-credential",t);return t}(e,Object.assign({idToken:n},this._makeVerificationRequest()))}_getReauthenticationResolver(e){return async function(e,n){return Ad(e,"POST","/v1/accounts:signInWithPhoneNumber",fd(e,Object.assign(Object.assign({},n),{operation:"REAUTH"})),gc)}(e,this._makeVerificationRequest())}_makeVerificationRequest(){const{temporaryProof:e,phoneNumber:n,verificationId:t,verificationCode:r}=this.params;return e&&n?{temporaryProof:e,phoneNumber:n}:{sessionInfo:t,code:r}}toJSON(){const e={providerId:this.providerId};return this.params.phoneNumber&&(e.phoneNumber=this.params.phoneNumber),this.params.temporaryProof&&(e.temporaryProof=this.params.temporaryProof),this.params.verificationCode&&(e.verificationCode=this.params.verificationCode),this.params.verificationId&&(e.verificationId=this.params.verificationId),e}static fromJSON(e){"string"==typeof e&&(e=JSON.parse(e));const{verificationId:n,verificationCode:t,phoneNumber:r,temporaryProof:i}=e;return t||n||r||i?new Cc({verificationId:n,verificationCode:t,phoneNumber:r,temporaryProof:i}):null}}class Ac{constructor(e){var n,t,r,i,a,s;const o=Ho(Jo(e)),l=null!==(n=o.apiKey)&&void 0!==n?n:null,d=null!==(t=o.oobCode)&&void 0!==t?t:null,c=function(e){switch(e){case"recoverEmail":return"RECOVER_EMAIL";case"resetPassword":return"PASSWORD_RESET";case"signIn":return"EMAIL_SIGNIN";case"verifyEmail":return"VERIFY_EMAIL";case"verifyAndChangeEmail":return"VERIFY_AND_CHANGE_EMAIL";case"revertSecondFactorAddition":return"REVERT_SECOND_FACTOR_ADDITION";default:return null}}(null!==(r=o.mode)&&void 0!==r?r:null);id(l&&d&&c,"argument-error"),this.apiKey=l,this.operation=c,this.code=d,this.continueUrl=null!==(i=o.continueUrl)&&void 0!==i?i:null,this.languageCode=null!==(a=o.languageCode)&&void 0!==a?a:null,this.tenantId=null!==(s=o.tenantId)&&void 0!==s?s:null}static parseLink(e){const n=function(e){const n=Ho(Jo(e)).link,t=n?Ho(Jo(n)).deep_link_id:null,r=Ho(Jo(e)).deep_link_id;return(r?Ho(Jo(r)).link:null)||r||t||n||e}(e);try{return new Ac(n)}catch(e){return null}}}class vc{constructor(){this.providerId=vc.PROVIDER_ID}static credential(e,n){return mc._fromEmailAndPassword(e,n)}static credentialWithLink(e,n){const t=Ac.parseLink(n);return id(t,"argument-error"),mc._fromEmailAndCode(e,t.code,t.tenantId)}}vc.PROVIDER_ID="password",vc.EMAIL_PASSWORD_SIGN_IN_METHOD="password",vc.EMAIL_LINK_SIGN_IN_METHOD="emailLink";class bc{constructor(e){this.providerId=e,this.defaultLanguageCode=null,this.customParameters={}}setDefaultLanguage(e){this.defaultLanguageCode=e}setCustomParameters(e){return this.customParameters=e,this}getCustomParameters(){return this.customParameters}}class yc extends bc{constructor(){super(...arguments),this.scopes=[]}addScope(e){return this.scopes.includes(e)||this.scopes.push(e),this}getScopes(){return[...this.scopes]}}class wc extends yc{constructor(){super("facebook.com")}static credential(e){return fc._fromParams({providerId:wc.PROVIDER_ID,signInMethod:wc.FACEBOOK_SIGN_IN_METHOD,accessToken:e})}static credentialFromResult(e){return wc.credentialFromTaggedObject(e)}static credentialFromError(e){return wc.credentialFromTaggedObject(e.customData||{})}static credentialFromTaggedObject({_tokenResponse:e}){if(!e||!("oauthAccessToken"in e))return null;if(!e.oauthAccessToken)return null;try{return wc.credential(e.oauthAccessToken)}catch(e){return null}}}wc.FACEBOOK_SIGN_IN_METHOD="facebook.com",wc.PROVIDER_ID="facebook.com";class Sc extends yc{constructor(){super("google.com"),this.addScope("profile")}static credential(e,n){return fc._fromParams({providerId:Sc.PROVIDER_ID,signInMethod:Sc.GOOGLE_SIGN_IN_METHOD,idToken:e,accessToken:n})}static credentialFromResult(e){return Sc.credentialFromTaggedObject(e)}static credentialFromError(e){return Sc.credentialFromTaggedObject(e.customData||{})}static credentialFromTaggedObject({_tokenResponse:e}){if(!e)return null;const{oauthIdToken:n,oauthAccessToken:t}=e;if(!n&&!t)return null;try{return Sc.credential(n,t)}catch(e){return null}}}Sc.GOOGLE_SIGN_IN_METHOD="google.com",Sc.PROVIDER_ID="google.com";class Pc extends yc{constructor(){super("github.com")}static credential(e){return fc._fromParams({providerId:Pc.PROVIDER_ID,signInMethod:Pc.GITHUB_SIGN_IN_METHOD,accessToken:e})}static credentialFromResult(e){return Pc.credentialFromTaggedObject(e)}static credentialFromError(e){return Pc.credentialFromTaggedObject(e.customData||{})}static credentialFromTaggedObject({_tokenResponse:e}){if(!e||!("oauthAccessToken"in e))return null;if(!e.oauthAccessToken)return null;try{return Pc.credential(e.oauthAccessToken)}catch(e){return null}}}Pc.GITHUB_SIGN_IN_METHOD="github.com",Pc.PROVIDER_ID="github.com";class Ec extends yc{constructor(){super("twitter.com")}static credential(e,n){return fc._fromParams({providerId:Ec.PROVIDER_ID,signInMethod:Ec.TWITTER_SIGN_IN_METHOD,oauthToken:e,oauthTokenSecret:n})}static credentialFromResult(e){return Ec.credentialFromTaggedObject(e)}static credentialFromError(e){return Ec.credentialFromTaggedObject(e.customData||{})}static credentialFromTaggedObject({_tokenResponse:e}){if(!e)return null;const{oauthAccessToken:n,oauthTokenSecret:t}=e;if(!n||!t)return null;try{return Ec.credential(n,t)}catch(e){return null}}}Ec.TWITTER_SIGN_IN_METHOD="twitter.com",Ec.PROVIDER_ID="twitter.com";class _c{constructor(e){this.user=e.user,this.providerId=e.providerId,this._tokenResponse=e._tokenResponse,this.operationType=e.operationType}static async _fromIdTokenResponse(e,n,t,r=!1){const i=await Td._fromIdTokenResponse(e,t,r),a=Dc(t);return new _c({user:i,providerId:a,_tokenResponse:t,operationType:n})}static async _forOperation(e,n,t){await e._updateTokensIfNecessary(t,!0);const r=Dc(t);return new _c({user:e,providerId:r,_tokenResponse:t,operationType:n})}}function Dc(e){return e.providerId?e.providerId:"phoneNumber"in e?"phone":null}class Ic extends No{constructor(e,n,t,r){var i;super(n.code,n.message),this.operationType=t,this.user=r,Object.setPrototypeOf(this,Ic.prototype),this.customData={appName:e.name,tenantId:null!==(i=e.tenantId)&&void 0!==i?i:void 0,_serverResponse:n.customData._serverResponse,operationType:t}}static _fromErrorAndOperation(e,n,t,r){return new Ic(e,n,t,r)}}function xc(e,n,t,r){return("reauthenticate"===n?t._getReauthenticationResolver(e):t._getIdTokenResponse(e)).catch((t=>{if("auth/multi-factor-auth-required"===t.code)throw Ic._fromErrorAndOperation(e,t,n,r);throw t}))}new WeakMap;const Oc="__sak";class kc{constructor(e,n){this.storageRetriever=e,this.type=n}_isAvailable(){try{return this.storage?(this.storage.setItem(Oc,"1"),this.storage.removeItem(Oc),Promise.resolve(!0)):Promise.resolve(!1)}catch(e){return Promise.resolve(!1)}}_set(e,n){return this.storage.setItem(e,JSON.stringify(n)),Promise.resolve()}_get(e){const n=this.storage.getItem(e);return Promise.resolve(n?JSON.parse(n):null)}_remove(e){return this.storage.removeItem(e),Promise.resolve()}get storage(){return this.storageRetriever()}}class Lc extends kc{constructor(){super((()=>window.localStorage),"LOCAL"),this.boundEventHandler=(e,n)=>this.onStorageEvent(e,n),this.listeners={},this.localCache={},this.pollTimer=null,this.safariLocalStorageNotSynced=function(){const e=Mo();return Vd(e)||qd(e)}()&&function(){try{return!(!window||window===window.top)}catch(e){return!1}}(),this.fallbackToPolling=Zd(),this._shouldAllowMigration=!0}forAllChangedKeys(e){for(const n of Object.keys(this.listeners)){const t=this.storage.getItem(n),r=this.localCache[n];t!==r&&e(n,r,t)}}onStorageEvent(e,n=!1){if(!e.key)return void this.forAllChangedKeys(((e,n,t)=>{this.notifyListeners(e,t)}));const t=e.key;if(n?this.detachListener():this.stopPolling(),this.safariLocalStorageNotSynced){const r=this.storage.getItem(t);if(e.newValue!==r)null!==e.newValue?this.storage.setItem(t,e.newValue):this.storage.removeItem(t);else if(this.localCache[t]===e.newValue&&!n)return}const r=()=>{const e=this.storage.getItem(t);(n||this.localCache[t]!==e)&&this.notifyListeners(t,e)},i=this.storage.getItem(t);!function(){const e=Mo();return e.indexOf("MSIE ")>=0||e.indexOf("Trident/")>=0}()||10!==document.documentMode||i===e.newValue||e.newValue===e.oldValue?r():setTimeout(r,10)}notifyListeners(e,n){this.localCache[e]=n;const t=this.listeners[e];if(t)for(const e of Array.from(t))e(n?JSON.parse(n):n)}startPolling(){this.stopPolling(),this.pollTimer=setInterval((()=>{this.forAllChangedKeys(((e,n,t)=>{this.onStorageEvent(new StorageEvent("storage",{key:e,oldValue:n,newValue:t}),!0)}))}),1e3)}stopPolling(){this.pollTimer&&(clearInterval(this.pollTimer),this.pollTimer=null)}attachListener(){window.addEventListener("storage",this.boundEventHandler)}detachListener(){window.removeEventListener("storage",this.boundEventHandler)}_addListener(e,n){0===Object.keys(this.listeners).length&&(this.fallbackToPolling?this.startPolling():this.attachListener()),this.listeners[e]||(this.listeners[e]=new Set,this.localCache[e]=this.storage.getItem(e)),this.listeners[e].add(n)}_removeListener(e,n){this.listeners[e]&&(this.listeners[e].delete(n),0===this.listeners[e].size&&delete this.listeners[e]),0===Object.keys(this.listeners).length&&(this.detachListener(),this.stopPolling())}async _set(e,n){await super._set(e,n),this.localCache[e]=JSON.stringify(n)}async _get(e){const n=await super._get(e);return this.localCache[e]=JSON.stringify(n),n}async _remove(e){await super._remove(e),delete this.localCache[e]}}Lc.type="LOCAL";const Uc=Lc;class Tc extends kc{constructor(){super((()=>window.sessionStorage),"SESSION")}_addListener(e,n){}_removeListener(e,n){}}Tc.type="SESSION";const Rc=Tc;class Fc{constructor(e){this.eventTarget=e,this.handlersMap={},this.boundEventHandler=this.handleEvent.bind(this)}static _getInstance(e){const n=this.receivers.find((n=>n.isListeningto(e)));if(n)return n;const t=new Fc(e);return this.receivers.push(t),t}isListeningto(e){return this.eventTarget===e}async handleEvent(e){const n=e,{eventId:t,eventType:r,data:i}=n.data,a=this.handlersMap[r];if(!(null==a?void 0:a.size))return;n.ports[0].postMessage({status:"ack",eventId:t,eventType:r});const s=Array.from(a).map((async e=>e(n.origin,i))),o=await function(e){return Promise.all(e.map((async e=>{try{return{fulfilled:!0,value:await e}}catch(e){return{fulfilled:!1,reason:e}}})))}(s);n.ports[0].postMessage({status:"done",eventId:t,eventType:r,response:o})}_subscribe(e,n){0===Object.keys(this.handlersMap).length&&this.eventTarget.addEventListener("message",this.boundEventHandler),this.handlersMap[e]||(this.handlersMap[e]=new Set),this.handlersMap[e].add(n)}_unsubscribe(e,n){this.handlersMap[e]&&n&&this.handlersMap[e].delete(n),n&&0!==this.handlersMap[e].size||delete this.handlersMap[e],0===Object.keys(this.handlersMap).length&&this.eventTarget.removeEventListener("message",this.boundEventHandler)}}function Mc(e="",n=10){let t="";for(let e=0;e<n;e++)t+=Math.floor(10*Math.random());return e+t}Fc.receivers=[];class Nc{constructor(e){this.target=e,this.handlers=new Set}removeMessageHandler(e){e.messageChannel&&(e.messageChannel.port1.removeEventListener("message",e.onMessage),e.messageChannel.port1.close()),this.handlers.delete(e)}async _send(e,n,t=50){const r="undefined"!=typeof MessageChannel?new MessageChannel:null;if(!r)throw new Error("connection_unavailable");let i,a;return new Promise(((s,o)=>{const l=Mc("",20);r.port1.start();const d=setTimeout((()=>{o(new Error("unsupported_event"))}),t);a={messageChannel:r,onMessage(e){const n=e;if(n.data.eventId===l)switch(n.data.status){case"ack":clearTimeout(d),i=setTimeout((()=>{o(new Error("timeout"))}),3e3);break;case"done":clearTimeout(i),s(n.data.response);break;default:clearTimeout(d),clearTimeout(i),o(new Error("invalid_response"))}}},this.handlers.add(a),r.port1.addEventListener("message",a.onMessage),this.target.postMessage({eventType:e,eventId:l,data:n},[r.port2])})).finally((()=>{a&&this.removeMessageHandler(a)}))}}function Wc(){return window}function jc(){return void 0!==Wc().WorkerGlobalScope&&"function"==typeof Wc().importScripts}const Bc="firebaseLocalStorageDb",zc="firebaseLocalStorage",Vc="fbase_key";class Hc{constructor(e){this.request=e}toPromise(){return new Promise(((e,n)=>{this.request.addEventListener("success",(()=>{e(this.request.result)})),this.request.addEventListener("error",(()=>{n(this.request.error)}))}))}}function Jc(e,n){return e.transaction([zc],n?"readwrite":"readonly").objectStore(zc)}function Gc(){const e=indexedDB.open(Bc,1);return new Promise(((n,t)=>{e.addEventListener("error",(()=>{t(e.error)})),e.addEventListener("upgradeneeded",(()=>{const n=e.result;try{n.createObjectStore(zc,{keyPath:Vc})}catch(e){t(e)}})),e.addEventListener("success",(async()=>{const t=e.result;t.objectStoreNames.contains(zc)?n(t):(t.close(),await function(){const e=indexedDB.deleteDatabase(Bc);return new Hc(e).toPromise()}(),n(await Gc()))}))}))}async function $c(e,n,t){const r=Jc(e,!0).put({[Vc]:n,value:t});return new Hc(r).toPromise()}function Yc(e,n){const t=Jc(e,!0).delete(n);return new Hc(t).toPromise()}class qc{constructor(){this.type="LOCAL",this._shouldAllowMigration=!0,this.listeners={},this.localCache={},this.pollTimer=null,this.pendingWrites=0,this.receiver=null,this.sender=null,this.serviceWorkerReceiverAvailable=!1,this.activeServiceWorker=null,this._workerInitializationPromise=this.initializeServiceWorkerMessaging().then((()=>{}),(()=>{}))}async _openDb(){return this.db||(this.db=await Gc()),this.db}async _withRetries(e){let n=0;for(;;)try{const n=await this._openDb();return await e(n)}catch(e){if(n++>3)throw e;this.db&&(this.db.close(),this.db=void 0)}}async initializeServiceWorkerMessaging(){return jc()?this.initializeReceiver():this.initializeSender()}async initializeReceiver(){this.receiver=Fc._getInstance(jc()?self:null),this.receiver._subscribe("keyChanged",(async(e,n)=>({keyProcessed:(await this._poll()).includes(n.key)}))),this.receiver._subscribe("ping",(async(e,n)=>["keyChanged"]))}async initializeSender(){var e,n;if(this.activeServiceWorker=await async function(){if(!(null===navigator||void 0===navigator?void 0:navigator.serviceWorker))return null;try{return(await navigator.serviceWorker.ready).active}catch(e){return null}}(),!this.activeServiceWorker)return;this.sender=new Nc(this.activeServiceWorker);const t=await this.sender._send("ping",{},800);t&&(null===(e=t[0])||void 0===e?void 0:e.fulfilled)&&(null===(n=t[0])||void 0===n?void 0:n.value.includes("keyChanged"))&&(this.serviceWorkerReceiverAvailable=!0)}async notifyServiceWorker(e){var n;if(this.sender&&this.activeServiceWorker&&((null===(n=null===navigator||void 0===navigator?void 0:navigator.serviceWorker)||void 0===n?void 0:n.controller)||null)===this.activeServiceWorker)try{await this.sender._send("keyChanged",{key:e},this.serviceWorkerReceiverAvailable?800:50)}catch(n){}}async _isAvailable(){try{if(!indexedDB)return!1;const e=await Gc();return await $c(e,Oc,"1"),await Yc(e,Oc),!0}catch(e){}return!1}async _withPendingWrite(e){this.pendingWrites++;try{await e()}finally{this.pendingWrites--}}async _set(e,n){return this._withPendingWrite((async()=>(await this._withRetries((t=>$c(t,e,n))),this.localCache[e]=n,this.notifyServiceWorker(e))))}async _get(e){const n=await this._withRetries((n=>async function(e,n){const t=Jc(e,!1).get(n),r=await new Hc(t).toPromise();return void 0===r?null:r.value}(n,e)));return this.localCache[e]=n,n}async _remove(e){return this._withPendingWrite((async()=>(await this._withRetries((n=>Yc(n,e))),delete this.localCache[e],this.notifyServiceWorker(e))))}async _poll(){const e=await this._withRetries((e=>{const n=Jc(e,!1).getAll();return new Hc(n).toPromise()}));if(!e)return[];if(0!==this.pendingWrites)return[];const n=[],t=new Set;for(const{fbase_key:r,value:i}of e)t.add(r),JSON.stringify(this.localCache[r])!==JSON.stringify(i)&&(this.notifyListeners(r,i),n.push(r));for(const e of Object.keys(this.localCache))this.localCache[e]&&!t.has(e)&&(this.notifyListeners(e,null),n.push(e));return n}notifyListeners(e,n){this.localCache[e]=n;const t=this.listeners[e];if(t)for(const e of Array.from(t))e(n)}startPolling(){this.stopPolling(),this.pollTimer=setInterval((async()=>this._poll()),800)}stopPolling(){this.pollTimer&&(clearInterval(this.pollTimer),this.pollTimer=null)}_addListener(e,n){0===Object.keys(this.listeners).length&&this.startPolling(),this.listeners[e]||(this.listeners[e]=new Set,this._get(e)),this.listeners[e].add(n)}_removeListener(e,n){this.listeners[e]&&(this.listeners[e].delete(n),0===this.listeners[e].size&&delete this.listeners[e]),0===Object.keys(this.listeners).length&&this.stopPolling()}}qc.type="LOCAL";const Zc=qc;ic("rcb"),new cd(3e4,6e4);class Qc{constructor(e){this.providerId=Qc.PROVIDER_ID,this.auth=nc(e)}verifyPhoneNumber(e,n){return async function(e,n,t){var r;const i=await t.verify();try{let a;if(id("string"==typeof i,e,"argument-error"),id("recaptcha"===t.type,e,"argument-error"),a="string"==typeof n?{phoneNumber:n}:n,"session"in a){const n=a.session;if("phoneNumber"in a){id("enroll"===n.type,e,"internal-error");const t=await function(e,n){return gd(e,"POST","/v2/accounts/mfaEnrollment:start",fd(e,n))}(e,{idToken:n.credential,phoneEnrollmentInfo:{phoneNumber:a.phoneNumber,recaptchaToken:i}});return t.phoneSessionInfo.sessionInfo}{id("signin"===n.type,e,"internal-error");const t=(null===(r=a.multiFactorHint)||void 0===r?void 0:r.uid)||a.multiFactorUid;id(t,e,"missing-multi-factor-info");const s=await function(e,n){return gd(e,"POST","/v2/accounts/mfaSignIn:start",fd(e,n))}(e,{mfaPendingCredential:n.credential,mfaEnrollmentId:t,phoneSignInInfo:{recaptchaToken:i}});return s.phoneResponseInfo.sessionInfo}}{const{sessionInfo:n}=await async function(e,n){return gd(e,"POST","/v1/accounts:sendVerificationCode",fd(e,n))}(e,{phoneNumber:a.phoneNumber,recaptchaToken:i});return n}}finally{t._reset()}}(this.auth,e,Yo(n))}static credential(e,n){return Cc._fromVerification(e,n)}static credentialFromResult(e){const n=e;return Qc.credentialFromTaggedObject(n)}static credentialFromError(e){return Qc.credentialFromTaggedObject(e.customData||{})}static credentialFromTaggedObject({_tokenResponse:e}){if(!e)return null;const{phoneNumber:n,temporaryProof:t}=e;return n&&t?Cc._fromTokenResponse(n,t):null}}Qc.PROVIDER_ID="phone",Qc.PHONE_SIGN_IN_METHOD="phone";class Kc extends cc{constructor(e){super("custom","custom"),this.params=e}_getIdTokenResponse(e){return hc(e,this._buildIdpRequest())}_linkToIdToken(e,n){return hc(e,this._buildIdpRequest(n))}_getReauthenticationResolver(e){return hc(e,this._buildIdpRequest())}_buildIdpRequest(e){const n={requestUri:this.params.requestUri,sessionId:this.params.sessionId,postBody:this.params.postBody,tenantId:this.params.tenantId,pendingToken:this.params.pendingToken,returnSecureToken:!0,returnIdpCredential:!0};return e&&(n.idToken=e),n}}function Xc(e){return async function(e,n,t=!1){const r="signIn",i=await xc(e,r,n),a=await _c._fromIdTokenResponse(e,r,i);return t||await e._updateCurrentUser(a.user),a}(e.auth,new Kc(e),e.bypassAuthState)}function eu(e){const{auth:n,user:t}=e;return id(t,n,"internal-error"),async function(e,n,t=!1){const{auth:r}=e,i="reauthenticate";try{const a=await Id(e,xc(r,i,n,e),t);id(a.idToken,r,"internal-error");const s=Dd(a.idToken);id(s,r,"internal-error");const{sub:o}=s;return id(e.uid===o,r,"user-mismatch"),_c._forOperation(e,i,a)}catch(e){throw"auth/user-not-found"===(null==e?void 0:e.code)&&nd(r,"user-mismatch"),e}}(t,new Kc(e),e.bypassAuthState)}async function nu(e){const{auth:n,user:t}=e;return id(t,n,"internal-error"),async function(e,n,t=!1){const r=await Id(e,n._linkToIdToken(e.auth,await e.getIdToken()),t);return _c._forOperation(e,"link",r)}(t,new Kc(e),e.bypassAuthState)}class tu{constructor(e,n,t,r,i=!1){this.auth=e,this.resolver=t,this.user=r,this.bypassAuthState=i,this.pendingPromise=null,this.eventManager=null,this.filter=Array.isArray(n)?n:[n]}execute(){return new Promise((async(e,n)=>{this.pendingPromise={resolve:e,reject:n};try{this.eventManager=await this.resolver._initialize(this.auth),await this.onExecution(),this.eventManager.registerConsumer(this)}catch(e){this.reject(e)}}))}async onAuthEvent(e){const{urlResponse:n,sessionId:t,postBody:r,tenantId:i,error:a,type:s}=e;if(a)return void this.reject(a);const o={auth:this.auth,requestUri:n,sessionId:t,tenantId:i||void 0,postBody:r||void 0,user:this.user,bypassAuthState:this.bypassAuthState};try{this.resolve(await this.getIdpTask(s)(o))}catch(e){this.reject(e)}}onError(e){this.reject(e)}getIdpTask(e){switch(e){case"signInViaPopup":case"signInViaRedirect":return Xc;case"linkViaPopup":case"linkViaRedirect":return nu;case"reauthViaPopup":case"reauthViaRedirect":return eu;default:nd(this.auth,"internal-error")}}resolve(e){sd(this.pendingPromise,"Pending promise was never set"),this.pendingPromise.resolve(e),this.unregisterAndCleanUp()}reject(e){sd(this.pendingPromise,"Pending promise was never set"),this.pendingPromise.reject(e),this.unregisterAndCleanUp()}unregisterAndCleanUp(){this.eventManager&&this.eventManager.unregisterConsumer(this),this.pendingPromise=null,this.cleanUp()}}const ru=new cd(2e3,1e4);class iu extends tu{constructor(e,n,t,r,i){super(e,n,r,i),this.provider=t,this.authWindow=null,this.pollId=null,iu.currentPopupAction&&iu.currentPopupAction.cancel(),iu.currentPopupAction=this}async executeNotNull(){const e=await this.execute();return id(e,this.auth,"internal-error"),e}async onExecution(){sd(1===this.filter.length,"Popup operations only handle one event");const e=Mc();this.authWindow=await this.resolver._openPopup(this.auth,this.provider,this.filter[0],e),this.authWindow.associatedEvent=e,this.resolver._originValidation(this.auth).catch((e=>{this.reject(e)})),this.resolver._isIframeWebStorageSupported(this.auth,(e=>{e||this.reject(td(this.auth,"web-storage-unsupported"))})),this.pollUserCancellation()}get eventId(){var e;return(null===(e=this.authWindow)||void 0===e?void 0:e.associatedEvent)||null}cancel(){this.reject(td(this.auth,"cancelled-popup-request"))}cleanUp(){this.authWindow&&this.authWindow.close(),this.pollId&&window.clearTimeout(this.pollId),this.authWindow=null,this.pollId=null,iu.currentPopupAction=null}pollUserCancellation(){const e=()=>{var n,t;(null===(t=null===(n=this.authWindow)||void 0===n?void 0:n.window)||void 0===t?void 0:t.closed)?this.pollId=window.setTimeout((()=>{this.pollId=null,this.reject(td(this.auth,"popup-closed-by-user"))}),8e3):this.pollId=window.setTimeout(e,ru.get())};e()}}iu.currentPopupAction=null;const au="pendingRedirect",su=new Map;class ou extends tu{constructor(e,n,t=!1){super(e,["signInViaRedirect","linkViaRedirect","reauthViaRedirect","unknown"],n,void 0,t),this.eventId=null}async execute(){let e=su.get(this.auth._key());if(!e){try{const n=await async function(e,n){const t=function(e){return Wd(au,e.config.apiKey,e.name)}(n),r=function(e){return Fd(e._redirectPersistence)}(e);if(!await r._isAvailable())return!1;const i="true"===await r._get(t);return await r._remove(t),i}(this.resolver,this.auth)?await super.execute():null;e=()=>Promise.resolve(n)}catch(n){e=()=>Promise.reject(n)}su.set(this.auth._key(),e)}return this.bypassAuthState||su.set(this.auth._key(),(()=>Promise.resolve(null))),e()}async onAuthEvent(e){if("signInViaRedirect"===e.type)return super.onAuthEvent(e);if("unknown"!==e.type){if(e.eventId){const n=await this.auth._redirectUserForId(e.eventId);if(n)return this.user=n,super.onAuthEvent(e);this.resolve(null)}}else this.resolve(null)}async onExecution(){}cleanUp(){}}function lu(e,n){su.set(e._key(),n)}async function du(e,n,t=!1){const r=nc(e),i=function(e,n){return n?Fd(n):(id(e._popupRedirectResolver,e,"argument-error"),e._popupRedirectResolver)}(r,n),a=new ou(r,i,t),s=await a.execute();return s&&!t&&(delete s.user._redirectEventId,await r._persistUserIfCurrent(s.user),await r._setRedirectUser(null,n)),s}class cu{constructor(e){this.auth=e,this.cachedEventUids=new Set,this.consumers=new Set,this.queuedRedirectEvent=null,this.hasHandledPotentialRedirect=!1,this.lastProcessedEventTime=Date.now()}registerConsumer(e){this.consumers.add(e),this.queuedRedirectEvent&&this.isEventForConsumer(this.queuedRedirectEvent,e)&&(this.sendToConsumer(this.queuedRedirectEvent,e),this.saveEventToCache(this.queuedRedirectEvent),this.queuedRedirectEvent=null)}unregisterConsumer(e){this.consumers.delete(e)}onEvent(e){if(this.hasEventBeenHandled(e))return!1;let n=!1;return this.consumers.forEach((t=>{this.isEventForConsumer(e,t)&&(n=!0,this.sendToConsumer(e,t),this.saveEventToCache(e))})),this.hasHandledPotentialRedirect||!function(e){switch(e.type){case"signInViaRedirect":case"linkViaRedirect":case"reauthViaRedirect":return!0;case"unknown":return pu(e);default:return!1}}(e)||(this.hasHandledPotentialRedirect=!0,n||(this.queuedRedirectEvent=e,n=!0)),n}sendToConsumer(e,n){var t;if(e.error&&!pu(e)){const r=(null===(t=e.error.code)||void 0===t?void 0:t.split("auth/")[1])||"internal-error";n.onError(td(this.auth,r))}else n.onAuthEvent(e)}isEventForConsumer(e,n){const t=null===n.eventId||!!e.eventId&&e.eventId===n.eventId;return n.filter.includes(e.type)&&t}hasEventBeenHandled(e){return Date.now()-this.lastProcessedEventTime>=6e5&&this.cachedEventUids.clear(),this.cachedEventUids.has(uu(e))}saveEventToCache(e){this.cachedEventUids.add(uu(e)),this.lastProcessedEventTime=Date.now()}}function uu(e){return[e.type,e.eventId,e.sessionId,e.tenantId].filter((e=>e)).join("-")}function pu({type:e,error:n}){return"unknown"===e&&"auth/no-auth-event"===(null==n?void 0:n.code)}const mu=/^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/,hu=/^https?/;function fu(e){const n=od(),{protocol:t,hostname:r}=new URL(n);if(e.startsWith("chrome-extension://")){const i=new URL(e);return""===i.hostname&&""===r?"chrome-extension:"===t&&e.replace("chrome-extension://","")===n.replace("chrome-extension://",""):"chrome-extension:"===t&&i.hostname===r}if(!hu.test(t))return!1;if(mu.test(e))return r===e;const i=e.replace(/\./g,"\\.");return new RegExp("^(.+\\."+i+"|"+i+")$","i").test(r)}const gu=new cd(3e4,6e4);function Cu(){const e=Wc().___jsl;if(null==e?void 0:e.H)for(const n of Object.keys(e.H))if(e.H[n].r=e.H[n].r||[],e.H[n].L=e.H[n].L||[],e.H[n].r=[...e.H[n].L],e.CP)for(let n=0;n<e.CP.length;n++)e.CP[n]=null}let Au=null;function vu(e){return Au=Au||function(e){return new Promise(((n,t)=>{var r,i,a;function s(){Cu(),gapi.load("gapi.iframes",{callback:()=>{n(gapi.iframes.getContext())},ontimeout:()=>{Cu(),t(td(e,"network-request-failed"))},timeout:gu.get()})}if(null===(i=null===(r=Wc().gapi)||void 0===r?void 0:r.iframes)||void 0===i?void 0:i.Iframe)n(gapi.iframes.getContext());else{if(!(null===(a=Wc().gapi)||void 0===a?void 0:a.load)){const n=ic("iframefcb");return Wc()[n]=()=>{gapi.load?s():t(td(e,"network-request-failed"))},rc(`https://apis.google.com/js/api.js?onload=${n}`).catch((e=>t(e)))}s()}})).catch((e=>{throw Au=null,e}))}(e),Au}const bu=new cd(5e3,15e3),yu={style:{position:"absolute",top:"-100px",width:"1px",height:"1px"},"aria-hidden":"true",tabindex:"-1"},wu=new Map([["identitytoolkit.googleapis.com","p"],["staging-identitytoolkit.sandbox.googleapis.com","s"],["test-identitytoolkit.sandbox.googleapis.com","t"]]);function Su(e){const n=e.config;id(n.authDomain,e,"auth-domain-config-required");const t=n.emulator?ud(n,"emulator/auth/iframe"):`https://${e.config.authDomain}/__/auth/iframe`,r={apiKey:n.apiKey,appName:e.name,v:Ml},i=wu.get(e.config.apiHost);i&&(r.eid=i);const a=e._getFrameworks();return a.length&&(r.fw=a.join(",")),`${t}?${Vo(r).slice(1)}`}const Pu={location:"yes",resizable:"yes",statusbar:"yes",toolbar:"no"};class Eu{constructor(e){this.window=e,this.associatedEvent=null}close(){if(this.window)try{this.window.close()}catch(e){}}}const _u=encodeURIComponent("fac");async function Du(e,n,t,r,i,a){id(e.config.authDomain,e,"auth-domain-config-required"),id(e.config.apiKey,e,"invalid-api-key");const s={apiKey:e.config.apiKey,appName:e.name,authType:t,redirectUrl:r,v:Ml,eventId:i};if(n instanceof bc){n.setDefaultLanguage(e.languageCode),s.providerId=n.providerId||"",function(e){for(const n in e)if(Object.prototype.hasOwnProperty.call(e,n))return!1;return!0}(n.getCustomParameters())||(s.customParameters=JSON.stringify(n.getCustomParameters()));for(const[e,n]of Object.entries(a||{}))s[e]=n}if(n instanceof yc){const e=n.getScopes().filter((e=>""!==e));e.length>0&&(s.scopes=e.join(","))}e.tenantId&&(s.tid=e.tenantId);const o=s;for(const e of Object.keys(o))void 0===o[e]&&delete o[e];const l=await e._getAppCheckToken(),d=l?`#${_u}=${encodeURIComponent(l)}`:"";return`${function({config:e}){return e.emulator?ud(e,"emulator/auth/handler"):`https://${e.authDomain}/__/auth/handler`}(e)}?${Vo(o).slice(1)}${d}`}const Iu="webStorageSupport",xu=class{constructor(){this.eventManagers={},this.iframes={},this.originValidationPromises={},this._redirectPersistence=Rc,this._completeRedirectFn=du,this._overrideRedirectResult=lu}async _openPopup(e,n,t,r){var i;return sd(null===(i=this.eventManagers[e._key()])||void 0===i?void 0:i.manager,"_initialize() not called before _openPopup()"),function(e,n,t,r=500,i=600){const a=Math.max((window.screen.availHeight-i)/2,0).toString(),s=Math.max((window.screen.availWidth-r)/2,0).toString();let o="";const l=Object.assign(Object.assign({},Pu),{width:r.toString(),height:i.toString(),top:a,left:s}),d=Mo().toLowerCase();t&&(o=Hd(d)?"_blank":t),zd(d)&&(n=n||"http://localhost",l.scrollbars="yes");const c=Object.entries(l).reduce(((e,[n,t])=>`${e}${n}=${t},`),"");if(function(e=Mo()){var n;return qd(e)&&!!(null===(n=window.navigator)||void 0===n?void 0:n.standalone)}(d)&&"_self"!==o)return function(e,n){const t=document.createElement("a");t.href=e,t.target=n;const r=document.createEvent("MouseEvent");r.initMouseEvent("click",!0,!0,window,1,0,0,0,0,!1,!1,!1,!1,1,null),t.dispatchEvent(r)}(n||"",o),new Eu(null);const u=window.open(n||"",o,c);id(u,e,"popup-blocked");try{u.focus()}catch(e){}return new Eu(u)}(e,await Du(e,n,t,od(),r),Mc())}async _openRedirect(e,n,t,r){return await this._originValidation(e),i=await Du(e,n,t,od(),r),Wc().location.href=i,new Promise((()=>{}));var i}_initialize(e){const n=e._key();if(this.eventManagers[n]){const{manager:e,promise:t}=this.eventManagers[n];return e?Promise.resolve(e):(sd(t,"If manager is not set, promise should be"),t)}const t=this.initAndGetManager(e);return this.eventManagers[n]={promise:t},t.catch((()=>{delete this.eventManagers[n]})),t}async initAndGetManager(e){const n=await async function(e){const n=await vu(e),t=Wc().gapi;return id(t,e,"internal-error"),n.open({where:document.body,url:Su(e),messageHandlersFilter:t.iframes.CROSS_ORIGIN_IFRAMES_FILTER,attributes:yu,dontclear:!0},(n=>new Promise((async(t,r)=>{await n.restyle({setHideOnLeave:!1});const i=td(e,"network-request-failed"),a=Wc().setTimeout((()=>{r(i)}),bu.get());function s(){Wc().clearTimeout(a),t(n)}n.ping(s).then(s,(()=>{r(i)}))}))))}(e),t=new cu(e);return n.register("authEvent",(n=>(id(null==n?void 0:n.authEvent,e,"invalid-auth-event"),{status:t.onEvent(n.authEvent)?"ACK":"ERROR"})),gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER),this.eventManagers[e._key()]={manager:t},this.iframes[e._key()]=n,t}_isIframeWebStorageSupported(e,n){this.iframes[e._key()].send(Iu,{type:Iu},(t=>{var r;const i=null===(r=null==t?void 0:t[0])||void 0===r?void 0:r[Iu];void 0!==i&&n(!!i),nd(e,"internal-error")}),gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER)}_originValidation(e){const n=e._key();return this.originValidationPromises[n]||(this.originValidationPromises[n]=async function(e){if(e.config.emulator)return;const{authorizedDomains:n}=await async function(e,n={}){return gd(e,"GET","/v1/projects",n)}(e);for(const e of n)try{if(fu(e))return}catch(e){}nd(e,"unauthorized-domain")}(e)),this.originValidationPromises[n]}get _shouldInitProactively(){return Zd()||Vd()||qd()}};var Ou="@firebase/auth",ku="1.4.0";class Lu{constructor(e){this.auth=e,this.internalListeners=new Map}getUid(){var e;return this.assertAuthConfigured(),(null===(e=this.auth.currentUser)||void 0===e?void 0:e.uid)||null}async getToken(e){return this.assertAuthConfigured(),await this.auth._initializationPromise,this.auth.currentUser?{accessToken:await this.auth.currentUser.getIdToken(e)}:null}addAuthTokenListener(e){if(this.assertAuthConfigured(),this.internalListeners.has(e))return;const n=this.auth.onIdTokenChanged((n=>{e((null==n?void 0:n.stsTokenManager.accessToken)||null)}));this.internalListeners.set(e,n),this.updateProactiveRefresh()}removeAuthTokenListener(e){this.assertAuthConfigured();const n=this.internalListeners.get(e);n&&(this.internalListeners.delete(e),n(),this.updateProactiveRefresh())}assertAuthConfigured(){id(this.auth._initializationPromise,"dependent-sdk-initialized-before-auth")}updateProactiveRefresh(){this.internalListeners.size>0?this.auth._startProactiveRefresh():this.auth._stopProactiveRefresh()}}const Uu=Ro("authIdTokenMaxAge")||300;let Tu=null;var Ru;Ru="Browser",Ul(new qo("auth",((e,{options:n})=>{const t=e.getProvider("app").getImmediate(),r=e.getProvider("heartbeat"),i=e.getProvider("app-check-internal"),{apiKey:a,authDomain:s}=t.options;id(a&&!a.includes(":"),"invalid-api-key",{appName:t.name});const o={apiKey:a,authDomain:s,clientPlatform:Ru,apiHost:"identitytoolkit.googleapis.com",tokenApiHost:"securetoken.googleapis.com",apiScheme:"https",sdkClientVersion:Qd(Ru)},l=new ec(t,r,i,o);return function(e,n){const t=(null==n?void 0:n.persistence)||[],r=(Array.isArray(t)?t:[t]).map(Fd);(null==n?void 0:n.errorMap)&&e._updateErrorMap(n.errorMap),e._initializeWithPersistence(r,null==n?void 0:n.popupRedirectResolver)}(l,n),l}),"PUBLIC").setInstantiationMode("EXPLICIT").setInstanceCreatedCallback(((e,n,t)=>{e.getProvider("auth-internal").initialize()}))),Ul(new qo("auth-internal",(e=>{return n=nc(e.getProvider("auth").getImmediate()),new Lu(n);var n}),"PRIVATE").setInstantiationMode("EXPLICIT")),Wl(Ou,ku,function(e){switch(e){case"Node":return"node";case"ReactNative":return"rn";case"Worker":return"webworker";case"Cordova":return"cordova";default:return}}(Ru)),Wl(Ou,ku,"esm2017"),function(e=function(e=Il){const n=Ol.get(e);if(!n&&e===Il&&To())return Nl();if(!n)throw Rl.create("no-app",{appName:e});return n}()){const n=Tl(e,"auth");if(n.isInitialized())return n.getImmediate();const t=function(e,n){const t=Tl(e,"auth");if(t.isInitialized()){const e=t.getImmediate();if(Bo(t.getOptions(),null!=n?n:{}))return e;nd(e,"already-initialized")}return t.initialize({options:n})}(e,{popupRedirectResolver:xu,persistence:[Zc,Uc,Rc]}),r=Ro("authTokenSyncURL");if(r){const e=(i=r,async e=>{const n=e&&await e.getIdTokenResult(),t=n&&((new Date).getTime()-Date.parse(n.issuedAtTime))/1e3;if(t&&t>Uu)return;const r=null==n?void 0:n.token;Tu!==r&&(Tu=r,await fetch(i,{method:r?"POST":"DELETE",headers:r?{Authorization:`Bearer ${r}`}:{}}))});!function(e,n,t){Yo(e).beforeAuthStateChanged(n,t)}(t,e,(()=>e(t.currentUser))),function(n,t,r,i){Yo(n).onIdTokenChanged((n=>e(n)),void 0,void 0)}(t)}var i;const a=(s="auth",null===(l=null===(o=Uo())||void 0===o?void 0:o.emulatorHosts)||void 0===l?void 0:l[s]);var s,o,l;a&&function(e,n,t){const r=nc(e);id(r._canInitEmulator,r,"emulator-config-failed"),id(/^https?:\/\//.test(n),r,"invalid-emulator-scheme");const i=!!(null==t?void 0:t.disableWarnings),a=lc(n),{host:s,port:o}=function(e){const n=lc(e),t=/(\/\/)?([^?#/]+)/.exec(e.substr(n.length));if(!t)return{host:"",port:null};const r=t[2].split("@").pop()||"",i=/^(\[[^\]]+\])(:|$)/.exec(r);if(i){const e=i[1];return{host:e,port:dc(r.substr(e.length+1))}}{const[e,n]=r.split(":");return{host:e,port:dc(n)}}}(n),l=null===o?"":`:${o}`;r.config.emulator={url:`${a}//${s}${l}/`},r.settings.appVerificationDisabledForTesting=!0,r.emulatorConfig=Object.freeze({host:s,port:o,protocol:a.replace(":",""),options:Object.freeze({disableWarnings:i})}),i||function(){function e(){const e=document.createElement("p"),n=e.style;e.innerText="Running in emulator mode. Do not use with production credentials.",n.position="fixed",n.width="100%",n.backgroundColor="#ffffff",n.border=".1em solid #000000",n.color="#b50000",n.bottom="0px",n.left="0px",n.margin="0px",n.zIndex="10000",n.textAlign="center",e.classList.add("firebase-emulator-warning"),document.body.appendChild(e)}"undefined"!=typeof console&&"function"==typeof console.info&&console.info("WARNING: You are using the Auth Emulator, which is intended for local testing only.  Do not use with production credentials."),"undefined"!=typeof window&&"undefined"!=typeof document&&("loading"===document.readyState?window.addEventListener("DOMContentLoaded",e):e())}()}(t,`http://${a}`)}(Nl({apiKey:"AIzaSyDj2m_HEMMw2uh_bUAatPfqq2qLAYzxHmE",authDomain:"teste-react-9f4fd.firebaseapp.com",projectId:"teste-react-9f4fd",storageBucket:"teste-react-9f4fd.appspot.com",messagingSenderId:"257906966406",appId:"1:257906966406:web:21ca6fc95ef916b3b7b607",measurementId:"G-ZDKJBT3VQE"}));var Fu=document.getElementById("root");(0,r.s)(Fu).render((0,dr.jsx)(n.StrictMode,{children:(0,dr.jsx)(me,{children:(0,dr.jsx)(le,{children:(0,dr.jsx)(se,{path:"/",element:(0,dr.jsx)(Do,{})})})})}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,